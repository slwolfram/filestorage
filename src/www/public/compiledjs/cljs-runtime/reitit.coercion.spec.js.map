{"version":3,"sources":["reitit/coercion/spec.cljc"],"mappings":"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","names":["reitit.coercion.spec/string-transformer","spec_tools.core.type_transformer","spec-tools.core/strip-extra-keys-transformer","spec-tools.core/string-transformer","reitit.coercion.spec/json-transformer","spec-tools.core/json-transformer","reitit.coercion.spec/strip-extra-keys-transformer","reitit.coercion.spec/no-op-transformer","reitit.coercion.spec/t_reitit$coercion$spec30414","_","reitit$coercion$spec$IntoSpec$into_spec$dyn","x__5393__auto__","m__5394__auto__","reitit.coercion.spec/into-spec","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","reitit.coercion.spec/IntoSpec","this","name","reitit.coercion.spec/ensure-name","?name","or__5045__auto__","cljs.core.keyword","cljs.core/name","cljs.core.gensym","cljs.core/PROTOCOL_SENTINEL","cljs.core/PersistentArrayMap","cljs.core.dissoc","spec_tools.data_spec.spec","cljs.core/PersistentHashMap","cljs.core/PersistentVector","spec-tools.data-spec/Maybe","spec-tools.core/Spec","spec-tools.core/create-spec","reitit.coercion.spec/stringify-pred","pred","cljs.core/seq?","cljs.core/seq","js/reitit","js/reitit.coercion","js/reitit.coercion.spec","js/reitit.coercion.spec.coerce-response?","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__30420","cljs.core/MultiFn","cljs.core.symbol","reitit.coercion.spec/coerce-response?","cljs.core/identity","reitit.coercion.spec/default-options","p__30423","map__30424","cljs.core/--destructure-map","reitit.coercion.spec/create","transformers","coerce-response?","opts","reitit.coercion.spec/t_reitit$coercion$spec30426","specification","model","options","G__30437","cljs.core/Keyword","spec_tools.openapi.core.transform","cljs.core.merge","cljs.core.ex_info","request","parameters","responses","content-types","G__30440","spec_tools.swagger.core.swagger_spec","cljs.core.into","cljs.core/empty","iter__5523__auto__","s__30445","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__30447","cljs.core/chunk-buffer","i__30446","vec__30448","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30444","cljs.core/chunk-rest","vec__30454","cljs.core/first","cljs.core/cons","cljs.core/rest","k","response","$","clojure.set/rename-keys","cljs.core._EQ_","cljs.core/every?","cljs.core/map?","cljs.core.apply","meta-merge.core/meta-merge","reitit.exception.fail_BANG_","spec","error","problems","cljs.core.update","cljs.core.comp","cljs.core/str","cljs.spec.alpha/form","cljs.core.assoc","p1__30421#","cljs.core.mapv","type","map__30429","formats","default","value","format","temp__5802__auto__","transformer","coerced","spec_tools.core.coerce","cljs.spec.alpha.valid_QMARK_","transformed","spec_tools.core.conform","cljs.spec.alpha/invalid?","spec_tools.core.explain_data","reitit.coercion/map->CoercionError","cljs.spec.alpha/unform","reitit.coercion.spec/coercion","cljs.core/chunk-first"],"sourcesContent":["(ns reitit.coercion.spec\n  (:require [clojure.set :as set]\n            [clojure.spec.alpha :as s]\n            [meta-merge.core :as mm]\n            [reitit.coercion :as coercion]\n            [reitit.exception :as ex]\n            [spec-tools.core :as st #?@(:cljs [:refer [Spec]])]\n            [spec-tools.data-spec :as ds #?@(:cljs [:refer [Maybe]])]\n            [spec-tools.openapi.core :as openapi]\n            [spec-tools.swagger.core :as swagger])\n  #?(:clj\n     (:import (spec_tools.core Spec)\n              (spec_tools.data_spec Maybe))))\n\n(def string-transformer\n  (st/type-transformer\n   st/strip-extra-keys-transformer\n   st/string-transformer))\n\n(def json-transformer\n  (st/type-transformer\n   st/strip-extra-keys-transformer\n   st/json-transformer))\n\n(def strip-extra-keys-transformer\n  st/strip-extra-keys-transformer)\n\n(def no-op-transformer\n  (reify\n    st/Transformer\n    (-name [_] ::no-op)\n    (-encoder [_ _ _])\n    (-decoder [_ _ _])))\n\n(defprotocol IntoSpec\n  (into-spec [this name]))\n\n(defn- ensure-name [?name]\n  (or ?name (keyword \"spec\" (name (gensym \"\")))))\n\n(extend-protocol IntoSpec\n\n  #?(:clj  clojure.lang.PersistentArrayMap\n     :cljs cljs.core.PersistentArrayMap)\n  (into-spec [this name]\n    (dissoc (ds/spec (ensure-name name) this) :name))\n\n  #?(:clj  clojure.lang.PersistentHashMap\n     :cljs cljs.core.PersistentHashMap)\n  (into-spec [this name]\n    (dissoc (ds/spec (ensure-name name) this) :name))\n\n  #?(:clj  clojure.lang.PersistentVector\n     :cljs cljs.core.PersistentVector)\n  (into-spec [this name]\n    (dissoc (ds/spec (ensure-name name) this) :name))\n\n  Maybe\n  (into-spec [this name]\n    (ds/spec (ensure-name name) this))\n\n  Spec\n  (into-spec [this _] this)\n\n  #?(:clj  Object\n     :cljs default)\n  (into-spec [this _]\n    (st/create-spec {:spec this}))\n\n  nil\n  (into-spec [_ _]))\n\n(defn stringify-pred [pred]\n  (str (if (seq? pred) (seq pred) pred)))\n\n(defmulti coerce-response? identity :default ::default)\n(defmethod coerce-response? ::default [_] true)\n\n(def default-options\n  {:coerce-response? coerce-response?\n   :transformers {:body {:default strip-extra-keys-transformer\n                         :formats {\"application/json\" json-transformer}}\n                  :string {:default string-transformer}\n                  :response {:default no-op-transformer}}})\n\n(defn create [{:keys [transformers coerce-response?] :as opts}]\n  ^{:type ::coercion/coercion}\n  (reify coercion/Coercion\n    (-get-name [_] :spec)\n    (-get-options [_] opts)\n    (-get-model-apidocs [_ specification model options]\n      (case specification\n        :openapi (openapi/transform model (merge opts options))\n        (throw\n         (ex-info\n          (str \"Can't produce Spec apidocs for \" specification)\n          {:type specification, :coercion :spec}))))\n    (-get-apidocs [_ specification {:keys [request parameters responses content-types]\n                                    :or {content-types [\"application/json\"]}}]\n      (case specification\n        :swagger (swagger/swagger-spec\n                  (merge\n                   (if parameters\n                     {::swagger/parameters parameters})\n                   (if responses\n                     {::swagger/responses\n                      (into\n                       (empty responses)\n                       (for [[k response] responses]\n                         [k (as-> response $\n                              (dissoc $ :content)\n                              (set/rename-keys $ {:body :schema}))]))})))\n        ;; :openapi handled in reitit.openapi/-get-apidocs-openapi\n        (throw\n         (ex-info\n          (str \"Can't produce Spec apidocs for \" specification)\n          {:specification specification, :coercion :spec}))))\n    (-compile-model [_ model name]\n      (into-spec\n       (cond\n         ;; we are safe!\n         (= (count model) 1) (first model)\n         ;; here be dragons, best effort\n         (every? map? model) (apply mm/meta-merge model)\n         ;; fail fast\n         :else (ex/fail! ::model-error {:message \"Can't merge nested clojure specs\", :spec model}))\n       name))\n    (-open-model [_ spec] spec)\n    (-encode-error [_ error]\n      (let [problems (-> error :problems ::s/problems)]\n        (-> error\n            (update :spec (comp str s/form))\n            (assoc :problems (mapv #(update % :pred stringify-pred) problems)))))\n    (-request-coercer [_ type spec]\n      (let [{:keys [formats default]} (transformers type)]\n        (fn [value format]\n          (if-let [transformer (or (get formats format) default)]\n            (let [coerced (st/coerce spec value transformer)]\n              (if (s/valid? spec coerced)\n                coerced\n                (let [transformed (st/conform spec coerced transformer)]\n                  (if (s/invalid? transformed)\n                    (let [problems (st/explain-data spec coerced transformer)]\n                      (coercion/map->CoercionError\n                       {:spec spec\n                        :problems problems}))\n                    (s/unform spec transformed)))))\n            value))))\n    (-response-coercer [this spec]\n      (if (coerce-response? spec)\n        (coercion/-request-coercer this :response spec)))))\n\n(def coercion (create default-options))\n"],"x_google_ignoreList":[0]}