{"version":3,"sources":["spec_tools/openapi/core.cljc"],"mappings":"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","names":["spec-tools.openapi.core/spec-dispatch","dispatch","_","js/spec-tools","js/spec-tools.openapi","js/spec-tools.openapi.core","js/spec-tools.openapi.core.accept-spec","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__30275","cljs.core/MultiFn","cljs.core.symbol","spec-tools.openapi.core/accept-spec","children","spec","options","vec__30277","cljs.core.nth","data","spec-tools.impl/extract-form","openapi-meta","spec-tools.impl/unlift-keys","or__5045__auto__","cljs.core.merge","spec-tools.json-schema/accept-spec","var_args","G__30286","spec-tools.openapi.core/transform","js/Error","spec_tools.openapi.core.transform","spec_tools.visitor.visit","spec-tools.openapi.core/is-nilable?","cljs.core/contains?","cljs.core._EQ_","cljs.core/count","cljs.core/group-by","spec-tools.openapi.core/extract-nilable","p1__30287#","cljs.core.remove","cljs.core/first","spec-tools.openapi.core/extract-single-param","in","nilable?","new-spec","G__30296","cljs.core/Keyword","p__30299","map__30300","cljs.core/--destructure-map","spec-tools.openapi.core/extract-object-param","properties","required","cljs.core.mapv","p__30301","vec__30302","map__30305","k","description","schema","cljs.core/name","G__30308","cljs.core/set","spec-tools.openapi.core/extract-parameter","parameter-spec","object?","cljs.core/PersistentVector","js/spec-tools.openapi.core.expand","fexpr__30316","spec-tools.openapi.core/expand","v","acc","cljs.core.into","iter__5523__auto__","s__30318","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__30320","cljs.core/chunk-buffer","i__30319","vec__30321","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30317","cljs.core/chunk-rest","vec__30324","cljs.core/cons","cljs.core/rest","name","s__30328","b__30330","i__30329","vec__30362","iter__30327","vec__30371","content-type","old","new","cljs.core.mapcat","p__30374","vec__30375","merged","cljs.core/reverse","cljs.core.reduce","p__30378","vec__30379","ps","cache","p","c","cljs.core/select-keys","cljs.core/not","cljs.core.conj","cljs.core/vec","s__30385","b__30387","i__30386","vec__30396","iter__30384","vec__30399","cljs.core.dissoc","spec-tools.openapi.core/expand-qualified-keywords","x","accept?","cljs.core/keys","cljs.core/methods","clojure.walk/postwalk","cljs.core/map?","cljs.core/reduce-kv","G__30403","spec-tools.openapi.core/openapi-spec","spec_tools.openapi.core.openapi_spec","cljs.core/chunk-first"],"sourcesContent":["(ns spec-tools.openapi.core\n  (:require [clojure.walk :as walk]\n            [spec-tools.impl :as impl]\n            [spec-tools.json-schema :as json-schema]\n            [spec-tools.visitor :as visitor]))\n\n(defn- spec-dispatch [dispatch _ _ _] dispatch)\n\n(defmulti accept-spec spec-dispatch :default ::default)\n\n(defmethod accept-spec 'clojure.core/float? [_ _ _ _]\n  {:type \"number\" :format \"float\"})\n\n(defmethod accept-spec 'clojure.core/double? [_ _ _ _]\n  {:type \"number\" :format \"double\"})\n\n(defmethod accept-spec 'clojure.spec.alpha/tuple [_ _ children _]\n  {:type  \"array\"\n   :items {:anyOf children}})\n\n(defmethod accept-spec 'clojure.core/sequential? [_ _ _ _]\n  {:type  \"array\"\n   :items {}})\n\n(defmethod accept-spec 'clojure.spec.alpha/alt [_ _ children _]\n  {:type  \"array\"\n   :items {:oneOf children}})\n\n(defmethod accept-spec ::visitor/set [_ _ children _]\n  {:enum children :type \"string\"})\n\n(defmethod accept-spec ::visitor/spec [dispatch spec children options]\n  (let [[_ data]     (impl/extract-form spec)\n        openapi-meta (impl/unlift-keys data \"openapi\")]\n    (or (:openapi data)\n        (merge (json-schema/accept-spec dispatch spec children options)\n               openapi-meta))))\n\n(defmethod accept-spec ::default [dispatch spec children options]\n  (json-schema/accept-spec dispatch spec children options))\n\n(defn transform\n  \"Generate OpenAPI3 schema matching the given clojure.spec spec.\"\n  ([spec]\n   (transform spec nil))\n  ([spec options]\n   (visitor/visit spec accept-spec options)))\n\n;;\n;; Extract OpenAPI3 parameters\n;;\n(defn- is-nilable?\n  [spec]\n  (and (contains? spec :oneOf)\n       (= 2 (count (:oneOf spec)))\n       (-> :type\n           (group-by (:oneOf spec))\n           (contains? \"null\"))))\n\n(defn- extract-nilable\n  [spec]\n  (->> (:oneOf spec)\n       (remove #(= (:type %) \"null\"))\n       first))\n\n(defn- extract-single-param\n  [in spec]\n  (let [nilable? (is-nilable? spec)\n        new-spec (if nilable?\n                   (extract-nilable spec)\n                   spec)]\n    {:name        (or (:title new-spec) (:type new-spec))\n     :in          in\n     :description (or (:description new-spec) \"\")\n     :required    (case in\n                    :path true\n                    (not nilable?))\n     :schema      new-spec}))\n\n(defn- extract-object-param\n  [in {:keys [properties required]}]\n  (mapv\n   (fn [[k {:keys [description] :as schema}]]\n     {:name        k\n      :in          (name in)\n      :description (or description \"\")\n      :required    (case in\n                     :path true\n                     (contains? (set required) k))\n      :schema      schema})\n   properties))\n\n(defn extract-parameter\n  [in spec]\n  (let [parameter-spec (transform spec)\n        object?        (and (contains? parameter-spec :properties)\n                            (= \"object\" (:type parameter-spec)))]\n    (if object?\n      (extract-object-param in parameter-spec)\n      (-> (extract-single-param in parameter-spec) vector))))\n\n;;\n;; Expand the spec\n;;\n\n(defmulti expand (fn [k _ _ _] k))\n\n(defmethod expand ::schemas [_ v acc _]\n  {:schemas\n   (into\n    (or (:schemas acc) {})\n    (for [[name schema] v]\n      {name (transform schema)}))})\n\n;; FIXME: Validate content-type value?\n(defmethod expand ::content [_ v acc _]\n  {:content\n   (into\n    (or (:content acc) {})\n    (for [[content-type schema] v]\n      {content-type {:schema (transform schema)}}))})\n\n(defmethod expand ::parameters [_ v acc _]\n  (let [old    (or (:parameters acc) [])\n        new    (mapcat (fn [[in spec]] (extract-parameter in spec)) v)\n        merged (->> (into old new)\n                    (reverse)\n                    (reduce\n                     (fn [[ps cache :as acc] p]\n                       (let [c (select-keys p [:in :name])]\n                         (if-not (cache c)\n                           [(conj ps p) (conj cache c)]\n                           acc)))\n                     [[] #{}])\n                    (first)\n                    (reverse)\n                    (vec))]\n    {:parameters merged}))\n\n(defmethod expand ::headers [_ v acc _]\n  {:headers\n   (into\n    (or (:headers acc) {})\n    (for [[name spec] v]\n      {name (-> (extract-single-param :header (transform spec))\n                (dissoc :in)\n                (dissoc :name))}))})\n\n(defn expand-qualified-keywords\n  [x options]\n  (let [accept? (set (keys (methods expand)))]\n    (walk/postwalk\n     (fn [x]\n       (if (map? x)\n         (reduce-kv\n          (fn [acc k v]\n            (if (accept? k)\n              (-> acc (dissoc k) (merge (expand k v acc options)))\n              acc))\n          x\n          x)\n         x))\n     x)))\n\n;;\n;; Generate the OpenAPI3 spec\n;;\n\n(defn openapi-spec\n  \"Transforms data into a OpenAPI3 spec. Input data must conform to the\n  Swagger3 Spec (https://swagger.io/specification/) with a exception that it\n  can have any qualified keywords which are expanded with the\n  `spec-tools.openapi.core/expand` multimethod.\"\n  ([x]\n   (openapi-spec x nil))\n  ([x options]\n   (expand-qualified-keywords x options)))\n"],"x_google_ignoreList":[0]}