{"version":3,"sources":["reitit/frontend.cljs"],"mappings":"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","names":["reitit.frontend/query-param","q","k","vs","cljs.core/vec","reitit.frontend/query-params","uri","cljs.core.map","p1__26744#","cljs.core.juxt","cljs.core/keyword","cljs.core.into","reitit.frontend/set-query-params","path","new-query-or-update-fn","goog.Uri/parse","new-query","cljs.core/fn?","G__26749","goog.Uri.QueryData/createFromMap","cljs.core/clj->js","reitit.frontend/match->path","match","query-params","fragment","temp__5804__auto__","reitit.core.match__GT_path","G__26754","and__5043__auto__","cljs.core/seq","reitit.impl/form-encode","var_args","G__26756","reitit.frontend/match-by-path","js/Error","p__26758","map__26759","cljs.core/--destructure-map","cljs.core.get","router","reitit.frontend.match_by_path","on-coercion-error","js/goog.Uri","coerce!","e26760","reitit.coercion/coerce!","e","temp__5802__auto__","reitit.core/match-by-path","cljs.core.assoc","parameters","or__5045__auto__","G__26762","reitit.frontend/match-by-name","name","reitit.frontend.match_by_name","path-params","reitit.core/match-by-name","G__26765","reitit.frontend/router","raw-routes","reitit.frontend.router","opts","reitit.core.router","cljs.core.merge","reitit.coercion/compile-request-coercers","G__26768","reitit.frontend/match-by-name!","reitit.frontend.match_by_name_BANG_","reitit.core/partial-match?","p1__26766#","cljs.core/every?","cljs.core/contains?","defined","cljs.core/keys","cljs.core/set","missing","clojure.set.difference","js/console.warn"],"sourcesContent":["(ns reitit.frontend\n  (:require [clojure.set :as set]\n            [reitit.coercion :as coercion]\n            [reitit.core :as r]\n            [reitit.impl :as impl]\n            goog.Uri\n            goog.Uri.QueryData))\n\n(defn- query-param [^goog.uri.QueryData q k]\n  (let [vs (.getValues q k)]\n    (if (< (alength vs) 2)\n      (aget vs 0)\n      (vec vs))))\n\n(defn query-params\n  \"Given goog.Uri, read query parameters into a Clojure map.\"\n  [^goog.Uri uri]\n  (let [q (.getQueryData uri)]\n    (->> q\n         (.getKeys)\n         (map (juxt keyword #(query-param q %)))\n         (into {}))))\n\n(defn set-query-params\n  \"Given Reitit-frontend path, update the query params\n  with given function and arguments.\n\n  Note: coercion is not applied to the query params\"\n  [path new-query-or-update-fn]\n  (let [^goog.Uri uri (goog.Uri/parse path)\n        new-query (if (fn? new-query-or-update-fn)\n                    (new-query-or-update-fn (query-params uri))\n                    new-query-or-update-fn)]\n    ;; NOTE: Differences to reitit.impl/query-string?\n    ;; reitit fn adds \"=\" even if value is empty string\n    ;; reitit encodes \" \" as \"+\" while browser and goog.Uri encode as \"%20\"\n    (.setQueryData uri (goog.Uri.QueryData/createFromMap (clj->js new-query)))\n    (.toString uri)))\n\n(defn\n  ^{:see-also [\"reitit.core/match->path\"]}\n  match->path\n  \"Create routing path from given match and optional query-string map and\n  optional fragment string.\"\n  [match query-params fragment]\n  (when-let [path (r/match->path match query-params)]\n    (cond-> path\n      (and fragment (seq fragment)) (str \"#\" (impl/form-encode fragment)))))\n\n(defn match-by-path\n  \"Given routing tree and current path, return match with possibly\n  coerced parameters. Return nil if no match found.\n\n  :on-coercion-error - a sideeffecting fn of `match exception -> nil`\"\n  ([router path] (match-by-path router path nil))\n  ([router path {:keys [on-coercion-error]}]\n   (let [uri (.parse goog.Uri path)\n         coerce! (if on-coercion-error\n                   (fn [match]\n                     (try (coercion/coerce! match)\n                          (catch js/Error e\n                            (on-coercion-error match e)\n                            (throw e))))\n                   coercion/coerce!)]\n     (if-let [match (r/match-by-path router (.getPath uri))]\n       (let [q (query-params uri)\n             fragment (when (.hasFragment uri)\n                        (.getFragment uri))\n             match (assoc match\n                     :query-params q\n                     :fragment fragment)\n             ;; Return uncoerced values if coercion is not enabled - so\n             ;; that tha parameters are always accessible from same property.\n             parameters (or (coerce! match)\n                            {:path (:path-params match)\n                             :query q\n                             :fragment fragment})]\n         (assoc match :parameters parameters))))))\n\n(defn match-by-name\n  \"Given a router, route name and optionally path-parameters,\n  will return a Match (exact match), PartialMatch (missing path-parameters)\n  or `nil` (no match).\"\n  ([router name]\n   (match-by-name router name {}))\n  ([router name path-params]\n   (r/match-by-name router name path-params)))\n\n(defn router\n  \"Create a `reitit.core.router` from raw route data and optionally an options map.\n  Enables request coercion. See [[reitit.core/router]] for details on options.\"\n  ([raw-routes]\n   (router raw-routes {}))\n  ([raw-routes opts]\n   (r/router raw-routes (merge {:compile coercion/compile-request-coercers} opts))))\n\n(defn match-by-name!\n  \"Logs problems using console.warn\"\n  ([router name]\n   (match-by-name! router name {}))\n  ([router name path-params]\n   (if-let [match (match-by-name router name path-params)]\n     (if (r/partial-match? match)\n       (if (every? #(contains? path-params %) (:required match))\n         match\n         (let [defined (-> path-params keys set)\n               missing (set/difference (:required match) defined)]\n           (js/console.warn\n            \"missing path-params for route\" name\n            {:template (:template match)\n             :missing missing\n             :path-params path-params\n             :required (:required match)})\n           nil))\n       match)\n     (do (js/console.warn \"missing route\" name)\n         nil))))\n"],"x_google_ignoreList":[0]}