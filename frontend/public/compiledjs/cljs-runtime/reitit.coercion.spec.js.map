{"version":3,"sources":["reitit/coercion/spec.cljc"],"mappings":"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","names":["reitit.coercion.spec/string-transformer","spec_tools.core.type_transformer","spec-tools.core/strip-extra-keys-transformer","spec-tools.core/string-transformer","reitit.coercion.spec/json-transformer","spec-tools.core/json-transformer","reitit.coercion.spec/strip-extra-keys-transformer","reitit.coercion.spec/no-op-transformer","js/reitit","js/reitit.coercion","js/reitit.coercion.spec","js/reitit.coercion.spec.t_reitit$coercion$spec32586","reitit.coercion.spec/t_reitit$coercion$spec32586","_32588","meta32587","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","reitit.coercion.spec/->t_reitit$coercion$spec32586","_","reitit$coercion$spec$IntoSpec$into_spec$dyn","x__4428__auto__","m__4429__auto__","reitit.coercion.spec/into-spec","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","reitit.coercion.spec/IntoSpec","this","name","reitit.coercion.spec/ensure-name","?name","or__4126__auto__","cljs.core.keyword","cljs.core/name","cljs.core.gensym","goog.object/set","cljs.core/PersistentArrayMap","cljs.core.dissoc","spec_tools.data_spec.spec","cljs.core/PersistentHashMap","cljs.core/PersistentVector","spec-tools.data-spec/Maybe","spec-tools.core/Spec","spec-tools.core/create-spec","reitit.coercion.spec/stringify-pred","pred","cljs.core/seq?","cljs.core/seq","js/reitit.coercion.spec.coerce-response?","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__32597","cljs.core/MultiFn","cljs.core.symbol","reitit.coercion.spec/coerce-response?","cljs.core/identity","reitit.coercion.spec/default-options","p__32599","map__32600","cljs.core.apply","cljs.core/hash-map","reitit.coercion.spec/create","transformers","coerce-response?","opts","js/reitit.coercion.spec.t_reitit$coercion$spec32602","reitit.coercion.spec/t_reitit$coercion$spec32602","_32604","meta32603","p__32619","map__32620","reitit.coercion.spec/->t_reitit$coercion$spec32602","specification","model","options","G__32610","cljs.core/Keyword","spec_tools.openapi.core.transform","cljs.core.merge","cljs.core.ex_info","request","parameters","responses","content-types","G__32626","spec_tools.swagger.core.swagger_spec","cljs.core.into","cljs.core/empty","iter__4529__auto__","s__32628","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__32630","cljs.core/chunk-buffer","i__32629","vec__32631","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__32627","cljs.core/chunk-rest","vec__32634","cljs.core/first","cljs.core/cons","cljs.core/rest","k","response","$","clojure.set/rename-keys","cljs.core._EQ_","cljs.core/every?","cljs.core/map?","meta-merge.core/meta-merge","reitit.exception.fail_BANG_","spec","error","problems","cljs.core.update","cljs.core.comp","cljs.core/str","cljs.spec.alpha/form","cljs.core.assoc","p1__32598#","cljs.core.mapv","type","map__32605","formats","default","value","format","temp__5733__auto__","transformer","coerced","spec_tools.core.coerce","cljs.spec.alpha.valid_QMARK_","transformed","spec_tools.core.conform","cljs.spec.alpha/invalid?","spec_tools.core.explain_data","reitit.coercion/map->CoercionError","cljs.spec.alpha/unform","reitit.coercion.spec/coercion","cljs.core/chunk-first"],"sourcesContent":["(ns reitit.coercion.spec\n  (:require [clojure.set :as set]\n            [clojure.spec.alpha :as s]\n            [meta-merge.core :as mm]\n            [reitit.coercion :as coercion]\n            [reitit.exception :as ex]\n            [spec-tools.core :as st #?@(:cljs [:refer [Spec]])]\n            [spec-tools.data-spec :as ds #?@(:cljs [:refer [Maybe]])]\n            [spec-tools.openapi.core :as openapi]\n            [spec-tools.swagger.core :as swagger])\n  #?(:clj\n     (:import (spec_tools.core Spec)\n              (spec_tools.data_spec Maybe))))\n\n(def string-transformer\n  (st/type-transformer\n   st/strip-extra-keys-transformer\n   st/string-transformer))\n\n(def json-transformer\n  (st/type-transformer\n   st/strip-extra-keys-transformer\n   st/json-transformer))\n\n(def strip-extra-keys-transformer\n  st/strip-extra-keys-transformer)\n\n(def no-op-transformer\n  (reify\n    st/Transformer\n    (-name [_] ::no-op)\n    (-encoder [_ _ _])\n    (-decoder [_ _ _])))\n\n(defprotocol IntoSpec\n  (into-spec [this name]))\n\n(defn- ensure-name [?name]\n  (or ?name (keyword \"spec\" (name (gensym \"\")))))\n\n(extend-protocol IntoSpec\n\n  #?(:clj  clojure.lang.PersistentArrayMap\n     :cljs cljs.core.PersistentArrayMap)\n  (into-spec [this name]\n    (dissoc (ds/spec (ensure-name name) this) :name))\n\n  #?(:clj  clojure.lang.PersistentHashMap\n     :cljs cljs.core.PersistentHashMap)\n  (into-spec [this name]\n    (dissoc (ds/spec (ensure-name name) this) :name))\n\n  #?(:clj  clojure.lang.PersistentVector\n     :cljs cljs.core.PersistentVector)\n  (into-spec [this name]\n    (dissoc (ds/spec (ensure-name name) this) :name))\n\n  Maybe\n  (into-spec [this name]\n    (ds/spec (ensure-name name) this))\n\n  Spec\n  (into-spec [this _] this)\n\n  #?(:clj  Object\n     :cljs default)\n  (into-spec [this _]\n    (st/create-spec {:spec this}))\n\n  nil\n  (into-spec [_ _]))\n\n(defn stringify-pred [pred]\n  (str (if (seq? pred) (seq pred) pred)))\n\n(defmulti coerce-response? identity :default ::default)\n(defmethod coerce-response? ::default [_] true)\n\n(def default-options\n  {:coerce-response? coerce-response?\n   :transformers {:body {:default strip-extra-keys-transformer\n                         :formats {\"application/json\" json-transformer}}\n                  :string {:default string-transformer}\n                  :response {:default no-op-transformer}}})\n\n(defn create [{:keys [transformers coerce-response?] :as opts}]\n  ^{:type ::coercion/coercion}\n  (reify coercion/Coercion\n    (-get-name [_] :spec)\n    (-get-options [_] opts)\n    (-get-model-apidocs [_ specification model options]\n      (case specification\n        :openapi (openapi/transform model (merge opts options))\n        (throw\n         (ex-info\n          (str \"Can't produce Spec apidocs for \" specification)\n          {:type specification, :coercion :spec}))))\n    (-get-apidocs [_ specification {:keys [request parameters responses content-types]\n                                    :or {content-types [\"application/json\"]}}]\n      (case specification\n        :swagger (swagger/swagger-spec\n                  (merge\n                   (if parameters\n                     {::swagger/parameters parameters})\n                   (if responses\n                     {::swagger/responses\n                      (into\n                       (empty responses)\n                       (for [[k response] responses]\n                         [k (as-> response $\n                              (dissoc $ :content)\n                              (set/rename-keys $ {:body :schema}))]))})))\n        ;; :openapi handled in reitit.openapi/-get-apidocs-openapi\n        (throw\n         (ex-info\n          (str \"Can't produce Spec apidocs for \" specification)\n          {:specification specification, :coercion :spec}))))\n    (-compile-model [_ model name]\n      (into-spec\n       (cond\n         ;; we are safe!\n         (= (count model) 1) (first model)\n         ;; here be dragons, best effort\n         (every? map? model) (apply mm/meta-merge model)\n         ;; fail fast\n         :else (ex/fail! ::model-error {:message \"Can't merge nested clojure specs\", :spec model}))\n       name))\n    (-open-model [_ spec] spec)\n    (-encode-error [_ error]\n      (let [problems (-> error :problems ::s/problems)]\n        (-> error\n            (update :spec (comp str s/form))\n            (assoc :problems (mapv #(update % :pred stringify-pred) problems)))))\n    (-request-coercer [_ type spec]\n      (let [{:keys [formats default]} (transformers type)]\n        (fn [value format]\n          (if-let [transformer (or (get formats format) default)]\n            (let [coerced (st/coerce spec value transformer)]\n              (if (s/valid? spec coerced)\n                coerced\n                (let [transformed (st/conform spec coerced transformer)]\n                  (if (s/invalid? transformed)\n                    (let [problems (st/explain-data spec coerced transformer)]\n                      (coercion/map->CoercionError\n                       {:spec spec\n                        :problems problems}))\n                    (s/unform spec transformed)))))\n            value))))\n    (-response-coercer [this spec]\n      (if (coerce-response? spec)\n        (coercion/-request-coercer this :response spec)))))\n\n(def coercion (create default-options))\n"]}