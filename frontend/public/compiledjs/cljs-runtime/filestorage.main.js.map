{"version":3,"sources":["filestorage/main.cljs"],"mappings":"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","names":["p__38016","map__38017","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","filestorage.main/redirect!","to","path-params","query-params","push","reitit.frontend.easy.push_state","reitit.frontend.easy.replace_state","filestorage.main/Redirect","props","reagent.core/create-class","this","reagent.core/props","p__38019","vec__38020","cljs.core.nth","_","prev-props","cljs.core.not_EQ_","filestorage.main/password-box","pw","s","reagent.core.atom","p1__38023#","cljs.core/deref","cljs.core.pr_str","cljs.core.swap_BANG_","cljs.core/assoc","filestorage.main/header","filestorage.main/check-nil-then-predicate","value","predicate","filestorage.main/valid-email?","email","arg","cljs.core/boolean","cljs.core/first","cljs.core/re-seq","filestorage.main/eight-or-more-characters?","word","cljs.core/count","filestorage.main/has-special-character?","filestorage.main/has-number?","filestorage.main/valid-password?","password","and__4115__auto__","filestorage.main/prompt-message","message","p1__38024#","filestorage.main/input-element","id","name","type","in-focus","cljs.core/reset!","cljs.core/not","filestorage.main/input-and-prompt","label-value","input-name","input-type","input-element-arg","prompt-element","required?","input-focus","filestorage.main/email-form","email-address-atom","filestorage.main/name-form","name-atom","filestorage.main/password-requirements","requirements","cljs.core.filter","req","G__38026","fexpr__38025","cljs.core.doall","cljs.core.map","filestorage.main/password-form","password-type-atom","filestorage.main/password-form-noval","filestorage.main/wrap-as-element-in-form","element","filestorage.main/submit-registration","email-address","errors","e","js/console.log","data","ajax.core.POST","r","filestorage.db/app-state","cljs.core/contains?","filestorage.main/registration-form","filestorage.main/submit-login","filestorage.main/login-form","filestorage.main/home"],"sourcesContent":["(ns filestorage.main\n  (:require [reagent.core :as r]\n            [re-frame.core :as rf]\n            [reitit.frontend.easy :as rfe]\n            [accountant.core :as accountant]\n            [ajax.core :refer [GET POST]]\n            [filestorage.db :as db]))\n\n(defn redirect!\n  \"If `push` is truthy, previous page will be left in history.\"\n  [{:keys [to path-params query-params push]}]\n  (if push\n    (rfe/push-state to path-params query-params)\n    (rfe/replace-state to path-params query-params)))\n\n(defn Redirect\n  \"Component that only causes a redirect side-effect.\"\n  [props]\n  (r/create-class\n   {:component-did-mount  (fn [this] (redirect! (r/props this)))\n    :component-did-update (fn [this [_ prev-props]]\n                            (if (not= (r/props this) prev-props)\n                              (redirect! (r/props this))))\n    :render (fn [this] nil)}))\n\n(defn password-box [pw]\n  (let [s (r/atom {:value pw})]\n    (fn []\n      [:form\n       (pr-str @s) [:br]\n\n       [:input {:type :password\n                :value (:value @s)\n                :on-change #(swap! s assoc :value (-> % .-target .-value))}] [:br]])))\n\n(defn header []\n  [:div\n   [:h1 {:style {:margin \"0 0 0 0\"}} \"pleroma|net\"]\n   ;;[password-box \"\"]\n   ])\n(defn check-nil-then-predicate\n  \"Check if the value is nil, then apply the predicate\"\n  [value predicate]\n  (if (nil? value)\n    false\n    (predicate value)))\n\n(defn valid-email?\n  [email]\n  (check-nil-then-predicate email (fn [arg] (boolean (first (re-seq #\"\\w+@\\w+.\\w+\" arg))))))\n\n(defn eight-or-more-characters?\n  [word]\n  (check-nil-then-predicate word (fn [arg] (> (count arg) 7))))\n\n(defn has-special-character?\n  [word]\n  (check-nil-then-predicate word (fn [arg] (boolean (first (re-seq #\"\\W+\" arg))))))\n\n(defn has-number?\n  [word]\n  (check-nil-then-predicate word (fn [arg] (boolean (re-seq #\"\\d+\" arg)))))\n\n(defn valid-password?\n  [password]\n  (and (eight-or-more-characters? password) (has-special-character? password) (has-number? password)))\n\n(defn prompt-message\n  \"A prompt that will animate to help the user with a given input\"\n  [message]\n  [:div {:class \"my-messages\"}\n   ;;[:div {:class \"prompt message-animation\"} [:p message]]\n   ])\n(defn input-element\n  \"An input element which updates its value and on focus parameters on change, blur, and focus\"\n  [id name type value in-focus]\n  [:input {:id id\n           :name name\n           :class \"form-control\"\n           :type type\n           :required \"\"\n           :value @value\n           :on-change #(reset! value (-> % .-target .-value))\n           :on-focus #(swap! in-focus not)\n           :on-blur (fn [arg] (if (nil? @value) (reset! value \"\")) (swap! in-focus not))}])\n\n(defn input-and-prompt\n  \"Creates an input box and a prompt box that appears above the input when the input comes into focus. Also throws in a little required message\"\n  [label-value input-name input-type input-element-arg prompt-element required?]\n  (let [input-focus (r/atom false)]\n    (fn []\n      [:div\n       [:label label-value]\n       (if @input-focus prompt-element [:div])\n       [input-element input-name input-name input-type input-element-arg input-focus]\n       ;;(if (and required? (= \"\" @input-element-arg))\n       ;;  [:div \"Field is required!\"]\n       ;;  [:div])\n       ])))\n(defn email-form [email-address-atom]\n  (input-and-prompt \"email\"\n                    \"email\"\n                    \"email\"\n                    email-address-atom\n                    (prompt-message \"What's your email address?\")\n                    true))\n\n(defn name-form [name-atom]\n  (input-and-prompt \"name\"\n                    \"name\"\n                    \"text\"\n                    name-atom\n                    (prompt-message \"What's your name?\")\n                    true))\n\n(defn password-requirements\n  \"A list to describe which password requirements have been met so far\"\n  [password requirements]\n  [:div\n   [:ul (->> requirements\n             (filter (fn [req] (not ((:check-fn req) @password))))\n             (doall)\n             (map (fn [req] ^{:key req} [:li {:style {:color \"red\"}} (:message req)])))]])\n\n(defn password-form\n  [password]\n  (let [password-type-atom (r/atom \"password\")]\n    (fn []\n      [:div\n       [(input-and-prompt \"password\"\n                          \"password\"\n                          @password-type-atom\n                          password\n                          (prompt-message \"What's your password\")\n                          true)]\n       [password-requirements password [{:message \"8 or more characters\" :check-fn eight-or-more-characters?}\n                                        {:message \"At least one special character\" :check-fn has-special-character?}\n                                        {:message \"At least one number\" :check-fn has-number?}]]])))\n\n(defn password-form-noval\n  [password]\n  (let [password-type-atom (r/atom \"password\")]\n    (fn []\n      [:div\n       [(input-and-prompt \"password\"\n                          \"password\"\n                          @password-type-atom\n                          password\n                          (prompt-message \"What's your password\")\n                          true)]])))\n\n(defn wrap-as-element-in-form\n  [element]\n  [:div {:class \"row form-group\"}\n   element])\n\n(defn submit-registration\n  [email-address name password errors e]\n\n  (js/console.log \"submitting registration\")\n  ;;(js/console.log email-address)\n  ;;(js/console.log name)\n  ;;(js/console.log password)\n\n  (if (valid-email? email-address)\n    (if (valid-password? password)\n      (do\n        (reset! errors \"\")\n        (let [data {:name name :email email-address :password password}]\n          (POST \"http://localhost:5050/api/register\"\n            {:format :json\n             :params data\n             :handler (fn [r] (js/console.log r\n                                              (swap! db/app-state assoc :user r)\n                                              (rfe/push-state :filestorage.core/home-page)\n                                              ))\n             :error-handler (fn [r] (js/console.log r\n                                                    (if (contains? r :status-text)\n                                                      (reset! errors (get r :status-text)))))})))\n\n      (reset! errors \"password is invalid\"))\n    (reset! errors \"email is invalid\"))\n  (.preventDefault e))\n\n(defn registration-form []\n  (let [email-address (r/atom nil)\n        name (r/atom nil)\n        password (r/atom nil)\n        errors (r/atom \"\")]\n    (fn []\n      [:div {:class \"signup-wrapper\"}\n\n       [:h2 \"Register User\"]\n       [:div {:id \"errors\" :style {:color \"red\"}}\n        @errors]\n       [:br]\n       [:form {:on-submit (fn [e] (submit-registration @email-address @name @password errors e))}\n        (wrap-as-element-in-form [email-form email-address])\n        [:br]\n        (wrap-as-element-in-form [name-form name])\n        [:br]\n        (wrap-as-element-in-form [password-form password])\n        [:button {:id \"submit-registration\"\n                  :type \"submit\"\n                  ;;:on-click #(submit-registration @email-address @name @password errors)\n                  }\"Submit\"]]])))\n\n(defn submit-login\n  [email-address password errors e]\n\n  (js/console.log \"submitting login\")\n  ;;(js/console.log email-address)\n  ;;(js/console.log name)\n  ;;(js/console.log password)\n\n  (let [data {:email email-address :password password}]\n    (POST \"http://localhost:5050/api/login\"\n      {:format :json\n       :params data\n       :handler (fn [r] (js/console.log r))\n       :error-handler (fn [r] (js/console.log r\n                                              (if (contains? r :status-text)\n                                                (reset! errors (get r :status-text)))))}))\n  (.preventDefault e))\n\n(defn login-form []\n  (let [email-address (r/atom nil)\n        password (r/atom nil)\n        errors (r/atom nil)]\n    (fn []\n      [:div {:class \"login-wrapper\"}\n       [:h2 \"Login User\"]\n       [:div {:id \"errors\" :style {:color \"red\"}}\n        @errors]\n       [:br]\n       [:form {:on-submit (fn [e] (submit-login @email-address @password errors e))}\n        (wrap-as-element-in-form [email-form email-address])\n        [:br]\n        (wrap-as-element-in-form [password-form-noval password])\n        [:br] [:br]\n        [:button {:id \"submit-registration\"\n                  :type \"submit\"\n                  ;;:on-click #(submit-registration @email-address @name @password errors)\n                  }\"Submit\"]]])))\n\n(defn home []\n  (if (not (contains? @db/app-state :user))\n    (js/console.log \"not logged in\")\n    (js/console.log \"logged in\"))\n  [:h2 \"home\"])\n\n"]}