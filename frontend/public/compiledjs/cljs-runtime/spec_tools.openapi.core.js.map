{"version":3,"sources":["spec_tools/openapi/core.cljc"],"mappings":"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","names":["spec-tools.openapi.core/spec-dispatch","dispatch","_","js/spec-tools","js/spec-tools.openapi","js/spec-tools.openapi.core","js/spec-tools.openapi.core.accept-spec","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__32478","cljs.core/MultiFn","cljs.core.symbol","spec-tools.openapi.core/accept-spec","children","spec","options","vec__32486","cljs.core.nth","data","spec-tools.impl/extract-form","openapi-meta","spec-tools.impl/unlift-keys","or__4126__auto__","cljs.core.merge","spec-tools.json-schema/accept-spec","var_args","G__32490","spec-tools.openapi.core/transform","js/Error","spec_tools.openapi.core.transform","spec_tools.visitor.visit","spec-tools.openapi.core/is-nilable?","cljs.core/contains?","cljs.core._EQ_","cljs.core/count","cljs.core/group-by","spec-tools.openapi.core/extract-nilable","p1__32492#","cljs.core.remove","cljs.core/first","spec-tools.openapi.core/extract-single-param","in","nilable?","new-spec","G__32493","cljs.core/Keyword","p__32497","map__32498","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","spec-tools.openapi.core/extract-object-param","properties","required","cljs.core.mapv","p__32503","vec__32504","map__32507","k","description","schema","cljs.core/name","G__32511","cljs.core/set","spec-tools.openapi.core/extract-parameter","parameter-spec","object?","cljs.core/PersistentVector","js/spec-tools.openapi.core.expand","fexpr__32513","spec-tools.openapi.core/expand","v","acc","cljs.core.into","iter__4529__auto__","s__32517","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__32519","cljs.core/chunk-buffer","i__32518","vec__32526","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__32516","cljs.core/chunk-rest","vec__32529","cljs.core/cons","cljs.core/rest","name","s__32534","b__32536","i__32535","vec__32542","iter__32533","vec__32548","content-type","old","new","cljs.core.mapcat","p__32554","vec__32555","merged","cljs.core/reverse","cljs.core.reduce","p__32558","vec__32559","ps","cache","p","c","cljs.core/select-keys","cljs.core/not","cljs.core.conj","cljs.core/vec","s__32567","b__32569","i__32568","vec__32575","iter__32566","vec__32578","cljs.core.dissoc","spec-tools.openapi.core/expand-qualified-keywords","x","accept?","cljs.core/keys","cljs.core/methods","clojure.walk/postwalk","cljs.core/map?","cljs.core/reduce-kv","G__32584","spec-tools.openapi.core/openapi-spec","spec_tools.openapi.core.openapi_spec","cljs.core/chunk-first"],"sourcesContent":["(ns spec-tools.openapi.core\n  (:require [clojure.walk :as walk]\n            [spec-tools.impl :as impl]\n            [spec-tools.json-schema :as json-schema]\n            [spec-tools.visitor :as visitor]))\n\n(defn- spec-dispatch [dispatch _ _ _] dispatch)\n\n(defmulti accept-spec spec-dispatch :default ::default)\n\n(defmethod accept-spec 'clojure.core/float? [_ _ _ _]\n  {:type \"number\" :format \"float\"})\n\n(defmethod accept-spec 'clojure.core/double? [_ _ _ _]\n  {:type \"number\" :format \"double\"})\n\n(defmethod accept-spec 'clojure.spec.alpha/tuple [_ _ children _]\n  {:type  \"array\"\n   :items {:anyOf children}})\n\n(defmethod accept-spec 'clojure.core/sequential? [_ _ _ _]\n  {:type  \"array\"\n   :items {}})\n\n(defmethod accept-spec 'clojure.spec.alpha/alt [_ _ children _]\n  {:type  \"array\"\n   :items {:oneOf children}})\n\n(defmethod accept-spec ::visitor/set [_ _ children _]\n  {:enum children :type \"string\"})\n\n(defmethod accept-spec ::visitor/spec [dispatch spec children options]\n  (let [[_ data]     (impl/extract-form spec)\n        openapi-meta (impl/unlift-keys data \"openapi\")]\n    (or (:openapi data)\n        (merge (json-schema/accept-spec dispatch spec children options)\n               openapi-meta))))\n\n(defmethod accept-spec ::default [dispatch spec children options]\n  (json-schema/accept-spec dispatch spec children options))\n\n(defn transform\n  \"Generate OpenAPI3 schema matching the given clojure.spec spec.\"\n  ([spec]\n   (transform spec nil))\n  ([spec options]\n   (visitor/visit spec accept-spec options)))\n\n;;\n;; Extract OpenAPI3 parameters\n;;\n(defn- is-nilable?\n  [spec]\n  (and (contains? spec :oneOf)\n       (= 2 (count (:oneOf spec)))\n       (-> :type\n           (group-by (:oneOf spec))\n           (contains? \"null\"))))\n\n(defn- extract-nilable\n  [spec]\n  (->> (:oneOf spec)\n       (remove #(= (:type %) \"null\"))\n       first))\n\n(defn- extract-single-param\n  [in spec]\n  (let [nilable? (is-nilable? spec)\n        new-spec (if nilable?\n                   (extract-nilable spec)\n                   spec)]\n    {:name        (or (:title new-spec) (:type new-spec))\n     :in          in\n     :description (or (:description new-spec) \"\")\n     :required    (case in\n                    :path true\n                    (not nilable?))\n     :schema      new-spec}))\n\n(defn- extract-object-param\n  [in {:keys [properties required]}]\n  (mapv\n   (fn [[k {:keys [description] :as schema}]]\n     {:name        k\n      :in          (name in)\n      :description (or description \"\")\n      :required    (case in\n                     :path true\n                     (contains? (set required) k))\n      :schema      schema})\n   properties))\n\n(defn extract-parameter\n  [in spec]\n  (let [parameter-spec (transform spec)\n        object?        (and (contains? parameter-spec :properties)\n                            (= \"object\" (:type parameter-spec)))]\n    (if object?\n      (extract-object-param in parameter-spec)\n      (-> (extract-single-param in parameter-spec) vector))))\n\n;;\n;; Expand the spec\n;;\n\n(defmulti expand (fn [k _ _ _] k))\n\n(defmethod expand ::schemas [_ v acc _]\n  {:schemas\n   (into\n    (or (:schemas acc) {})\n    (for [[name schema] v]\n      {name (transform schema)}))})\n\n;; FIXME: Validate content-type value?\n(defmethod expand ::content [_ v acc _]\n  {:content\n   (into\n    (or (:content acc) {})\n    (for [[content-type schema] v]\n      {content-type {:schema (transform schema)}}))})\n\n(defmethod expand ::parameters [_ v acc _]\n  (let [old    (or (:parameters acc) [])\n        new    (mapcat (fn [[in spec]] (extract-parameter in spec)) v)\n        merged (->> (into old new)\n                    (reverse)\n                    (reduce\n                     (fn [[ps cache :as acc] p]\n                       (let [c (select-keys p [:in :name])]\n                         (if-not (cache c)\n                           [(conj ps p) (conj cache c)]\n                           acc)))\n                     [[] #{}])\n                    (first)\n                    (reverse)\n                    (vec))]\n    {:parameters merged}))\n\n(defmethod expand ::headers [_ v acc _]\n  {:headers\n   (into\n    (or (:headers acc) {})\n    (for [[name spec] v]\n      {name (-> (extract-single-param :header (transform spec))\n                (dissoc :in)\n                (dissoc :name))}))})\n\n(defn expand-qualified-keywords\n  [x options]\n  (let [accept? (set (keys (methods expand)))]\n    (walk/postwalk\n     (fn [x]\n       (if (map? x)\n         (reduce-kv\n          (fn [acc k v]\n            (if (accept? k)\n              (-> acc (dissoc k) (merge (expand k v acc options)))\n              acc))\n          x\n          x)\n         x))\n     x)))\n\n;;\n;; Generate the OpenAPI3 spec\n;;\n\n(defn openapi-spec\n  \"Transforms data into a OpenAPI3 spec. Input data must conform to the\n  Swagger3 Spec (https://swagger.io/specification/) with a exception that it\n  can have any qualified keywords which are expanded with the\n  `spec-tools.openapi.core/expand` multimethod.\"\n  ([x]\n   (openapi-spec x nil))\n  ([x options]\n   (expand-qualified-keywords x options)))\n"]}