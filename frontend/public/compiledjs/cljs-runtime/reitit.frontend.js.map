{"version":3,"sources":["reitit/frontend.cljs"],"mappings":"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","names":["reitit.frontend/query-param","q","k","vs","cljs.core/vec","reitit.frontend/query-params","uri","cljs.core.map","p1__29362#","cljs.core.juxt","cljs.core/keyword","cljs.core.into","reitit.frontend/set-query-params","path","new-query-or-update-fn","goog.Uri/parse","new-query","cljs.core/fn?","G__29364","goog.Uri.QueryData/createFromMap","cljs.core/clj->js","reitit.frontend/match->path","match","query-params","fragment","temp__5735__auto__","reitit.core.match__GT_path","G__29366","and__4115__auto__","cljs.core/seq","reitit.impl/form-encode","var_args","G__29369","reitit.frontend/match-by-path","js/Error","p__29371","map__29373","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","router","reitit.frontend.match_by_path","on-coercion-error","js/goog.Uri","coerce!","e29376","reitit.coercion/coerce!","e","temp__5733__auto__","reitit.core/match-by-path","cljs.core.assoc","parameters","or__4126__auto__","G__29378","reitit.frontend/match-by-name","name","reitit.frontend.match_by_name","path-params","reitit.core/match-by-name","G__29383","reitit.frontend/router","raw-routes","reitit.frontend.router","opts","reitit.core.router","cljs.core.merge","reitit.coercion/compile-request-coercers","G__29387","reitit.frontend/match-by-name!","reitit.frontend.match_by_name_BANG_","reitit.core/partial-match?","p1__29385#","cljs.core/every?","cljs.core/contains?","defined","cljs.core/keys","cljs.core/set","missing","clojure.set.difference","js/console.warn"],"sourcesContent":["(ns reitit.frontend\n  (:require [clojure.set :as set]\n            [reitit.coercion :as coercion]\n            [reitit.core :as r]\n            [reitit.impl :as impl]\n            goog.Uri\n            goog.Uri.QueryData))\n\n(defn- query-param [^goog.uri.QueryData q k]\n  (let [vs (.getValues q k)]\n    (if (< (alength vs) 2)\n      (aget vs 0)\n      (vec vs))))\n\n(defn query-params\n  \"Given goog.Uri, read query parameters into a Clojure map.\"\n  [^goog.Uri uri]\n  (let [q (.getQueryData uri)]\n    (->> q\n         (.getKeys)\n         (map (juxt keyword #(query-param q %)))\n         (into {}))))\n\n(defn set-query-params\n  \"Given Reitit-frontend path, update the query params\n  with given function and arguments.\n\n  Note: coercion is not applied to the query params\"\n  [path new-query-or-update-fn]\n  (let [^goog.Uri uri (goog.Uri/parse path)\n        new-query (if (fn? new-query-or-update-fn)\n                    (new-query-or-update-fn (query-params uri))\n                    new-query-or-update-fn)]\n    ;; NOTE: Differences to reitit.impl/query-string?\n    ;; reitit fn adds \"=\" even if value is empty string\n    ;; reitit encodes \" \" as \"+\" while browser and goog.Uri encode as \"%20\"\n    (.setQueryData uri (goog.Uri.QueryData/createFromMap (clj->js new-query)))\n    (.toString uri)))\n\n(defn\n  ^{:see-also [\"reitit.core/match->path\"]}\n  match->path\n  \"Create routing path from given match and optional query-string map and\n  optional fragment string.\"\n  [match query-params fragment]\n  (when-let [path (r/match->path match query-params)]\n    (cond-> path\n      (and fragment (seq fragment)) (str \"#\" (impl/form-encode fragment)))))\n\n(defn match-by-path\n  \"Given routing tree and current path, return match with possibly\n  coerced parameters. Return nil if no match found.\n\n  :on-coercion-error - a sideeffecting fn of `match exception -> nil`\"\n  ([router path] (match-by-path router path nil))\n  ([router path {:keys [on-coercion-error]}]\n   (let [uri (.parse goog.Uri path)\n         coerce! (if on-coercion-error\n                   (fn [match]\n                     (try (coercion/coerce! match)\n                          (catch js/Error e\n                            (on-coercion-error match e)\n                            (throw e))))\n                   coercion/coerce!)]\n     (if-let [match (r/match-by-path router (.getPath uri))]\n       (let [q (query-params uri)\n             fragment (when (.hasFragment uri)\n                        (.getFragment uri))\n             match (assoc match\n                     :query-params q\n                     :fragment fragment)\n             ;; Return uncoerced values if coercion is not enabled - so\n             ;; that tha parameters are always accessible from same property.\n             parameters (or (coerce! match)\n                            {:path (:path-params match)\n                             :query q\n                             :fragment fragment})]\n         (assoc match :parameters parameters))))))\n\n(defn match-by-name\n  \"Given a router, route name and optionally path-parameters,\n  will return a Match (exact match), PartialMatch (missing path-parameters)\n  or `nil` (no match).\"\n  ([router name]\n   (match-by-name router name {}))\n  ([router name path-params]\n   (r/match-by-name router name path-params)))\n\n(defn router\n  \"Create a `reitit.core.router` from raw route data and optionally an options map.\n  Enables request coercion. See [[reitit.core/router]] for details on options.\"\n  ([raw-routes]\n   (router raw-routes {}))\n  ([raw-routes opts]\n   (r/router raw-routes (merge {:compile coercion/compile-request-coercers} opts))))\n\n(defn match-by-name!\n  \"Logs problems using console.warn\"\n  ([router name]\n   (match-by-name! router name {}))\n  ([router name path-params]\n   (if-let [match (match-by-name router name path-params)]\n     (if (r/partial-match? match)\n       (if (every? #(contains? path-params %) (:required match))\n         match\n         (let [defined (-> path-params keys set)\n               missing (set/difference (:required match) defined)]\n           (js/console.warn\n            \"missing path-params for route\" name\n            {:template (:template match)\n             :missing missing\n             :path-params path-params\n             :required (:required match)})\n           nil))\n       match)\n     (do (js/console.warn \"missing route\" name)\n         nil))))\n"]}