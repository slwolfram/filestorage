["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/omit.js"],"~:js","shadow$provide.module$node_modules$lodash$omit=function(global,require,module,exports){var arrayMap=require(\"module$node_modules$lodash$_arrayMap\"),baseClone=require(\"module$node_modules$lodash$_baseClone\"),baseUnset=require(\"module$node_modules$lodash$_baseUnset\"),castPath=require(\"module$node_modules$lodash$_castPath\"),copyObject=require(\"module$node_modules$lodash$_copyObject\"),customOmitClone=require(\"module$node_modules$lodash$_customOmitClone\");global=require(\"module$node_modules$lodash$_flatRest\");\nvar getAllKeysIn=require(\"module$node_modules$lodash$_getAllKeysIn\");require=global(function(object,paths){var result={};if(null==object)return result;var isDeep=!1;paths=arrayMap(paths,function(path){path=castPath(path,object);isDeep||(isDeep=1<path.length);return path});copyObject(object,getAllKeysIn(object),result);isDeep&&(result=baseClone(result,7,customOmitClone));for(var length=paths.length;length--;)baseUnset(result,paths[length]);return result});module.exports=require}","~:source","shadow$provide[\"module$node_modules$lodash$omit\"] = function(global,require,module,exports) {\nvar arrayMap = require('./_arrayMap'),\n    baseClone = require('./_baseClone'),\n    baseUnset = require('./_baseUnset'),\n    castPath = require('./_castPath'),\n    copyObject = require('./_copyObject'),\n    customOmitClone = require('./_customOmitClone'),\n    flatRest = require('./_flatRest'),\n    getAllKeysIn = require('./_getAllKeysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function(object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function(path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\n\nmodule.exports = omit;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$_customOmitClone","~$module$node_modules$lodash$_flatRest","~$module$node_modules$lodash$_getAllKeysIn","~$shadow.js","~$module$node_modules$lodash$_baseClone","~$module$node_modules$lodash$_copyObject","~$module$node_modules$lodash$_baseUnset","~$module$node_modules$lodash$_arrayMap","~$module$node_modules$lodash$_castPath"]],"~:properties",["^5",[]],"~:compiled-at",1701272802813,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$omit.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,+BAAA,CAAoD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IACxFC,SAAWH,OAAA,CAAQ,sCAAR,CAD6E,CAExFI,UAAYJ,OAAA,CAAQ,uCAAR,CAF4E,CAGxFK,UAAYL,OAAA,CAAQ,uCAAR,CAH4E,CAIxFM,SAAWN,OAAA,CAAQ,sCAAR,CAJ6E,CAKxFO,WAAaP,OAAA,CAAQ,wCAAR,CAL2E,CAMxFQ,gBAAkBR,OAAA,CAAQ,6CAAR,CAClBS,OAAAA,CAAWT,OAAA,CAAQ,sCAAR,CANf;IAOIU,aAAeV,OAAA,CAAQ,0CAAR,CA2BfW,QAAAA,CAAOF,MAAA,CAAS,QAAQ,CAACG,MAAD,CAASC,KAAT,CAAgB,CAC1C,IAAIC,OAAS,EACb,IAAc,IAAd,EAAIF,MAAJ,CACE,MAAOE,OAET,KAAIC,OAAS,CAAA,CACbF,MAAA,CAAQV,QAAA,CAASU,KAAT,CAAgB,QAAQ,CAACG,IAAD,CAAO,CACrCA,IAAA,CAAOV,QAAA,CAASU,IAAT,CAAeJ,MAAf,CACPG,OAAA,GAAWA,MAAX,CAAkC,CAAlC,CAAoBC,IAAKC,CAAAA,MAAzB,CACA,OAAOD,KAH8B,CAA/B,CAKRT,WAAA,CAAWK,MAAX,CAAmBF,YAAA,CAAaE,MAAb,CAAnB,CAAyCE,MAAzC,CACIC,OAAJ,GACED,MADF,CACWV,SAAA,CAAUU,MAAV,CAAkB,CAAlB,CAA0EN,eAA1E,CADX,CAIA,KADA,IAAIS,OAASJ,KAAMI,CAAAA,MACnB,CAAOA,MAAA,EAAP,CAAA,CACEZ,SAAA,CAAUS,MAAV,CAAkBD,KAAA,CAAMI,MAAN,CAAlB,CAEF,OAAOH,OAnBmC,CAAjC,CAsBXb,OAAOC,CAAAA,OAAP,CAAiBS,OAzD2E;\",\n\"sources\":[\"node_modules/lodash/omit.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$omit\\\"] = function(global,require,module,exports) {\\nvar arrayMap = require('./_arrayMap'),\\n    baseClone = require('./_baseClone'),\\n    baseUnset = require('./_baseUnset'),\\n    castPath = require('./_castPath'),\\n    copyObject = require('./_copyObject'),\\n    customOmitClone = require('./_customOmitClone'),\\n    flatRest = require('./_flatRest'),\\n    getAllKeysIn = require('./_getAllKeysIn');\\n\\n/** Used to compose bitmasks for cloning. */\\nvar CLONE_DEEP_FLAG = 1,\\n    CLONE_FLAT_FLAG = 2,\\n    CLONE_SYMBOLS_FLAG = 4;\\n\\n/**\\n * The opposite of `_.pick`; this method creates an object composed of the\\n * own and inherited enumerable property paths of `object` that are not omitted.\\n *\\n * **Note:** This method is considerably slower than `_.pick`.\\n *\\n * @static\\n * @since 0.1.0\\n * @memberOf _\\n * @category Object\\n * @param {Object} object The source object.\\n * @param {...(string|string[])} [paths] The property paths to omit.\\n * @returns {Object} Returns the new object.\\n * @example\\n *\\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\\n *\\n * _.omit(object, ['a', 'c']);\\n * // => { 'b': '2' }\\n */\\nvar omit = flatRest(function(object, paths) {\\n  var result = {};\\n  if (object == null) {\\n    return result;\\n  }\\n  var isDeep = false;\\n  paths = arrayMap(paths, function(path) {\\n    path = castPath(path, object);\\n    isDeep || (isDeep = path.length > 1);\\n    return path;\\n  });\\n  copyObject(object, getAllKeysIn(object), result);\\n  if (isDeep) {\\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\\n  }\\n  var length = paths.length;\\n  while (length--) {\\n    baseUnset(result, paths[length]);\\n  }\\n  return result;\\n});\\n\\nmodule.exports = omit;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"arrayMap\",\"baseClone\",\"baseUnset\",\"castPath\",\"copyObject\",\"customOmitClone\",\"flatRest\",\"getAllKeysIn\",\"omit\",\"object\",\"paths\",\"result\",\"isDeep\",\"path\",\"length\"]\n}\n"]