["^ ","~:output",["^ ","~:js","goog.provide('clojure.core.rrb_vector.nodes');\nclojure.core.rrb_vector.nodes.empty_node = cljs.core.PersistentVector.EMPTY_NODE;\nclojure.core.rrb_vector.nodes.clone = (function clojure$core$rrb_vector$nodes$clone(shift,node){\nreturn (new cljs.core.VectorNode(node.edit,cljs.core.aclone(node.arr)));\n});\nclojure.core.rrb_vector.nodes.regular_QMARK_ = (function clojure$core$rrb_vector$nodes$regular_QMARK_(node){\nreturn (!((node.arr.length === (33))));\n});\nclojure.core.rrb_vector.nodes.node_ranges = (function clojure$core$rrb_vector$nodes$node_ranges(node){\nreturn (node.arr[(32)]);\n});\nclojure.core.rrb_vector.nodes.last_range = (function clojure$core$rrb_vector$nodes$last_range(node){\nvar rngs = clojure.core.rrb_vector.nodes.node_ranges(node);\nvar i = ((rngs[(32)]) - (1));\nreturn (rngs[i]);\n});\nclojure.core.rrb_vector.nodes.regular_ranges = (function clojure$core$rrb_vector$nodes$regular_ranges(shift,cnt){\nvar step = ((1) << shift);\nvar rngs = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar i = (0);\nvar r = step;\nwhile(true){\nif((r < cnt)){\n(rngs[i] = r);\n\nvar G__32069 = (i + (1));\nvar G__32070 = (r + step);\ni = G__32069;\nr = G__32070;\ncontinue;\n} else {\n(rngs[i] = cnt);\n\n(rngs[(32)] = (i + (1)));\n\nreturn rngs;\n}\nbreak;\n}\n});\nclojure.core.rrb_vector.nodes.overflow_QMARK_ = (function clojure$core$rrb_vector$nodes$overflow_QMARK_(root,shift,cnt){\nwhile(true){\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(root)){\nreturn ((cnt >> (5)) > ((1) << shift));\n} else {\nvar rngs = clojure.core.rrb_vector.nodes.node_ranges(root);\nvar slc = (rngs[(32)]);\nvar and__5043__auto__ = (slc === (32));\nif(and__5043__auto__){\nvar or__5045__auto__ = (shift === (5));\nif(or__5045__auto__){\nreturn or__5045__auto__;\n} else {\nvar G__32071 = (root.arr[(slc - (1))]);\nvar G__32072 = (shift - (5));\nvar G__32073 = (((rngs[(31)]) - (rngs[(30)])) + (32));\nroot = G__32071;\nshift = G__32072;\ncnt = G__32073;\ncontinue;\n}\n} else {\nreturn and__5043__auto__;\n}\n}\nbreak;\n}\n});\nclojure.core.rrb_vector.nodes.index_of_0 = (function clojure$core$rrb_vector$nodes$index_of_0(arr){\nvar l = (0);\nvar h = (31);\nwhile(true){\nif((l >= (h - (1)))){\nif((((arr[l]) | (0)) === (0))){\nreturn l;\n} else {\nif((((arr[h]) | (0)) === (0))){\nreturn h;\n} else {\nreturn (32);\n}\n}\n} else {\nvar mid = (l + ((h - l) >> (1)));\nif((((arr[mid]) | (0)) === (0))){\nvar G__32074 = l;\nvar G__32075 = mid;\nl = G__32074;\nh = G__32075;\ncontinue;\n} else {\nvar G__32076 = (mid + (1));\nvar G__32077 = h;\nl = G__32076;\nh = G__32077;\ncontinue;\n}\n}\nbreak;\n}\n});\nclojure.core.rrb_vector.nodes.index_of_nil = (function clojure$core$rrb_vector$nodes$index_of_nil(arr){\nvar l = (0);\nvar h = (31);\nwhile(true){\nif((l >= (h - (1)))){\nif(((arr[l]) == null)){\nreturn l;\n} else {\nif(((arr[h]) == null)){\nreturn h;\n} else {\nreturn (32);\n}\n}\n} else {\nvar mid = (l + ((h - l) >> (1)));\nif(((arr[mid]) == null)){\nvar G__32078 = l;\nvar G__32079 = mid;\nl = G__32078;\nh = G__32079;\ncontinue;\n} else {\nvar G__32080 = (mid + (1));\nvar G__32081 = h;\nl = G__32080;\nh = G__32081;\ncontinue;\n}\n}\nbreak;\n}\n});\nclojure.core.rrb_vector.nodes.first_child = (function clojure$core$rrb_vector$nodes$first_child(node){\nreturn (node.arr[(0)]);\n});\nclojure.core.rrb_vector.nodes.last_child = (function clojure$core$rrb_vector$nodes$last_child(node){\nvar arr = node.arr;\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(node)){\nreturn (arr[(clojure.core.rrb_vector.nodes.index_of_nil(arr) - (1))]);\n} else {\nreturn (arr[((clojure.core.rrb_vector.nodes.node_ranges(node)[(32)]) - (1))]);\n}\n});\nclojure.core.rrb_vector.nodes.remove_leftmost_child = (function clojure$core$rrb_vector$nodes$remove_leftmost_child(shift,parent){\nvar arr = parent.arr;\nif(((arr[(1)]) == null)){\nreturn null;\n} else {\nvar r_QMARK_ = clojure.core.rrb_vector.nodes.regular_QMARK_(parent);\nvar new_arr = (new Array(((r_QMARK_)?(32):(33))));\ncljs.core.array_copy(arr,(1),new_arr,(0),(31));\n\nif((!(r_QMARK_))){\nvar rngs_32082 = clojure.core.rrb_vector.nodes.node_ranges(parent);\nvar rng0_32083 = (rngs_32082[(0)]);\nvar new_rngs_32084 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar lim_32085 = (rngs_32082[(32)]);\ncljs.core.array_copy(rngs_32082,(1),new_rngs_32084,(0),(lim_32085 - (1)));\n\nvar i_32086 = (0);\nwhile(true){\nif((i_32086 < lim_32085)){\n(new_rngs_32084[i_32086] = ((new_rngs_32084[i_32086]) - rng0_32083));\n\nvar G__32087 = (i_32086 + (1));\ni_32086 = G__32087;\ncontinue;\n} else {\n}\nbreak;\n}\n\n(new_rngs_32084[(32)] = ((rngs_32082[(32)]) - (1)));\n\n(new_rngs_32084[((rngs_32082[(32)]) - (1))] = (0));\n\n(new_arr[(32)] = new_rngs_32084);\n} else {\n}\n\nreturn cljs.core.__GT_VectorNode(parent.edit,new_arr);\n}\n});\nclojure.core.rrb_vector.nodes.replace_leftmost_child = (function clojure$core$rrb_vector$nodes$replace_leftmost_child(shift,parent,pcnt,child,d){\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(parent)){\nvar step = ((1) << shift);\nvar rng0 = (step - d);\nvar ncnt = (pcnt - d);\nvar li = ((shift >> (pcnt - (1))) & (31));\nvar arr = parent.arr;\nvar new_arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_rngs = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(new_arr[(0)] = child);\n\ncljs.core.array_copy(arr,(1),new_arr,(1),li);\n\n(new_arr[(32)] = new_rngs);\n\n(new_rngs[(0)] = rng0);\n\n(new_rngs[li] = ncnt);\n\n(new_rngs[(32)] = (li + (1)));\n\nvar i_32088 = (1);\nwhile(true){\nif((i_32088 <= li)){\n(new_rngs[i_32088] = ((new_rngs[(i_32088 - (1))]) + step));\n\nvar G__32089 = (i_32088 + (1));\ni_32088 = G__32089;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn cljs.core.__GT_VectorNode(null,new_arr);\n} else {\nvar new_arr = cljs.core.aclone(parent.arr);\nvar rngs = clojure.core.rrb_vector.nodes.node_ranges(parent);\nvar new_rngs = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar li = ((rngs[(32)]) - (1));\n(new_rngs[(32)] = (rngs[(32)]));\n\n(new_arr[(32)] = new_rngs);\n\n(new_arr[(0)] = child);\n\nvar i_32090 = (0);\nwhile(true){\nif((i_32090 <= li)){\n(new_rngs[i_32090] = ((rngs[i_32090]) - d));\n\nvar G__32091 = (i_32090 + (1));\ni_32090 = G__32091;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn cljs.core.__GT_VectorNode(null,new_arr);\n}\n});\nclojure.core.rrb_vector.nodes.replace_rightmost_child = (function clojure$core$rrb_vector$nodes$replace_rightmost_child(shift,parent,child,d){\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(parent)){\nvar arr = parent.arr;\nvar i = (clojure.core.rrb_vector.nodes.index_of_nil(arr) - (1));\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(child)){\nvar new_arr = cljs.core.aclone(arr);\n(new_arr[i] = child);\n\nreturn cljs.core.__GT_VectorNode(null,new_arr);\n} else {\nvar arr__$1 = parent.arr;\nvar new_arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar step = ((1) << shift);\nvar rngs = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(rngs[(32)] = (i + (1)));\n\n(new_arr[(32)] = rngs);\n\ncljs.core.array_copy(arr__$1,(0),new_arr,(0),i);\n\n(new_arr[i] = child);\n\nvar j_32092 = (0);\nvar r_32093 = step;\nwhile(true){\nif((j_32092 <= i)){\n(rngs[j_32092] = r_32093);\n\nvar G__32094 = (j_32092 + (1));\nvar G__32095 = (r_32093 + step);\nj_32092 = G__32094;\nr_32093 = G__32095;\ncontinue;\n} else {\n}\nbreak;\n}\n\n(rngs[i] = clojure.core.rrb_vector.nodes.last_range(child));\n\nreturn cljs.core.__GT_VectorNode(null,new_arr);\n}\n} else {\nvar rngs = clojure.core.rrb_vector.nodes.node_ranges(parent);\nvar new_rngs = cljs.core.aclone(rngs);\nvar i = ((rngs[(32)]) - (1));\nvar new_arr = cljs.core.aclone(parent.arr);\n(new_arr[i] = child);\n\n(new_arr[(32)] = new_rngs);\n\n(new_rngs[i] = ((rngs[i]) + d));\n\nreturn cljs.core.__GT_VectorNode(null,new_arr);\n}\n});\nclojure.core.rrb_vector.nodes.new_path_STAR_ = (function clojure$core$rrb_vector$nodes$new_path_STAR_(shift,node){\nvar reg_QMARK_ = ((32) === node.arr.length);\nvar len = ((reg_QMARK_)?(32):(33));\nvar arr = (new Array(len));\nvar rngs = (((!(reg_QMARK_)))?(function (){var G__32064 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(G__32064[(0)] = node.arr.length);\n\n(G__32064[(32)] = (1));\n\nreturn G__32064;\n})():null);\nvar ret = cljs.core.__GT_VectorNode(null,arr);\nvar arr_32096__$1 = arr;\nvar shift_32097__$1 = shift;\nwhile(true){\nif((shift_32097__$1 === (5))){\nif((!(reg_QMARK_))){\n(arr_32096__$1[(32)] = rngs);\n} else {\n}\n\n(arr_32096__$1[(0)] = node);\n} else {\nvar a_32098 = (new Array(len));\nvar e_32099 = cljs.core.__GT_VectorNode(null,a_32098);\n(arr_32096__$1[(0)] = e_32099);\n\nif((!(reg_QMARK_))){\n(arr_32096__$1[(32)] = rngs);\n} else {\n}\n\nvar G__32100 = a_32098;\nvar G__32101 = (shift_32097__$1 - (5));\narr_32096__$1 = G__32100;\nshift_32097__$1 = G__32101;\ncontinue;\n}\nbreak;\n}\n\nreturn ret;\n});\nclojure.core.rrb_vector.nodes.fold_tail = (function clojure$core$rrb_vector$nodes$fold_tail(node,shift,cnt,tail){\nvar tlen = tail.length;\nvar reg_QMARK_ = ((clojure.core.rrb_vector.nodes.regular_QMARK_(node)) && ((tlen === (32))));\nvar arr = node.arr;\nvar li = clojure.core.rrb_vector.nodes.index_of_nil(arr);\nvar new_arr = (new Array(((reg_QMARK_)?(32):(33))));\nvar rngs = (((!(clojure.core.rrb_vector.nodes.regular_QMARK_(node))))?clojure.core.rrb_vector.nodes.node_ranges(node):null);\nvar cret = (((shift === (5)))?cljs.core.__GT_VectorNode(null,tail):(function (){var G__32065 = (arr[(li - (1))]);\nvar G__32066 = (shift - (5));\nvar G__32067 = ((clojure.core.rrb_vector.nodes.regular_QMARK_(node))?cljs.core.mod(cnt,((1) << shift)):(function (){var li__$1 = ((rngs[(32)]) - (1));\nif((li__$1 > (0))){\nreturn ((rngs[li__$1]) - (rngs[(li__$1 - (1))]));\n} else {\nreturn (rngs[(0)]);\n}\n})());\nvar G__32068 = tail;\nreturn (clojure.core.rrb_vector.nodes.fold_tail.cljs$core$IFn$_invoke$arity$4 ? clojure.core.rrb_vector.nodes.fold_tail.cljs$core$IFn$_invoke$arity$4(G__32065,G__32066,G__32067,G__32068) : clojure.core.rrb_vector.nodes.fold_tail.call(null,G__32065,G__32066,G__32067,G__32068));\n})());\nvar new_rngs = (((!(reg_QMARK_)))?(cljs.core.truth_(rngs)?cljs.core.aclone(rngs):clojure.core.rrb_vector.nodes.regular_ranges(shift,cnt)):null);\nif((((((cret == null)) || ((shift === (5))))) && ((li === (32))))){\nreturn null;\n} else {\ncljs.core.array_copy(arr,(0),new_arr,(0),li);\n\nif(reg_QMARK_){\n} else {\nif((((cret == null)) || ((shift === (5))))){\n(new_rngs[li] = ((((li > (0)))?(new_rngs[(li - (1))]):((0) | (0))) + tlen));\n\n(new_rngs[(32)] = (li + (1)));\n} else {\nif((li > (0))){\n(new_rngs[(li - (1))] = ((new_rngs[(li - (1))]) + tlen));\n} else {\n}\n\n(new_rngs[(32)] = li);\n}\n}\n\nif((!(reg_QMARK_))){\n(new_arr[(32)] = new_rngs);\n} else {\n}\n\nif((cret == null)){\n(new_arr[li] = clojure.core.rrb_vector.nodes.new_path_STAR_((shift - (5)),cljs.core.__GT_VectorNode(null,tail)));\n} else {\n(new_arr[(((shift === (5)))?li:(li - (1)))] = cret);\n}\n\nreturn cljs.core.__GT_VectorNode(null,new_arr);\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/core/rrb_vector/nodes.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",34],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",["~$clone"]],"~:name","~$clojure.core.rrb-vector.nodes","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^Q","~$goog","^R"],"~:seen",["^H",[]],"~:uses",null,"~:require-macros",["^ ","^Q","^Q"],"~:form",["~#list",["~$ns","^K",["^W",["~:refer-clojure","~:exclude",["^I"]]]]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^R","^Q"]],"^N","^K","~:resource-id",["~:shadow.build.classpath/resource","clojure/core/rrb_vector/nodes.cljs"],"~:compiled-at",1699910696515,"^L",["^ ","^Q","^Q","^R","^R"],"~:resource-name","clojure/core/rrb_vector/nodes.cljs","~:warnings",[],"~:source","(ns clojure.core.rrb-vector.nodes\n  (:refer-clojure :exclude [clone]))\n\n;;; node ops\n\n(def empty-node cljs.core.PersistentVector.EMPTY_NODE)\n\n(defn clone [shift node]\n  (VectorNode. (.-edit node) (aclone (.-arr node))))\n\n(defn regular? [node]\n  (not (== (alength (.-arr node)) 33)))\n\n;;; ranges\n\n(defn node-ranges [node]\n  (aget (.-arr node) 32))\n\n(defn last-range [node]\n  (let [rngs (node-ranges node)\n        i    (dec (aget rngs 32))]\n    (aget rngs i)))\n\n(defn regular-ranges [shift cnt]\n  (let [step (bit-shift-left 1 shift)\n        rngs (make-array 33)]\n    (loop [i 0 r step]\n      (if (< r cnt)\n        (do (aset rngs i r)\n            (recur (inc i) (+ r step)))\n        (do (aset rngs i cnt)\n            (aset rngs 32 (inc i))\n            rngs)))))\n\n;;; root overflow\n\n(defn overflow? [root shift cnt]\n  (if (regular? root)\n    (> (bit-shift-right cnt 5)\n       (bit-shift-left 1 shift))\n    (let [rngs (node-ranges root)\n          slc  (aget rngs 32)]\n      (and (== slc 32)\n           (or (== shift 5)\n               (recur (aget (.-arr root) (dec slc))\n                      (- shift 5)\n                      (+ (- (aget rngs 31) (aget rngs 30)) 32)))))))\n\n;;; find nil / 0\n\n(defn index-of-0 [arr]\n  (loop [l 0 h 31]\n    (if (>= l (dec h))\n      (if (zero? (int (aget arr l)))\n        l\n        (if (zero? (int (aget arr h)))\n          h\n          32))\n      (let [mid (+ l (bit-shift-right (- h l) 1))]\n        (if (zero? (int (aget arr mid)))\n          (recur l mid)\n          (recur (inc mid) h))))))\n\n(defn index-of-nil ^long [arr]\n  (loop [l 0 h 31]\n    (if (>= l (dec h))\n      (if (nil? (aget arr l))\n        l\n        (if (nil? (aget arr h))\n          h\n          32))\n      (let [mid (+ l (bit-shift-right (- h l) 1))]\n        (if (nil? (aget arr mid))\n          (recur l mid)\n          (recur (inc mid) h))))))\n\n;;; children\n\n(defn first-child [node]\n  (aget (.-arr node) 0))\n\n(defn last-child [node]\n  (let [arr (.-arr node)]\n    (if (regular? node)\n      (aget arr (dec (index-of-nil arr)))\n      (aget arr (dec (aget (node-ranges node) 32))))))\n\n(defn remove-leftmost-child [shift parent]\n  (let [arr (.-arr parent)]\n    (if (nil? (aget arr 1))\n      nil\n      (let [r?      (regular? parent)\n            new-arr (make-array (if r? 32 33))]\n        (array-copy arr 1 new-arr 0 31)\n        (if-not r?\n          (let [rngs     (node-ranges parent)\n                rng0     (aget rngs 0)\n                new-rngs (make-array 33)\n                lim      (aget rngs 32)]\n            (array-copy rngs 1 new-rngs 0 (dec lim))\n            (loop [i 0]\n              (when (< i lim)\n                (aset new-rngs i (- (aget new-rngs i) rng0))\n                (recur (inc i))))\n            (aset new-rngs 32 (dec (aget rngs 32)))\n            (aset new-rngs (dec (aget rngs 32)) 0)\n            (aset new-arr 32 new-rngs)))\n        (->VectorNode (.-edit parent) new-arr)))))\n\n(defn replace-leftmost-child [shift parent pcnt child d]\n  (if (regular? parent)\n    (let [step (bit-shift-left 1 shift)\n          rng0 (- step d)\n          ncnt (- pcnt d)\n          li   (bit-and (bit-shift-right shift (dec pcnt)) 0x1f)\n          arr      (.-arr parent)\n          new-arr  (make-array 33)\n          new-rngs (make-array 33)]\n      (aset new-arr 0 child)\n      (array-copy arr 1 new-arr 1 li)\n      (aset new-arr 32 new-rngs)\n      (aset new-rngs 0 rng0)\n      (aset new-rngs li ncnt)\n      (aset new-rngs 32 (inc li))\n      (loop [i 1]\n        (when (<= i li)\n          (aset new-rngs i (+ (aget new-rngs (dec i)) step))\n          (recur (inc i))))\n      (->VectorNode nil new-arr))\n    (let [new-arr  (aclone (.-arr parent))\n          rngs     (node-ranges parent)\n          new-rngs (make-array 33)\n          li       (dec (aget rngs 32))]\n      (aset new-rngs 32 (aget rngs 32))\n      (aset new-arr 32 new-rngs)\n      (aset new-arr 0 child)\n      (loop [i 0]\n        (when (<= i li)\n          (aset new-rngs i (- (aget rngs i) d))\n          (recur (inc i))))\n      (->VectorNode nil new-arr))))\n\n(defn replace-rightmost-child [shift parent child d]\n  (if (regular? parent)\n    (let [arr (.-arr parent)\n          i   (dec (index-of-nil arr))]\n      (if (regular? child)\n        (let [new-arr (aclone arr)]\n          (aset new-arr i child)\n          (->VectorNode nil new-arr))\n        (let [arr     (.-arr parent)\n              new-arr (make-array 33)\n              step    (bit-shift-left 1 shift)\n              rngs    (make-array 33)]\n          (aset rngs 32 (inc i))\n          (aset new-arr 32 rngs)\n          (array-copy arr 0 new-arr 0 i)\n          (aset new-arr i child)\n          (loop [j 0 r step]\n            (when (<= j i)\n              (aset rngs j r)\n              (recur (inc j) (+ r step))))\n          (aset rngs i (last-range child))\n          (->VectorNode nil new-arr))))\n    (let [rngs     (node-ranges parent)\n          new-rngs (aclone rngs)\n          i        (dec (aget rngs 32))\n          new-arr  (aclone (.-arr parent))]\n      (aset new-arr i child)\n      (aset new-arr 32 new-rngs)\n      (aset new-rngs i (+ (aget rngs i) d))\n      (->VectorNode nil new-arr))))\n\n;;; fold-tail\n\n(defn new-path* [shift node]\n  (let [reg? (== 32 (alength (.-arr node)))\n        len  (if reg? 32 33)\n        arr  (make-array len)\n        rngs (if-not reg?\n               (doto (make-array 33)\n                 (aset 0 (alength (.-arr node)))\n                 (aset 32 1)))\n        ret  (->VectorNode nil arr)]\n    (loop [arr arr shift shift]\n      (if (== shift 5)\n        (do (if-not reg?\n              (aset arr 32 rngs))\n            (aset arr 0 node))\n        (let [a (make-array len)\n              e (->VectorNode nil a)]\n          (aset arr 0 e)\n          (if-not reg?\n            (aset arr 32 rngs))\n          (recur a (- shift 5)))))\n    ret))\n\n(defn fold-tail [node shift cnt tail]\n  (let [tlen     (alength tail)\n        reg?     (and (regular? node) (== tlen 32))\n        arr      (.-arr node)\n        li       (index-of-nil arr)\n        new-arr  (make-array (if reg? 32 33))\n        rngs     (if-not (regular? node) (node-ranges node))\n        cret     (if (== shift 5)\n                   (->VectorNode nil tail)\n                   (fold-tail (aget arr (dec li))\n                              (- shift 5)\n                              (if (regular? node)\n                                (mod cnt (bit-shift-left 1 shift))\n                                (let [li (dec (aget rngs 32))]\n                                  (if (pos? li)\n                                    (- (aget rngs li) (aget rngs (dec li)))\n                                    (aget rngs 0))))\n                              tail))\n        new-rngs (if-not reg?\n                   (if rngs\n                     (aclone rngs)\n                     (regular-ranges shift cnt)))]\n    (when-not (and (or (nil? cret) (== shift 5)) (== li 32))\n      (array-copy arr 0 new-arr 0 li)\n      (when-not reg?\n        (if (or (nil? cret) (== shift 5))\n          (do (aset new-rngs li\n                    (+ (if (pos? li)\n                         (aget new-rngs (dec li))\n                         (int 0))\n                       tlen))\n              (aset new-rngs 32 (inc li)))\n          (do (when (pos? li)\n                (aset new-rngs (dec li)\n                      (+ (aget new-rngs (dec li)) tlen)))\n              (aset new-rngs 32 li))))\n      (if-not reg?\n        (aset new-arr 32 new-rngs))\n      (if (nil? cret)\n        (aset new-arr li (new-path* (- shift 5) (->VectorNode nil tail)))\n        (aset new-arr (if (== shift 5) li (dec li)) cret))\n      (->VectorNode nil new-arr))))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["clojure.core.rrb-vector.nodes/empty-node","cljs.core/PersistentVector","clojure.core.rrb-vector.nodes/clone","shift","node","cljs.core/VectorNode","cljs.core/aclone","clojure.core.rrb-vector.nodes/regular?","clojure.core.rrb-vector.nodes/node-ranges","clojure.core.rrb-vector.nodes/last-range","rngs","i","clojure.core.rrb-vector.nodes/regular-ranges","cnt","step","r","clojure.core.rrb-vector.nodes/overflow?","root","slc","and__5043__auto__","or__5045__auto__","clojure.core.rrb-vector.nodes/index-of-0","arr","l","h","mid","clojure.core.rrb-vector.nodes/index-of-nil","clojure.core.rrb-vector.nodes/first-child","clojure.core.rrb-vector.nodes/last-child","clojure.core.rrb-vector.nodes/remove-leftmost-child","parent","r?","new-arr","js/Array","cljs.core/array-copy","rng0","new-rngs","lim","cljs.core/->VectorNode","clojure.core.rrb-vector.nodes/replace-leftmost-child","pcnt","child","d","ncnt","li","clojure.core.rrb-vector.nodes/replace-rightmost-child","j","clojure.core.rrb-vector.nodes/new-path*","reg?","len","G__32064","ret","a","e","clojure.core.rrb-vector.nodes/fold-tail","tail","tlen","cret","G__32065","G__32066","G__32067","G__32068","cljs.core/mod"]],"~:used-vars",["^H",["~$clojure.core.rrb-vector.nodes/empty-node","~$clojure.core.rrb-vector.nodes/overflow?","~$clojure.core.rrb-vector.nodes/index-of-0","~$cljs.core/VectorNode","~$cljs.core/aclone","~$clojure.core.rrb-vector.nodes/replace-rightmost-child","~$clojure.core.rrb-vector.nodes/last-range","~$clojure.core.rrb-vector.nodes/replace-leftmost-child","~$cljs.core/PersistentVector","~$clojure.core.rrb-vector.nodes/new-path*","~$clojure.core.rrb-vector.nodes/clone","~$clojure.core.rrb-vector.nodes/remove-leftmost-child","~$clojure.core.rrb-vector.nodes/last-child","~$js/Array","~$cljs.core/mod","~$clojure.core.rrb-vector.nodes/regular?","~$clojure.core.rrb-vector.nodes/first-child","~$cljs.core/->VectorNode","~$clojure.core.rrb-vector.nodes/fold-tail","~$cljs.core/not","~$clojure.core.rrb-vector.nodes/regular-ranges","~$clojure.core.rrb-vector.nodes/index-of-nil","~$cljs.core/array-copy","~$clojure.core.rrb-vector.nodes/node-ranges"]]],"~:cache-keys",["~#cmap",[["^13","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^R","~$goog.dom.HtmlElement"]]],["^13","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R"]]],["^13","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^13","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^24","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^25"]]],["^13","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^24"]]],["^13","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R"]]],["^13","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R"]]],["^13","clojure/core/rrb_vector/nodes.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^Q"]]],["^13","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R"]]],["^13","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^22","^25"]]],["^13","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R"]]],["^13","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R"]]],["^13","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^24"]]],"~:SHADOW-TIMESTAMP",[1698418133000,1698418133000,1698418125000],["^13","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^24","~$goog.reflect"]]],["^13","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^24","~$goog.fs.blob","^28","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2:","^2;"]]],["^13","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R"]]],["^13","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R"]]],["^13","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^2:","~$goog.html.SafeUrl","^2;","^24","^25"]]],["^13","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^24","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2?","~$goog.html.SafeStyle","^2A","^29","~$goog.html.uncheckedconversions","^2:","^25"]]],["^13","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","~$goog.dom.TagName","^24","~$goog.dom.element"]]],["^13","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^2:","^2?","^2F","~$goog.html.SafeStyleSheet","^2A","^2H","^29","^2;","^24","~$goog.labs.userAgent.browser","~$goog.array","~$goog.object","^25","~$goog.dom.tags","^2@"]]],["^13","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^2M"]]],["^13","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R"]]],["^13","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^13","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^2L","^24","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^13","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^23"]]],["^13","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R"]]],["^13","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R"]]],["^13","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",[]]],["^13","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^2L","^2M"]]],["^13","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","~$goog.dom.safe","^2G","^2:","^25"]]],["^13","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R"]]],["^13","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^25","^27"]]],["^13","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R"]]],["^13","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","~$goog.flags"]]],["^13","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^2P","^2H"]]],["^13","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^24","^2E","^2?","^2F","^2J","^2A","^29","^2:","^25"]]],["^13","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R"]]],["^13","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","~$goog.math.Long","~$goog.math.Integer","^2R","^2M","^2L","~$goog.Uri","~$goog.string.StringBuffer"]]],["^13","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^2:","^2;","^2@","^24"]]],["^13","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^2:","^2F","^2;","^2M","^24","^25"]]],["^13","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^2="]]],["^13","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^24","^2R"]]],["^13","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1Y",["^ ","^1Z",null,"^1[",["^H",[]],"^20",["^R","^24","^2;"]]]]],"~:clj-info",["^ ","jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1698418125000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",1,"^8",5,"^9",1,"^:",34],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",["^I"]],"^J","^K","^L",["^ "],"^O",null,"^P",["^ ","^Q","^Q","^R","^R"],"^S",["^H",[]],"~:shadow/js-access-global",["^H",["Array"]],"^T",null,"~:defs",["^ ","~$regular?",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",11,"^8",7,"^9",11,"^:",15,"~:arglists",["^W",["~$quote",["^W",[["~$node"]]]]]],"^J","^1N","^6","clojure/core/rrb_vector/nodes.cljs","^:",15,"~:method-params",["^W",[["^3V"]]],"~:protocol-impl",null,"~:arglists-meta",["^W",[null,null]],"^8",1,"~:root-source-info",["^ ","~:source-type","~:fragment","~:source-form",["^W",["~$defn","^3R",["^3V"],["^W",["~$not",["^W",["~$==",["^W",["~$alength",["^W",["~$.-arr","^3V"]]]],33]]]]]]],"~:variadic?",false,"^7",11,"~:ret-tag","~$boolean","^9",11,"~:max-fixed-arity",1,"~:fn-var",true,"^3T",["^W",["^3U",["^W",[["^3V"]]]]]],"~$remove-leftmost-child",["^ ","^3S",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",88,"^8",7,"^9",88,"^:",28,"^3T",["^W",["^3U",["^W",[["~$shift","~$parent"]]]]]],"^J","^1J","^6","clojure/core/rrb_vector/nodes.cljs","^:",28,"^3W",["^W",[["^4=","^4>"]]],"^3X",null,"^3Y",["^W",[null,null]],"^8",1,"^3Z",["^ ","^3[","^40","^41",["^W",["^42","^4<",["^4=","^4>"],["^W",["~$let",["~$arr",["^W",["^46","^4>"]]],["^W",["~$if",["^W",["~$nil?",["^W",["~$aget","^4@",1]]]],null,["^W",["^4?",["~$r?",["^W",["^3R","^4>"]],"~$new-arr",["^W",["~$make-array",["^W",["^4A","^4D",32,33]]]]],["^W",["~$array-copy","^4@",1,"^4E",0,31]],["^W",["~$if-not","^4D",["^W",["^4?",["~$rngs",["^W",["~$node-ranges","^4>"]],"~$rng0",["^W",["^4C","^4I",0]],"~$new-rngs",["^W",["^4F",33]],"~$lim",["^W",["^4C","^4I",32]]],["^W",["^4G","^4I",1,"^4L",0,["^W",["~$dec","^4M"]]]],["^W",["~$loop",["~$i",0],["^W",["~$when",["^W",["~$<","~$i","^4M"]],["^W",["~$aset","^4L","~$i",["^W",["~$-",["^W",["^4C","^4L","~$i"]],"^4K"]]]],["^W",["~$recur",["^W",["~$inc","~$i"]]]]]]]],["^W",["^4Q","^4L",32,["^W",["^4N",["^W",["^4C","^4I",32]]]]]],["^W",["^4Q","^4L",["^W",["^4N",["^W",["^4C","^4I",32]]]],0]],["^W",["^4Q","^4E",32,"^4L"]]]]]],["^W",["~$->VectorNode",["^W",["~$.-edit","^4>"]],"^4E"]]]]]]]]]]],"^47",false,"^7",88,"^48",["^H",["^1B","~$clj-nil"]],"^9",88,"^4:",2,"^4;",true,"^3T",["^W",["^3U",["^W",[["^4=","^4>"]]]]]],"~$last-range",["^ ","^3S",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",19,"^8",7,"^9",19,"^:",17,"^3T",["^W",["^3U",["^W",[["^3V"]]]]]],"^J","^1E","^6","clojure/core/rrb_vector/nodes.cljs","^:",17,"^3W",["^W",[["^3V"]]],"^3X",null,"^3Y",["^W",[null,null]],"^8",1,"^3Z",["^ ","^3[","^40","^41",["^W",["^42","^4W",["^3V"],["^W",["^4?",["^4I",["^W",["^4J","^3V"]],"~$i",["^W",["^4N",["^W",["^4C","^4I",32]]]]],["^W",["^4C","^4I","~$i"]]]]]]],"^47",false,"^7",19,"^48","~$any","^9",19,"^4:",1,"^4;",true,"^3T",["^W",["^3U",["^W",[["^3V"]]]]]],"^4J",["^ ","^3S",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",16,"^8",7,"^9",16,"^:",18,"^3T",["^W",["^3U",["^W",[["^3V"]]]]]],"^J","^1V","^6","clojure/core/rrb_vector/nodes.cljs","^:",18,"^3W",["^W",[["^3V"]]],"^3X",null,"^3Y",["^W",[null,null]],"^8",1,"^3Z",["^ ","^3[","^40","^41",["^W",["^42","^4J",["^3V"],["^W",["^4C",["^W",["^46","^3V"]],32]]]]],"^47",false,"^7",16,"^48","^4X","^9",16,"^4:",1,"^4;",true,"^3T",["^W",["^3U",["^W",[["^3V"]]]]]],"~$first-child",["^ ","^3S",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",79,"^8",7,"^9",79,"^:",18,"^3T",["^W",["^3U",["^W",[["^3V"]]]]]],"^J","^1O","^6","clojure/core/rrb_vector/nodes.cljs","^:",18,"^3W",["^W",[["^3V"]]],"^3X",null,"^3Y",["^W",[null,null]],"^8",1,"^3Z",["^ ","^3[","^40","^41",["^W",["^42","^4Y",["^3V"],["^W",["^4C",["^W",["^46","^3V"]],0]]]]],"^47",false,"^7",79,"^48","^4X","^9",79,"^4:",1,"^4;",true,"^3T",["^W",["^3U",["^W",[["^3V"]]]]]],"~$new-path*",["^ ","^3S",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",176,"^8",7,"^9",176,"^:",16,"^3T",["^W",["^3U",["^W",[["^4=","^3V"]]]]]],"^J","^1H","^6","clojure/core/rrb_vector/nodes.cljs","^:",16,"^3W",["^W",[["^4=","^3V"]]],"^3X",null,"^3Y",["^W",[null,null]],"^8",1,"^3Z",["^ ","^3[","^40","^41",["^W",["^42","^4Z",["^4=","^3V"],["^W",["^4?",["~$reg?",["^W",["^44",32,["^W",["^45",["^W",["^46","^3V"]]]]]],"~$len",["^W",["^4A","^4[",32,33]],"^4@",["^W",["^4F","^50"]],"^4I",["^W",["^4H","^4[",["^W",["~$doto",["^W",["^4F",33]],["^W",["^4Q",0,["^W",["^45",["^W",["^46","^3V"]]]]]],["^W",["^4Q",32,1]]]]]],"~$ret",["^W",["^4T",null,"^4@"]]],["^W",["^4O",["^4@","^4@","^4=","^4="],["^W",["^4A",["^W",["^44","^4=",5]],["^W",["~$do",["^W",["^4H","^4[",["^W",["^4Q","^4@",32,"^4I"]]]],["^W",["^4Q","^4@",0,"^3V"]]]],["^W",["^4?",["~$a",["^W",["^4F","^50"]],"~$e",["^W",["^4T",null,"~$a"]]],["^W",["^4Q","^4@",0,"~$e"]],["^W",["^4H","^4[",["^W",["^4Q","^4@",32,"^4I"]]]],["^W",["^4R","~$a",["^W",["~$-","^4=",5]]]]]]]]]],"^52"]]]]],"^47",false,"^7",176,"^48","^1B","^9",176,"^4:",2,"^4;",true,"^3T",["^W",["^3U",["^W",[["^4=","^3V"]]]]]],"~$regular-ranges",["^ ","^3S",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",24,"^8",7,"^9",24,"^:",21,"^3T",["^W",["^3U",["^W",[["^4=","~$cnt"]]]]]],"^J","^1S","^6","clojure/core/rrb_vector/nodes.cljs","^:",21,"^3W",["^W",[["^4=","^55"]]],"^3X",null,"^3Y",["^W",[null,null]],"^8",1,"^3Z",["^ ","^3[","^40","^41",["^W",["^42","^54",["^4=","^55"],["^W",["^4?",["~$step",["^W",["~$bit-shift-left",1,"^4="]],"^4I",["^W",["^4F",33]]],["^W",["^4O",["~$i",0,"~$r","^56"],["^W",["^4A",["^W",["~$<","~$r","^55"]],["^W",["^53",["^W",["^4Q","^4I","~$i","~$r"]],["^W",["^4R",["^W",["^4S","~$i"]],["^W",["~$+","~$r","^56"]]]]]],["^W",["^53",["^W",["^4Q","^4I","~$i","^55"]],["^W",["^4Q","^4I",32,["^W",["^4S","~$i"]]]],"^4I"]]]]]]]]]]],"^47",false,"^7",24,"^48","~$array","^9",24,"^4:",2,"^4;",true,"^3T",["^W",["^3U",["^W",[["^4=","^55"]]]]]],"~$fold-tail",["^ ","^3S",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",198,"^8",7,"^9",198,"^:",16,"^3T",["^W",["^3U",["^W",[["^3V","^4=","^55","~$tail"]]]]]],"^J","^1Q","^6","clojure/core/rrb_vector/nodes.cljs","^:",16,"^3W",["^W",[["^3V","^4=","^55","^5:"]]],"^3X",null,"^3Y",["^W",[null,null]],"^8",1,"^3Z",["^ ","^3[","^40","^41",["^W",["^42","^59",["^3V","^4=","^55","^5:"],["^W",["^4?",["~$tlen",["^W",["^45","^5:"]],"^4[",["^W",["~$and",["^W",["^3R","^3V"]],["^W",["^44","^5;",32]]]],"^4@",["^W",["^46","^3V"]],"~$li",["^W",["~$index-of-nil","^4@"]],"^4E",["^W",["^4F",["^W",["^4A","^4[",32,33]]]],"^4I",["^W",["^4H",["^W",["^3R","^3V"]],["^W",["^4J","^3V"]]]],"~$cret",["^W",["^4A",["^W",["^44","^4=",5]],["^W",["^4T",null,"^5:"]],["^W",["^59",["^W",["^4C","^4@",["^W",["^4N","^5="]]]],["^W",["~$-","^4=",5]],["^W",["^4A",["^W",["^3R","^3V"]],["^W",["~$mod","^55",["^W",["^57",1,"^4="]]]],["^W",["^4?",["^5=",["^W",["^4N",["^W",["^4C","^4I",32]]]]],["^W",["^4A",["^W",["~$pos?","^5="]],["^W",["~$-",["^W",["^4C","^4I","^5="]],["^W",["^4C","^4I",["^W",["^4N","^5="]]]]]],["^W",["^4C","^4I",0]]]]]]]],"^5:"]]]],"^4L",["^W",["^4H","^4[",["^W",["^4A","^4I",["^W",["~$aclone","^4I"]],["^W",["^54","^4=","^55"]]]]]]],["^W",["~$when-not",["^W",["^5<",["^W",["~$or",["^W",["^4B","^5?"]],["^W",["^44","^4=",5]]]],["^W",["^44","^5=",32]]]],["^W",["^4G","^4@",0,"^4E",0,"^5="]],["^W",["^5C","^4[",["^W",["^4A",["^W",["^5D",["^W",["^4B","^5?"]],["^W",["^44","^4=",5]]]],["^W",["^53",["^W",["^4Q","^4L","^5=",["^W",["~$+",["^W",["^4A",["^W",["^5A","^5="]],["^W",["^4C","^4L",["^W",["^4N","^5="]]]],["^W",["~$int",0]]]],"^5;"]]]],["^W",["^4Q","^4L",32,["^W",["^4S","^5="]]]]]],["^W",["^53",["^W",["^4P",["^W",["^5A","^5="]],["^W",["^4Q","^4L",["^W",["^4N","^5="]],["^W",["~$+",["^W",["^4C","^4L",["^W",["^4N","^5="]]]],"^5;"]]]]]],["^W",["^4Q","^4L",32,"^5="]]]]]]]],["^W",["^4H","^4[",["^W",["^4Q","^4E",32,"^4L"]]]],["^W",["^4A",["^W",["^4B","^5?"]],["^W",["^4Q","^4E","^5=",["^W",["^4Z",["^W",["~$-","^4=",5]],["^W",["^4T",null,"^5:"]]]]]],["^W",["^4Q","^4E",["^W",["^4A",["^W",["^44","^4=",5]],"^5=",["^W",["^4N","^5="]]]],"^5?"]]]],["^W",["^4T",null,"^4E"]]]]]]]]],"^47",false,"^7",198,"^48",["^H",["^1B","^4V"]],"^9",198,"^4:",4,"^4;",true,"^3T",["^W",["^3U",["^W",[["^3V","^4=","^55","^5:"]]]]]],"^5>",["^ ","^3S",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",64,"^8",7,"^9",64,"^:",19,"^3T",["^W",["^3U",["^W",[["^4@"]]]]]],"^J","^1T","^6","clojure/core/rrb_vector/nodes.cljs","^:",19,"^3W",["^W",[["^4@"]]],"^3X",null,"^3Y",["^W",[null,null]],"^8",1,"^3Z",["^ ","^3[","^40","^41",["^W",["^42","^5>",["^4@"],["^W",["^4O",["~$l",0,"~$h",31],["^W",["^4A",["^W",["~$>=","~$l",["^W",["^4N","~$h"]]]],["^W",["^4A",["^W",["^4B",["^W",["^4C","^4@","~$l"]]]],"~$l",["^W",["^4A",["^W",["^4B",["^W",["^4C","^4@","~$h"]]]],"~$h",32]]]],["^W",["^4?",["~$mid",["^W",["~$+","~$l",["^W",["~$bit-shift-right",["^W",["~$-","~$h","~$l"]],1]]]]],["^W",["^4A",["^W",["^4B",["^W",["^4C","^4@","^5G"]]]],["^W",["^4R","~$l","^5G"]],["^W",["^4R",["^W",["^4S","^5G"]],"~$h"]]]]]]]]]]]]],"^47",false,"^7",64,"^48",["^H",["^4X","~$number"]],"^9",64,"^4:",1,"^4;",true,"^3T",["^W",["^3U",["^W",[["^4@"]]]]]],"~$overflow?",["^ ","^3S",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",37,"^8",7,"^9",37,"^:",16,"^3T",["^W",["^3U",["^W",[["~$root","^4=","^55"]]]]]],"^J","^1@","^6","clojure/core/rrb_vector/nodes.cljs","^:",16,"^3W",["^W",[["^5K","^4=","^55"]]],"^3X",null,"^3Y",["^W",[null,null]],"^8",1,"^3Z",["^ ","^3[","^40","^41",["^W",["^42","^5J",["^5K","^4=","^55"],["^W",["^4A",["^W",["^3R","^5K"]],["^W",["~$>",["^W",["^5H","^55",5]],["^W",["^57",1,"^4="]]]],["^W",["^4?",["^4I",["^W",["^4J","^5K"]],"~$slc",["^W",["^4C","^4I",32]]],["^W",["^5<",["^W",["^44","^5L",32]],["^W",["^5D",["^W",["^44","^4=",5]],["^W",["^4R",["^W",["^4C",["^W",["^46","^5K"]],["^W",["^4N","^5L"]]]],["^W",["~$-","^4=",5]],["^W",["~$+",["^W",["~$-",["^W",["^4C","^4I",31]],["^W",["^4C","^4I",30]]]],32]]]]]]]]]]]]]]],"^47",false,"^7",37,"^48","^49","^9",37,"^4:",3,"^4;",true,"^3T",["^W",["^3U",["^W",[["^5K","^4=","^55"]]]]]],"~$empty-node",["^ ","^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",6,"^8",6,"^9",6,"^:",16],"^J","^1?","^6","clojure/core/rrb_vector/nodes.cljs","^:",16,"^8",1,"^3Z",["^ ","^3[","^40","^41",["^W",["~$def","^5M","~$cljs.core.PersistentVector.EMPTY_NODE"]]],"^7",6,"^9",6,"~:tag","^4X"],"~$replace-leftmost-child",["^ ","^3S",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",110,"^8",7,"^9",110,"^:",29,"^3T",["^W",["^3U",["^W",[["^4=","^4>","~$pcnt","~$child","~$d"]]]]]],"^J","^1F","^6","clojure/core/rrb_vector/nodes.cljs","^:",29,"^3W",["^W",[["^4=","^4>","^5R","^5S","~$d"]]],"^3X",null,"^3Y",["^W",[null,null]],"^8",1,"^3Z",["^ ","^3[","^40","^41",["^W",["^42","^5Q",["^4=","^4>","^5R","^5S","~$d"],["^W",["^4A",["^W",["^3R","^4>"]],["^W",["^4?",["^56",["^W",["^57",1,"^4="]],"^4K",["^W",["~$-","^56","~$d"]],"~$ncnt",["^W",["~$-","^5R","~$d"]],"^5=",["^W",["~$bit-and",["^W",["^5H","^4=",["^W",["^4N","^5R"]]]],31]],"^4@",["^W",["^46","^4>"]],"^4E",["^W",["^4F",33]],"^4L",["^W",["^4F",33]]],["^W",["^4Q","^4E",0,"^5S"]],["^W",["^4G","^4@",1,"^4E",1,"^5="]],["^W",["^4Q","^4E",32,"^4L"]],["^W",["^4Q","^4L",0,"^4K"]],["^W",["^4Q","^4L","^5=","^5T"]],["^W",["^4Q","^4L",32,["^W",["^4S","^5="]]]],["^W",["^4O",["~$i",1],["^W",["^4P",["^W",["~$<=","~$i","^5="]],["^W",["^4Q","^4L","~$i",["^W",["~$+",["^W",["^4C","^4L",["^W",["^4N","~$i"]]]],"^56"]]]],["^W",["^4R",["^W",["^4S","~$i"]]]]]]]],["^W",["^4T",null,"^4E"]]]],["^W",["^4?",["^4E",["^W",["^5B",["^W",["^46","^4>"]]]],"^4I",["^W",["^4J","^4>"]],"^4L",["^W",["^4F",33]],"^5=",["^W",["^4N",["^W",["^4C","^4I",32]]]]],["^W",["^4Q","^4L",32,["^W",["^4C","^4I",32]]]],["^W",["^4Q","^4E",32,"^4L"]],["^W",["^4Q","^4E",0,"^5S"]],["^W",["^4O",["~$i",0],["^W",["^4P",["^W",["^5V","~$i","^5="]],["^W",["^4Q","^4L","~$i",["^W",["~$-",["^W",["^4C","^4I","~$i"]],"~$d"]]]],["^W",["^4R",["^W",["^4S","~$i"]]]]]]]],["^W",["^4T",null,"^4E"]]]]]]]]],"^47",false,"^7",110,"^48","^1B","^9",110,"^4:",5,"^4;",true,"^3T",["^W",["^3U",["^W",[["^4=","^4>","^5R","^5S","~$d"]]]]]],"^I",["^ ","^3S",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",8,"^8",7,"^9",8,"^:",12,"^3T",["^W",["^3U",["^W",[["^4=","^3V"]]]]]],"^J","^1I","^6","clojure/core/rrb_vector/nodes.cljs","^:",12,"^3W",["^W",[["^4=","^3V"]]],"^3X",null,"^3Y",["^W",[null,null]],"^8",1,"^3Z",["^ ","^3[","^40","^41",["^W",["^42","^I",["^4=","^3V"],["^W",["~$VectorNode.",["^W",["^4U","^3V"]],["^W",["^5B",["^W",["^46","^3V"]]]]]]]]],"^47",false,"^7",8,"^48","^1B","^9",8,"^4:",2,"^4;",true,"^3T",["^W",["^3U",["^W",[["^4=","^3V"]]]]]],"~$last-child",["^ ","^3S",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",82,"^8",7,"^9",82,"^:",17,"^3T",["^W",["^3U",["^W",[["^3V"]]]]]],"^J","^1K","^6","clojure/core/rrb_vector/nodes.cljs","^:",17,"^3W",["^W",[["^3V"]]],"^3X",null,"^3Y",["^W",[null,null]],"^8",1,"^3Z",["^ ","^3[","^40","^41",["^W",["^42","^5X",["^3V"],["^W",["^4?",["^4@",["^W",["^46","^3V"]]],["^W",["^4A",["^W",["^3R","^3V"]],["^W",["^4C","^4@",["^W",["^4N",["^W",["^5>","^4@"]]]]]],["^W",["^4C","^4@",["^W",["^4N",["^W",["^4C",["^W",["^4J","^3V"]],32]]]]]]]]]]]]],"^47",false,"^7",82,"^48","^4X","^9",82,"^4:",1,"^4;",true,"^3T",["^W",["^3U",["^W",[["^3V"]]]]]],"~$index-of-0",["^ ","^3S",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",51,"^8",7,"^9",51,"^:",17,"^3T",["^W",["^3U",["^W",[["^4@"]]]]]],"^J","^1A","^6","clojure/core/rrb_vector/nodes.cljs","^:",17,"^3W",["^W",[["^4@"]]],"^3X",null,"^3Y",["^W",[null,null]],"^8",1,"^3Z",["^ ","^3[","^40","^41",["^W",["^42","^5Y",["^4@"],["^W",["^4O",["~$l",0,"~$h",31],["^W",["^4A",["^W",["^5F","~$l",["^W",["^4N","~$h"]]]],["^W",["^4A",["^W",["~$zero?",["^W",["^5E",["^W",["^4C","^4@","~$l"]]]]]],"~$l",["^W",["^4A",["^W",["^5Z",["^W",["^5E",["^W",["^4C","^4@","~$h"]]]]]],"~$h",32]]]],["^W",["^4?",["^5G",["^W",["~$+","~$l",["^W",["^5H",["^W",["~$-","~$h","~$l"]],1]]]]],["^W",["^4A",["^W",["^5Z",["^W",["^5E",["^W",["^4C","^4@","^5G"]]]]]],["^W",["^4R","~$l","^5G"]],["^W",["^4R",["^W",["^4S","^5G"]],"~$h"]]]]]]]]]]]]],"^47",false,"^7",51,"^48",["^H",["^4X","^5I"]],"^9",51,"^4:",1,"^4;",true,"^3T",["^W",["^3U",["^W",[["^4@"]]]]]],"~$replace-rightmost-child",["^ ","^3S",null,"^5",["^ ","^6","clojure/core/rrb_vector/nodes.cljs","^7",143,"^8",7,"^9",143,"^:",30,"^3T",["^W",["^3U",["^W",[["^4=","^4>","^5S","~$d"]]]]]],"^J","^1D","^6","clojure/core/rrb_vector/nodes.cljs","^:",30,"^3W",["^W",[["^4=","^4>","^5S","~$d"]]],"^3X",null,"^3Y",["^W",[null,null]],"^8",1,"^3Z",["^ ","^3[","^40","^41",["^W",["^42","^5[",["^4=","^4>","^5S","~$d"],["^W",["^4A",["^W",["^3R","^4>"]],["^W",["^4?",["^4@",["^W",["^46","^4>"]],"~$i",["^W",["^4N",["^W",["^5>","^4@"]]]]],["^W",["^4A",["^W",["^3R","^5S"]],["^W",["^4?",["^4E",["^W",["^5B","^4@"]]],["^W",["^4Q","^4E","~$i","^5S"]],["^W",["^4T",null,"^4E"]]]],["^W",["^4?",["^4@",["^W",["^46","^4>"]],"^4E",["^W",["^4F",33]],"^56",["^W",["^57",1,"^4="]],"^4I",["^W",["^4F",33]]],["^W",["^4Q","^4I",32,["^W",["^4S","~$i"]]]],["^W",["^4Q","^4E",32,"^4I"]],["^W",["^4G","^4@",0,"^4E",0,"~$i"]],["^W",["^4Q","^4E","~$i","^5S"]],["^W",["^4O",["~$j",0,"~$r","^56"],["^W",["^4P",["^W",["^5V","~$j","~$i"]],["^W",["^4Q","^4I","~$j","~$r"]],["^W",["^4R",["^W",["^4S","~$j"]],["^W",["~$+","~$r","^56"]]]]]]]],["^W",["^4Q","^4I","~$i",["^W",["^4W","^5S"]]]],["^W",["^4T",null,"^4E"]]]]]]]],["^W",["^4?",["^4I",["^W",["^4J","^4>"]],"^4L",["^W",["^5B","^4I"]],"~$i",["^W",["^4N",["^W",["^4C","^4I",32]]]],"^4E",["^W",["^5B",["^W",["^46","^4>"]]]]],["^W",["^4Q","^4E","~$i","^5S"]],["^W",["^4Q","^4E",32,"^4L"]],["^W",["^4Q","^4L","~$i",["^W",["~$+",["^W",["^4C","^4I","~$i"]],"~$d"]]]],["^W",["^4T",null,"^4E"]]]]]]]]],"^47",false,"^7",143,"^48","^1B","^9",143,"^4:",4,"^4;",true,"^3T",["^W",["^3U",["^W",[["^4=","^4>","^5S","~$d"]]]]]]],"^U",["^ ","^Q","^Q"],"^[",["^ "],"^10",["^ "],"^11",["^R","^Q"]],"^N","^K","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^1X",[["^62","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^62","~:shadow-tweaks"],null,["^62","~:source-map-inline"],null,["^62","~:elide-asserts"],false,["^62","~:optimize-constants"],null,["^62","^16"],null,["^62","~:external-config"],null,["^62","~:tooling-config"],null,["^62","~:emit-constants"],null,["^62","~:load-tests"],null,["^62","~:form-size-threshold"],null,["^62","~:global-goog-object&array"],null,["^62","~:data-readers"],null,["^62","~:infer-externs"],"~:auto",["^62","^18"],null,["^64","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^62","~:fn-invoke-direct"],null,["^62","~:source-map"],"/dev/null"]]]