["^ ","~:output",["^ ","~:js","goog.provide('clojure.core.rrb_vector');\n/**\n * Concatenates the given vectors in logarithmic time.\n */\nclojure.core.rrb_vector.catvec = (function clojure$core$rrb_vector$catvec(var_args){\nvar G__32332 = arguments.length;\nswitch (G__32332) {\ncase 0:\nreturn clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nvar args_arr__5794__auto__ = [];\nvar len__5769__auto___32387 = arguments.length;\nvar i__5770__auto___32388 = (0);\nwhile(true){\nif((i__5770__auto___32388 < len__5769__auto___32387)){\nargs_arr__5794__auto__.push((arguments[i__5770__auto___32388]));\n\nvar G__32389 = (i__5770__auto___32388 + (1));\ni__5770__auto___32388 = G__32389;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5795__auto__ = (new cljs.core.IndexedSeq(args_arr__5794__auto__.slice((4)),(0),null));\nreturn clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__5795__auto__);\n\n}\n});\n\n(clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.core.PersistentVector.EMPTY;\n}));\n\n(clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$1 = (function (v1){\nreturn v1;\n}));\n\n(clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$2 = (function (v1,v2){\nreturn clojure.core.rrb_vector.protocols._splicev(v1,v2);\n}));\n\n(clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$3 = (function (v1,v2,v3){\nreturn clojure.core.rrb_vector.protocols._splicev(clojure.core.rrb_vector.protocols._splicev(v1,v2),v3);\n}));\n\n(clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$4 = (function (v1,v2,v3,v4){\nreturn clojure.core.rrb_vector.protocols._splicev(clojure.core.rrb_vector.protocols._splicev(v1,v2),clojure.core.rrb_vector.protocols._splicev(v3,v4));\n}));\n\n(clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$variadic = (function (v1,v2,v3,v4,vn){\nreturn clojure.core.rrb_vector.protocols._splicev(clojure.core.rrb_vector.protocols._splicev(clojure.core.rrb_vector.protocols._splicev(v1,v2),clojure.core.rrb_vector.protocols._splicev(v3,v4)),cljs.core.apply.cljs$core$IFn$_invoke$arity$2(clojure.core.rrb_vector.catvec,vn));\n}));\n\n/** @this {Function} */\n(clojure.core.rrb_vector.catvec.cljs$lang$applyTo = (function (seq32327){\nvar G__32328 = cljs.core.first(seq32327);\nvar seq32327__$1 = cljs.core.next(seq32327);\nvar G__32329 = cljs.core.first(seq32327__$1);\nvar seq32327__$2 = cljs.core.next(seq32327__$1);\nvar G__32330 = cljs.core.first(seq32327__$2);\nvar seq32327__$3 = cljs.core.next(seq32327__$2);\nvar G__32331 = cljs.core.first(seq32327__$3);\nvar seq32327__$4 = cljs.core.next(seq32327__$3);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__32328,G__32329,G__32330,G__32331,seq32327__$4);\n}));\n\n(clojure.core.rrb_vector.catvec.cljs$lang$maxFixedArity = (4));\n\n/**\n * Returns a new vector containing the elements of the given vector v\n *   lying between the start (inclusive) and end (exclusive) indices in\n *   logarithmic time. end defaults to end of vector. The resulting\n *   vector shares structure with the original, but does not hold on to\n *   any elements of the original vector lying outside the given index\n *   range.\n */\nclojure.core.rrb_vector.subvec = (function clojure$core$rrb_vector$subvec(var_args){\nvar G__32361 = arguments.length;\nswitch (G__32361) {\ncase 2:\nreturn clojure.core.rrb_vector.subvec.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.core.rrb_vector.subvec.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(clojure.core.rrb_vector.subvec.cljs$core$IFn$_invoke$arity$2 = (function (v,start){\nreturn clojure.core.rrb_vector.protocols._slicev(v,start,cljs.core.count(v));\n}));\n\n(clojure.core.rrb_vector.subvec.cljs$core$IFn$_invoke$arity$3 = (function (v,start,end){\nreturn clojure.core.rrb_vector.protocols._slicev(v,start,end);\n}));\n\n(clojure.core.rrb_vector.subvec.cljs$lang$maxFixedArity = 3);\n\n/**\n * Creates a new vector containing the args.\n */\nclojure.core.rrb_vector.vector = (function clojure$core$rrb_vector$vector(var_args){\nvar G__32368 = arguments.length;\nswitch (G__32368) {\ncase 0:\nreturn clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nvar args_arr__5794__auto__ = [];\nvar len__5769__auto___32398 = arguments.length;\nvar i__5770__auto___32399 = (0);\nwhile(true){\nif((i__5770__auto___32399 < len__5769__auto___32398)){\nargs_arr__5794__auto__.push((arguments[i__5770__auto___32399]));\n\nvar G__32402 = (i__5770__auto___32399 + (1));\ni__5770__auto___32399 = G__32402;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5795__auto__ = (new cljs.core.IndexedSeq(args_arr__5794__auto__.slice((4)),(0),null));\nreturn clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__5795__auto__);\n\n}\n});\n\n(clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$0 = (function (){\nvar arr__32369 = [];\nreturn (new clojure.core.rrb_vector.rrbt.Vector(0,(5),cljs.core.PersistentVector.EMPTY_NODE,arr__32369,null,null));\n}));\n\n(clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$1 = (function (x1){\nvar arr__32370 = [null];\n(arr__32370[(0)] = x1);\n\nreturn (new clojure.core.rrb_vector.rrbt.Vector(1,(5),cljs.core.PersistentVector.EMPTY_NODE,arr__32370,null,null));\n}));\n\n(clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$2 = (function (x1,x2){\nvar arr__32373 = [null,null];\n(arr__32373[(0)] = x1);\n\n(arr__32373[(1)] = x2);\n\nreturn (new clojure.core.rrb_vector.rrbt.Vector(2,(5),cljs.core.PersistentVector.EMPTY_NODE,arr__32373,null,null));\n}));\n\n(clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$3 = (function (x1,x2,x3){\nvar arr__32376 = [null,null,null];\n(arr__32376[(0)] = x1);\n\n(arr__32376[(1)] = x2);\n\n(arr__32376[(2)] = x3);\n\nreturn (new clojure.core.rrb_vector.rrbt.Vector(3,(5),cljs.core.PersistentVector.EMPTY_NODE,arr__32376,null,null));\n}));\n\n(clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$4 = (function (x1,x2,x3,x4){\nvar arr__32381 = [null,null,null,null];\n(arr__32381[(0)] = x1);\n\n(arr__32381[(1)] = x2);\n\n(arr__32381[(2)] = x3);\n\n(arr__32381[(3)] = x4);\n\nreturn (new clojure.core.rrb_vector.rrbt.Vector(4,(5),cljs.core.PersistentVector.EMPTY_NODE,arr__32381,null,null));\n}));\n\n(clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$variadic = (function (x1,x2,x3,x4,xn){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$4(x1,x2,x3,x4),xn);\n}));\n\n/** @this {Function} */\n(clojure.core.rrb_vector.vector.cljs$lang$applyTo = (function (seq32363){\nvar G__32364 = cljs.core.first(seq32363);\nvar seq32363__$1 = cljs.core.next(seq32363);\nvar G__32365 = cljs.core.first(seq32363__$1);\nvar seq32363__$2 = cljs.core.next(seq32363__$1);\nvar G__32366 = cljs.core.first(seq32363__$2);\nvar seq32363__$3 = cljs.core.next(seq32363__$2);\nvar G__32367 = cljs.core.first(seq32363__$3);\nvar seq32363__$4 = cljs.core.next(seq32363__$3);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__32364,G__32365,G__32366,G__32367,seq32363__$4);\n}));\n\n(clojure.core.rrb_vector.vector.cljs$lang$maxFixedArity = (4));\n\n/**\n * Returns a vector containing the contents of coll.\n * \n *   If coll is a vector, returns an RRB vector using the internal tree\n *   of coll.\n */\nclojure.core.rrb_vector.vec = (function clojure$core$rrb_vector$vec(coll){\nif(cljs.core.vector_QMARK_(coll)){\nreturn clojure.core.rrb_vector.rrbt._as_rrbt(coll);\n} else {\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(clojure.core.rrb_vector.vector,coll);\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:author","MichaÅ‚ Marczyk","~:doc","An implementation of the confluently persistent vector data\n  structure introduced in Bagwell, Rompf, \"RRB-Trees: Efficient\n  Immutable Vectors\", EPFL-REPORT-169879, September, 2011.\n\n  RRB-Trees build upon Clojure's PersistentVectors, adding logarithmic\n  time concatenation and slicing.\n\n  The main API entry points are clojure.core.rrb-vector/catvec,\n  performing vector concatenation, and clojure.core.rrb-vector/subvec,\n  which produces a new vector containing the appropriate subrange of\n  the input vector (in contrast to cljs.core/subvec, which returns a\n  view on the input vector).\n\n  The implementation allows for seamless interoperability with\n  cljs.core/PersistentVector and cljs.core.Subvec instances:\n  clojure.core.rrb-vector/catvec and clojure.core.rrb-vector/subvec\n  convert their inputs to clojure.core.rrb-vector.rrbt/Vector\n  instances whenever necessary (this is a very fast constant time\n  operation for PersistentVector; for Subvec it is O(log n), where n\n  is the size of the underlying vector).\n\n  clojure.core.rrb-vector also exports its own versions of vector and\n  vec which always produce clojure.core.rrb-vector.rrbt.Vector\n  instances.","~:file","clojure/core/rrb_vector.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",28],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",["^ ","~$gen-vector-method","~$clojure.core.rrb-vector.macros"],"~:excludes",["~#set",["~$vec","~$vector","~$subvec"]],"~:name","~$clojure.core.rrb-vector","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.core.rrb-vector.protocols","^W","~$clojure.core.rrb-vector.rrbt","^X","~$clojure.core.rrb-vector.interop","^Y","~$cljs.core","^Z","~$goog","^["],"~:seen",["^L",["~:require","~:require-macros"]],"~:uses",["^ ","~$-slicev","^W","~$-splicev","^W","~$-as-rrbt","^X"],"^12",["^ ","^J","^J","^Z","^Z"],"~:form",["~#list",["~$ns","^Q","An implementation of the confluently persistent vector data\n  structure introduced in Bagwell, Rompf, \"RRB-Trees: Efficient\n  Immutable Vectors\", EPFL-REPORT-169879, September, 2011.\n\n  RRB-Trees build upon Clojure's PersistentVectors, adding logarithmic\n  time concatenation and slicing.\n\n  The main API entry points are clojure.core.rrb-vector/catvec,\n  performing vector concatenation, and clojure.core.rrb-vector/subvec,\n  which produces a new vector containing the appropriate subrange of\n  the input vector (in contrast to cljs.core/subvec, which returns a\n  view on the input vector).\n\n  The implementation allows for seamless interoperability with\n  cljs.core/PersistentVector and cljs.core.Subvec instances:\n  clojure.core.rrb-vector/catvec and clojure.core.rrb-vector/subvec\n  convert their inputs to clojure.core.rrb-vector.rrbt/Vector\n  instances whenever necessary (this is a very fast constant time\n  operation for PersistentVector; for Subvec it is O(log n), where n\n  is the size of the underlying vector).\n\n  clojure.core.rrb-vector also exports its own versions of vector and\n  vec which always produce clojure.core.rrb-vector.rrbt.Vector\n  instances.",["^ ","^6","MichaÅ‚ Marczyk"],["^18",["~:refer-clojure","~:exclude",["^N","^M","^O"]]],["^18",["^11",["^W","~:refer",["^14","^15"]],["^X","^1<",["^16"]],"^Y"]],["^18",["^12",["^J","^1<",["^I"]]]]]],"~:flags",["^ ","^11",["^L",[]],"^12",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^[","^Z","^W","^X","^Y"]],"^T","^Q","~:resource-id",["~:shadow.build.classpath/resource","clojure/core/rrb_vector.cljs"],"~:compiled-at",1699910696957,"^R",["^ ","^W","^W","^X","^X","^Y","^Y","^Z","^Z","^[","^[","^J","^J"],"~:resource-name","clojure/core/rrb_vector.cljs","~:warnings",[],"~:source","(ns clojure.core.rrb-vector\n\n  \"An implementation of the confluently persistent vector data\n  structure introduced in Bagwell, Rompf, \\\"RRB-Trees: Efficient\n  Immutable Vectors\\\", EPFL-REPORT-169879, September, 2011.\n\n  RRB-Trees build upon Clojure's PersistentVectors, adding logarithmic\n  time concatenation and slicing.\n\n  The main API entry points are clojure.core.rrb-vector/catvec,\n  performing vector concatenation, and clojure.core.rrb-vector/subvec,\n  which produces a new vector containing the appropriate subrange of\n  the input vector (in contrast to cljs.core/subvec, which returns a\n  view on the input vector).\n\n  The implementation allows for seamless interoperability with\n  cljs.core/PersistentVector and cljs.core.Subvec instances:\n  clojure.core.rrb-vector/catvec and clojure.core.rrb-vector/subvec\n  convert their inputs to clojure.core.rrb-vector.rrbt/Vector\n  instances whenever necessary (this is a very fast constant time\n  operation for PersistentVector; for Subvec it is O(log n), where n\n  is the size of the underlying vector).\n\n  clojure.core.rrb-vector also exports its own versions of vector and\n  vec which always produce clojure.core.rrb-vector.rrbt.Vector\n  instances.\"\n\n  {:author \"MichaÅ‚ Marczyk\"}\n\n  (:refer-clojure :exclude [vector vec subvec])\n  (:require [clojure.core.rrb-vector.protocols :refer [-slicev -splicev]]\n            [clojure.core.rrb-vector.rrbt :refer [-as-rrbt]]\n            clojure.core.rrb-vector.interop)\n  (:require-macros [clojure.core.rrb-vector.macros :refer [gen-vector-method]]))\n\n(defn catvec\n  \"Concatenates the given vectors in logarithmic time.\"\n  ([]\n     [])\n  ([v1]\n     v1)\n  ([v1 v2]\n     (-splicev v1 v2))\n  ([v1 v2 v3]\n     (-splicev (-splicev v1 v2) v3))\n  ([v1 v2 v3 v4]\n     (-splicev (-splicev v1 v2) (-splicev v3 v4)))\n  ([v1 v2 v3 v4 & vn]\n     (-splicev (-splicev (-splicev v1 v2) (-splicev v3 v4))\n               (apply catvec vn))))\n\n(defn subvec\n  \"Returns a new vector containing the elements of the given vector v\n  lying between the start (inclusive) and end (exclusive) indices in\n  logarithmic time. end defaults to end of vector. The resulting\n  vector shares structure with the original, but does not hold on to\n  any elements of the original vector lying outside the given index\n  range.\"\n  ([v start]\n     (-slicev v start (count v)))\n  ([v start end]\n     (-slicev v start end)))\n\n(defn vector\n  \"Creates a new vector containing the args.\"\n  ([]\n     (gen-vector-method))\n  ([x1]\n     (gen-vector-method x1))\n  ([x1 x2]\n     (gen-vector-method x1 x2))\n  ([x1 x2 x3]\n     (gen-vector-method x1 x2 x3))\n  ([x1 x2 x3 x4]\n     (gen-vector-method x1 x2 x3 x4))\n  ([x1 x2 x3 x4 & xn]\n     (into (vector x1 x2 x3 x4) xn)\n     #_\n     (loop [v  (vector x1 x2 x3 x4)\n            xn xn]\n       (if xn\n         (recur (-conj ^not-native v (first xn))\n                (next xn))\n         v))))\n\n(defn vec\n  \"Returns a vector containing the contents of coll.\n\n  If coll is a vector, returns an RRB vector using the internal tree\n  of coll.\"\n  [coll]\n  (if (vector? coll)\n    (-as-rrbt coll)\n    (apply vector coll)))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";AAmCA,AAAA;;;iCAAA,yCAAAA,1EAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,IAAAC,yBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,4BAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,KAAAC,qBAAA,AAAAJ,6BAAA,KAAA,IAAA;AAAA,AAAA,OAAAD,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAI;;;;;AAAA,CAAA,+DAAA,/DAAMJ;AAAN,AAAA;;;AAAA,CAAA,+DAAA,/DAAMA,0EAIFc;AAJJ,AAKKA;;;AALL,CAAA,+DAAA,/DAAMd,0EAMFc,GAAGC;AANP,AAOK,OAACC,2CAASF,GAAGC;;;AAPlB,CAAA,+DAAA,/DAAMf,0EAQFc,GAAGC,GAAGE;AARV,AASK,OAACD,2CAAS,AAACA,2CAASF,GAAGC,IAAIE;;;AAThC,CAAA,+DAAA,/DAAMjB,0EAUFc,GAAGC,GAAGE,GAAGC;AAVb,AAWK,OAACF,2CAAS,AAACA,2CAASF,GAAGC,IAAI,AAACC,2CAASC,GAAGC;;;AAX7C,AAAA,CAAA,sEAAA,tEAAMlB,iFAYFc,GAAGC,GAAGE,GAAGC,GAAKC;AAZlB,AAaK,OAACH,2CAAS,AAACA,2CAAS,AAACA,2CAASF,GAAGC,IAAI,AAACC,2CAASC,GAAGC,KACxC,AAACE,8CAAMpB,+BAAOmB;;;AAd7B;AAAA,CAAA,mDAAA,WAAAb,9DAAMN;AAAN,AAAA,IAAAO,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAI,WAAA,AAAAF,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAK,WAAA,AAAAH,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAM,WAAA,AAAAJ,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAO,qBAAA;AAAA,AAAA,OAAAA,wDAAAN,SAAAG,SAAAC,SAAAC,SAAAN;;;AAAA,CAAA,yDAAA,zDAAMN;;AAAN,AAgBA,AAAA;;;;;;;;iCAAA,yCAAAF,1EAAMwB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,+DAAA,/DAAMD,0EAOFE,EAAEC;AAPN,AAQK,OAACC,0CAAQF,EAAEC,MAAM,AAACE,gBAAMH;;;AAR7B,CAAA,+DAAA,/DAAMF,0EASFE,EAAEC,MAAMG;AATZ,AAUK,OAACF,0CAAQF,EAAEC,MAAMG;;;AAVtB,CAAA,yDAAA,zDAAMN;;AAAN,AAYA,AAAA;;;iCAAA,yCAAAxB,1EAAMgC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,IAAA7B,yBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,4BAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,KAAAC,qBAAA,AAAAJ,6BAAA,KAAA,IAAA;AAAA,AAAA,OAAA6B,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA1B;;;;;AAAA,CAAA,+DAAA,/DAAM0B;AAAN,AAGK,IAAAM,aAAA;AAAA,AAAA,YAAAC,oCAAA,EAAA,IAAA,AAAAC,sCAAAF,WAAA,KAAA;;;AAHL,CAAA,+DAAA,/DAAMN,0EAIFS;AAJJ,AAKK,IAAAC,aAAA,CAAA;AAAA,AAAA,CAAAA,WAAA,OAAmBD;;AAAnB,YAAAF,oCAAA,EAAA,IAAA,AAAAC,sCAAAE,WAAA,KAAA;;;AALL,CAAA,+DAAA,/DAAMV,0EAMFS,GAAGE;AANP,AAOK,IAAAC,aAAA,CAAA,KAAA;AAAA,AAAA,CAAAA,WAAA,OAAmBH;;AAAnB,CAAAG,WAAA,OAAsBD;;AAAtB,YAAAJ,oCAAA,EAAA,IAAA,AAAAC,sCAAAI,WAAA,KAAA;;;AAPL,CAAA,+DAAA,/DAAMZ,0EAQFS,GAAGE,GAAGE;AARV,AASK,IAAAC,aAAA,CAAA,KAAA,KAAA;AAAA,AAAA,CAAAA,WAAA,OAAmBL;;AAAnB,CAAAK,WAAA,OAAsBH;;AAAtB,CAAAG,WAAA,OAAyBD;;AAAzB,YAAAN,oCAAA,EAAA,IAAA,AAAAC,sCAAAM,WAAA,KAAA;;;AATL,CAAA,+DAAA,/DAAMd,0EAUFS,GAAGE,GAAGE,GAAGE;AAVb,AAWK,IAAAC,aAAA,CAAA,KAAA,KAAA,KAAA;AAAA,AAAA,CAAAA,WAAA,OAAmBP;;AAAnB,CAAAO,WAAA,OAAsBL;;AAAtB,CAAAK,WAAA,OAAyBH;;AAAzB,CAAAG,WAAA,OAA4BD;;AAA5B,YAAAR,oCAAA,EAAA,IAAA,AAAAC,sCAAAQ,WAAA,KAAA;;;AAXL,AAAA,CAAA,sEAAA,tEAAMhB,iFAYFS,GAAGE,GAAGE,GAAGE,GAAKE;AAZlB,AAaK,OAACC,6CAAK,AAACC,6DAAOV,GAAGE,GAAGE,GAAGE,IAAIE;;;AAbhC;AAAA,CAAA,mDAAA,WAAAhB,9DAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAxB,gBAAAuB;IAAAA,eAAA,AAAAtB,eAAAsB;IAAAE,WAAA,AAAAzB,gBAAAuB;IAAAA,eAAA,AAAAtB,eAAAsB;IAAAG,WAAA,AAAA1B,gBAAAuB;IAAAA,eAAA,AAAAtB,eAAAsB;IAAAI,WAAA,AAAA3B,gBAAAuB;IAAAA,eAAA,AAAAtB,eAAAsB;AAAA,AAAA,IAAAlB,qBAAA;AAAA,AAAA,OAAAA,wDAAAmB,SAAAC,SAAAC,SAAAC,SAAAJ;;;AAAA,CAAA,yDAAA,zDAAMD;;AAAN,AAsBA;;;;;;8BAAA,9BAAMoB,oEAKHC;AALH,AAME,GAAI,AAACC,wBAAQD;AACX,OAACE,sCAASF;;AACV,OAAC/B,8CAAMU,+BAAOqB","names",["var_args","G__32332","clojure.core.rrb-vector/catvec","args-arr__5794__auto__","len__5769__auto__","i__5770__auto__","argseq__5795__auto__","cljs.core/IndexedSeq","seq32327","G__32328","cljs.core/first","cljs.core/next","G__32329","G__32330","G__32331","self__5754__auto__","v1","v2","clojure.core.rrb-vector.protocols/-splicev","v3","v4","vn","cljs.core.apply","G__32361","clojure.core.rrb-vector/subvec","js/Error","v","start","clojure.core.rrb-vector.protocols/-slicev","cljs.core/count","end","G__32368","clojure.core.rrb-vector/vector","seq32363","G__32364","G__32365","G__32366","G__32367","arr__32369","clojure.core.rrb-vector.rrbt/Vector","cljs.core/PersistentVector","x1","arr__32370","x2","arr__32373","x3","arr__32376","x4","arr__32381","xn","cljs.core.into","clojure.core.rrb_vector.vector","clojure.core.rrb-vector/vec","coll","cljs.core/vector?","clojure.core.rrb-vector.rrbt/-as-rrbt"]],"~:used-vars",["^L",["~$cljs.core/vector?","~$cljs.core/IndexedSeq","~$clojure.core.rrb-vector/vector","~$cljs.core/count","~$cljs.core/apply","~$clojure.core.rrb-vector.protocols/-slicev","~$cljs.core/into","~$clojure.core.rrb-vector/subvec","~$cljs.core/PersistentVector","~$cljs.core/next","~$clojure.core.rrb-vector/catvec","~$clojure.core.rrb-vector.rrbt/-as-rrbt","~$clojure.core.rrb-vector.rrbt/Vector","~$cljs.core/first","~$clojure.core.rrb-vector.protocols/-splicev","~$js/Error","~$clojure.core.rrb-vector/vec"]]],"~:cache-keys",["~#cmap",[["^1A","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^[","~$goog.dom.HtmlElement"]]],["^1A","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1A","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2;","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^2<"]]],["^1A","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2;"]]],["^1A","clojure/core/rrb_vector/rrbt.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^Z","^W","~$clojure.core.rrb-vector.nodes","~$clojure.core.rrb-vector.trees","~$clojure.core.rrb-vector.transients"]]],["^1A","clojure/core/rrb_vector.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^Z","^W","^X","^Y"]]],["^1A","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","clojure/core/rrb_vector/trees.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^Z","^2C"]]],["^1A","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","clojure/core/rrb_vector/nodes.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^Z"]]],["^1A","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^29","^2<"]]],["^1A","clojure/core/rrb_vector/transients.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^Z","^2C","^2D"]]],["^1A","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2;"]]],"~:SHADOW-TIMESTAMP",[1698418133000,1698418133000,1698418125000],["^1A","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2;","~$goog.reflect"]]],["^1A","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2;","~$goog.fs.blob","^2?","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2A","^2B"]]],["^1A","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2A","~$goog.html.SafeUrl","^2B","^2;","^2<"]]],["^1A","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2;","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2I","~$goog.html.SafeStyle","^2K","^2@","~$goog.html.uncheckedconversions","^2A","^2<"]]],["^1A","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","~$goog.dom.TagName","^2;","~$goog.dom.element"]]],["^1A","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2A","^2I","^2P","~$goog.html.SafeStyleSheet","^2K","^2R","^2@","^2B","^2;","~$goog.labs.userAgent.browser","~$goog.array","~$goog.object","^2<","~$goog.dom.tags","^2J"]]],["^1A","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2W"]]],["^1A","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1A","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2V","^2;","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1A","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2:"]]],["^1A","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",[]]],["^1A","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2V","^2W"]]],["^1A","clojure/core/rrb_vector/interop.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^Z","^W","^X"]]],["^1A","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","~$goog.dom.safe","^2Q","^2A","^2<"]]],["^1A","clojure/core/rrb_vector/protocols.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^Z"]]],["^1A","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2<","^2>"]]],["^1A","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","~$goog.flags"]]],["^1A","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2Z","^2R"]]],["^1A","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2;","^2O","^2I","^2P","^2T","^2K","^2@","^2A","^2<"]]],["^1A","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","~$goog.math.Long","~$goog.math.Integer","^30","^2W","^2V","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1A","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2A","^2B","^2J","^2;"]]],["^1A","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2A","^2P","^2B","^2W","^2;","^2<"]]],["^1A","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2G"]]],["^1A","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2;","^30"]]],["^1A","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2;","^2B"]]]]],"~:clj-info",["^ ","jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/core.rrb-vector/0.1.1/core.rrb-vector-0.1.1.jar!/clojure/core/rrb_vector/macros.clj",1698418129000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1698418125000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","MichaÅ‚ Marczyk","^7","An implementation of the confluently persistent vector data\n  structure introduced in Bagwell, Rompf, \"RRB-Trees: Efficient\n  Immutable Vectors\", EPFL-REPORT-169879, September, 2011.\n\n  RRB-Trees build upon Clojure's PersistentVectors, adding logarithmic\n  time concatenation and slicing.\n\n  The main API entry points are clojure.core.rrb-vector/catvec,\n  performing vector concatenation, and clojure.core.rrb-vector/subvec,\n  which produces a new vector containing the appropriate subrange of\n  the input vector (in contrast to cljs.core/subvec, which returns a\n  view on the input vector).\n\n  The implementation allows for seamless interoperability with\n  cljs.core/PersistentVector and cljs.core.Subvec instances:\n  clojure.core.rrb-vector/catvec and clojure.core.rrb-vector/subvec\n  convert their inputs to clojure.core.rrb-vector.rrbt/Vector\n  instances whenever necessary (this is a very fast constant time\n  operation for PersistentVector; for Subvec it is O(log n), where n\n  is the size of the underlying vector).\n\n  clojure.core.rrb-vector also exports its own versions of vector and\n  vec which always produce clojure.core.rrb-vector.rrbt.Vector\n  instances.","^8","clojure/core/rrb_vector.cljs","^9",1,"^:",5,"^;",1,"^<",28],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",["^ ","^I","^J"],"^K",["^L",["^M","^N","^O"]],"^P","^Q","^R",["^ "],"^U",null,"^V",["^ ","^W","^W","^X","^X","^Y","^Y","^Z","^Z","^[","^["],"^10",["^L",["^11","^12"]],"~:shadow/js-access-global",["^L",["Error"]],"^13",["^ ","^14","^W","^15","^W","^16","^X"],"~:defs",["^ ","~$catvec",["^ ","~:protocol-inline",null,"^5",["^ ","^8","clojure/core/rrb_vector.cljs","^9",36,"^:",7,"^;",36,"^<",13,"~:arglists",["^18",["~$quote",["^18",[[],["~$v1"],["^45","~$v2"],["^45","^46","~$v3"],["^45","^46","^47","~$v4"],["^45","^46","^47","^48","~$&","~$vn"]]]]],"^7","Concatenates the given vectors in logarithmic time.","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",4,"~:max-fixed-arity",4,"~:method-params",[[],["^45"],["^45","^46"],["^45","^46","^47"],["^45","^46","^47","^48"]],"^43",["^18",[[],["^45"],["^45","^46"],["^45","^46","^47"],["^45","^46","^47","^48"],["^45","^46","^47","^48","~$&","^49"]]],"~:arglists-meta",["^18",[null,null,null,null,null,null]]]],"^P","^1W","^8","clojure/core/rrb_vector.cljs","^<",13,"^4:",["^ ","^4;",true,"^4<",4,"^4=",4,"^4>",[[],["^45"],["^45","^46"],["^45","^46","^47"],["^45","^46","^47","^48"]],"^43",["^18",[[],["^45"],["^45","^46"],["^45","^46","^47"],["^45","^46","^47","^48"],["^45","^46","^47","^48","~$&","^49"]]],"^4?",["^18",[null,null,null,null,null,null]]],"^4>",[[],["^45"],["^45","^46"],["^45","^46","^47"],["^45","^46","^47","^48"]],"~:protocol-impl",null,"^4<",4,"^4?",["^18",[null,null,null,null,null,null]],"^:",1,"~:root-source-info",["^ ","~:source-type","~:fragment","~:source-form",["^18",["~$defn","^41","Concatenates the given vectors in logarithmic time.",["^18",[[],[]]],["^18",[["^45"],"^45"]],["^18",[["^45","^46"],["^18",["^15","^45","^46"]]]],["^18",[["^45","^46","^47"],["^18",["^15",["^18",["^15","^45","^46"]],"^47"]]]],["^18",[["^45","^46","^47","^48"],["^18",["^15",["^18",["^15","^45","^46"]],["^18",["^15","^47","^48"]]]]]],["^18",[["^45","^46","^47","^48","~$&","^49"],["^18",["^15",["^18",["^15",["^18",["^15","^45","^46"]],["^18",["^15","^47","^48"]]]],["^18",["~$apply","^41","^49"]]]]]]]]],"^4;",true,"~:methods",[["^ ","^4<",0,"^4;",false,"~:tag","~$cljs.core/IVector"],["^ ","^4<",1,"^4;",false],["^ ","^4<",2,"^4;",false,"^4H","~$any"],["^ ","^4<",3,"^4;",false,"^4H","^4J"],["^ ","^4<",4,"^4;",false,"^4H","^4J"],["^ ","^4<",4,"^4;",true,"^4H","^4J"]],"^9",36,"^;",36,"^4=",4,"~:fn-var",true,"^43",["^18",[[],["^45"],["^45","^46"],["^45","^46","^47"],["^45","^46","^47","^48"],["^45","^46","^47","^48","~$&","^49"]]],"^7","Concatenates the given vectors in logarithmic time."],"^O",["^ ","^42",null,"^5",["^ ","^8","clojure/core/rrb_vector.cljs","^9",52,"^:",7,"^;",52,"^<",13,"^43",["^18",["^44",["^18",[["~$v","~$start"],["~$v","^4L","~$end"]]]]],"^7","Returns a new vector containing the elements of the given vector v\n  lying between the start (inclusive) and end (exclusive) indices in\n  logarithmic time. end defaults to end of vector. The resulting\n  vector shares structure with the original, but does not hold on to\n  any elements of the original vector lying outside the given index\n  range.","^4:",["^ ","^4;",false,"^4<",3,"^4=",3,"^4>",[["~$v","^4L"],["~$v","^4L","^4M"]],"^43",["^18",[["~$v","^4L"],["~$v","^4L","^4M"]]],"^4?",["^18",[null,null]]]],"^P","^1T","^8","clojure/core/rrb_vector.cljs","^<",13,"^4:",["^ ","^4;",false,"^4<",3,"^4=",3,"^4>",[["~$v","^4L"],["~$v","^4L","^4M"]],"^43",["^18",[["~$v","^4L"],["~$v","^4L","^4M"]]],"^4?",["^18",[null,null]]],"^4>",[["~$v","^4L"],["~$v","^4L","^4M"]],"^4@",null,"^4<",3,"^4?",["^18",[null,null]],"^:",1,"^4A",["^ ","^4B","^4C","^4D",["^18",["^4E","^O","Returns a new vector containing the elements of the given vector v\n  lying between the start (inclusive) and end (exclusive) indices in\n  logarithmic time. end defaults to end of vector. The resulting\n  vector shares structure with the original, but does not hold on to\n  any elements of the original vector lying outside the given index\n  range.",["^18",[["~$v","^4L"],["^18",["^14","~$v","^4L",["^18",["~$count","~$v"]]]]]],["^18",[["~$v","^4L","^4M"],["^18",["^14","~$v","^4L","^4M"]]]]]]],"^4;",false,"^4G",[["^ ","^4<",2,"^4;",false,"^4H","^4J"],["^ ","^4<",3,"^4;",false,"^4H","^4J"]],"^9",52,"^;",52,"^4=",3,"^4K",true,"^43",["^18",[["~$v","^4L"],["~$v","^4L","^4M"]]],"^7","Returns a new vector containing the elements of the given vector v\n  lying between the start (inclusive) and end (exclusive) indices in\n  logarithmic time. end defaults to end of vector. The resulting\n  vector shares structure with the original, but does not hold on to\n  any elements of the original vector lying outside the given index\n  range."],"^N",["^ ","^42",null,"^5",["^ ","^8","clojure/core/rrb_vector.cljs","^9",64,"^:",7,"^;",64,"^<",13,"^43",["^18",["^44",["^18",[[],["~$x1"],["^4O","~$x2"],["^4O","^4P","~$x3"],["^4O","^4P","^4Q","~$x4"],["^4O","^4P","^4Q","^4R","~$&","~$xn"]]]]],"^7","Creates a new vector containing the args.","^4:",["^ ","^4;",true,"^4<",4,"^4=",4,"^4>",[[],["^4O"],["^4O","^4P"],["^4O","^4P","^4Q"],["^4O","^4P","^4Q","^4R"]],"^43",["^18",[[],["^4O"],["^4O","^4P"],["^4O","^4P","^4Q"],["^4O","^4P","^4Q","^4R"],["^4O","^4P","^4Q","^4R","~$&","^4S"]]],"^4?",["^18",[null,null,null,null,null,null]]]],"^P","^1O","^8","clojure/core/rrb_vector.cljs","^<",13,"^4:",["^ ","^4;",true,"^4<",4,"^4=",4,"^4>",[[],["^4O"],["^4O","^4P"],["^4O","^4P","^4Q"],["^4O","^4P","^4Q","^4R"]],"^43",["^18",[[],["^4O"],["^4O","^4P"],["^4O","^4P","^4Q"],["^4O","^4P","^4Q","^4R"],["^4O","^4P","^4Q","^4R","~$&","^4S"]]],"^4?",["^18",[null,null,null,null,null,null]]],"^4>",[[],["^4O"],["^4O","^4P"],["^4O","^4P","^4Q"],["^4O","^4P","^4Q","^4R"]],"^4@",null,"^4<",4,"^4?",["^18",[null,null,null,null,null,null]],"^:",1,"^4A",["^ ","^4B","^4C","^4D",["^18",["^4E","^N","Creates a new vector containing the args.",["^18",[[],["^18",["^I"]]]],["^18",[["^4O"],["^18",["^I","^4O"]]]],["^18",[["^4O","^4P"],["^18",["^I","^4O","^4P"]]]],["^18",[["^4O","^4P","^4Q"],["^18",["^I","^4O","^4P","^4Q"]]]],["^18",[["^4O","^4P","^4Q","^4R"],["^18",["^I","^4O","^4P","^4Q","^4R"]]]],["^18",[["^4O","^4P","^4Q","^4R","~$&","^4S"],["^18",["~$into",["^18",["^N","^4O","^4P","^4Q","^4R"]],"^4S"]]]]]]],"^4;",true,"^4G",[["^ ","^4<",0,"^4;",false,"^4H","^1Y"],["^ ","^4<",1,"^4;",false,"^4H","^1Y"],["^ ","^4<",2,"^4;",false,"^4H","^1Y"],["^ ","^4<",3,"^4;",false,"^4H","^1Y"],["^ ","^4<",4,"^4;",false,"^4H","^1Y"],["^ ","^4<",4,"^4;",true,"^4H",["^L",[null,"~$clj","^4J"]]]],"^9",64,"^;",64,"^4=",4,"^4K",true,"^43",["^18",[[],["^4O"],["^4O","^4P"],["^4O","^4P","^4Q"],["^4O","^4P","^4Q","^4R"],["^4O","^4P","^4Q","^4R","~$&","^4S"]]],"^7","Creates a new vector containing the args."],"^M",["^ ","^42",null,"^5",["^ ","^8","clojure/core/rrb_vector.cljs","^9",86,"^:",7,"^;",86,"^<",10,"^43",["^18",["^44",["^18",[["~$coll"]]]]],"^7","Returns a vector containing the contents of coll.\n\n  If coll is a vector, returns an RRB vector using the internal tree\n  of coll."],"^P","^21","^8","clojure/core/rrb_vector.cljs","^<",10,"^4>",["^18",[["^4V"]]],"^4@",null,"^4?",["^18",[null,null]],"^:",1,"^4A",["^ ","^4B","^4C","^4D",["^18",["^4E","^M","Returns a vector containing the contents of coll.\n\n  If coll is a vector, returns an RRB vector using the internal tree\n  of coll.",["^4V"],["^18",["~$if",["^18",["~$vector?","^4V"]],["^18",["^16","^4V"]],["^18",["^4F","^N","^4V"]]]]]]],"^4;",false,"^9",86,"~:ret-tag","^4J","^;",86,"^4=",1,"^4K",true,"^43",["^18",["^44",["^18",[["^4V"]]]]],"^7","Returns a vector containing the contents of coll.\n\n  If coll is a vector, returns an RRB vector using the internal tree\n  of coll."]],"^12",["^ ","^J","^J","^Z","^Z"],"^1=",["^ ","^11",["^L",[]],"^12",["^L",[]]],"^1>",["^ "],"^1?",["^[","^Z","^W","^X","^Y"]],"^T","^Q","~:ns-specs",["^ "],"~:ns-spec-vars",["^L",[]],"~:compiler-options",["^23",[["^50","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^50","~:shadow-tweaks"],null,["^50","~:source-map-inline"],null,["^50","~:elide-asserts"],false,["^50","~:optimize-constants"],null,["^50","^1D"],null,["^50","~:external-config"],null,["^50","~:tooling-config"],null,["^50","~:emit-constants"],null,["^50","~:load-tests"],null,["^50","~:form-size-threshold"],null,["^50","~:global-goog-object&array"],null,["^50","~:data-readers"],null,["^50","~:infer-externs"],"~:auto",["^50","^1F"],null,["^52","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^50","~:fn-invoke-direct"],null,["^50","~:source-map"],"/dev/null"]]]