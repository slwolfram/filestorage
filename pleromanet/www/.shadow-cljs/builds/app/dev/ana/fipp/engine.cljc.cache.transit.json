["^ ","~:output",["^ ","~:js","goog.provide('fipp.engine');\nif((typeof fipp !== 'undefined') && (typeof fipp.engine !== 'undefined') && (typeof fipp.engine.serialize_node !== 'undefined')){\n} else {\nfipp.engine.serialize_node = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__32436 = cljs.core.get_global_hierarchy;\nreturn (fexpr__32436.cljs$core$IFn$_invoke$arity$0 ? fexpr__32436.cljs$core$IFn$_invoke$arity$0() : fexpr__32436.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"fipp.engine\",\"serialize-node\"),cljs.core.first,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\n}\nfipp.engine.serialize = (function fipp$engine$serialize(doc){\nif((doc == null)){\nreturn null;\n} else {\nif(cljs.core.seq_QMARK_(doc)){\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(fipp.engine.serialize,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([doc], 0));\n} else {\nif(typeof doc === 'string'){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),doc], null)], null);\n} else {\nif((doc instanceof cljs.core.Keyword)){\nreturn fipp.engine.serialize_node.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [doc], null));\n} else {\nif(cljs.core.vector_QMARK_(doc)){\nreturn fipp.engine.serialize_node.cljs$core$IFn$_invoke$arity$1(doc);\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Unexpected class for doc node\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"node\",\"node\",581201198),doc], null));\n\n}\n}\n}\n}\n}\n});\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),(function (p__32455){\nvar vec__32458 = p__32455;\nvar seq__32459 = cljs.core.seq(vec__32458);\nvar first__32460 = cljs.core.first(seq__32459);\nvar seq__32459__$1 = cljs.core.next(seq__32459);\nvar _ = first__32460;\nvar text = seq__32459__$1;\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,text)], null)], null);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"pass\",\"pass\",1574159993),(function (p__32489){\nvar vec__32490 = p__32489;\nvar seq__32491 = cljs.core.seq(vec__32490);\nvar first__32492 = cljs.core.first(seq__32491);\nvar seq__32491__$1 = cljs.core.next(seq__32491);\nvar _ = first__32492;\nvar text = seq__32491__$1;\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"pass\",\"pass\",1574159993),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,text)], null)], null);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"escaped\",\"escaped\",-1007929769),(function (p__32496){\nvar vec__32497 = p__32496;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32497,(0),null);\nvar text = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32497,(1),null);\nif(typeof text === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? text)\"));\n}\n\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"escaped\",\"escaped\",-1007929769),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),text], null)], null);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"span\",\"span\",1394872991),(function (p__32504){\nvar vec__32509 = p__32504;\nvar seq__32510 = cljs.core.seq(vec__32509);\nvar first__32511 = cljs.core.first(seq__32510);\nvar seq__32510__$1 = cljs.core.next(seq__32510);\nvar _ = first__32511;\nvar children = seq__32510__$1;\nreturn fipp.engine.serialize(children);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"line\",\"line\",212345235),(function (p__32516){\nvar vec__32517 = p__32516;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32517,(0),null);\nvar inline = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32517,(1),null);\nvar terminate = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32517,(2),null);\nvar inline__$1 = (function (){var or__5045__auto__ = inline;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn \" \";\n}\n})();\nvar terminate__$1 = (function (){var or__5045__auto__ = terminate;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn \"\";\n}\n})();\nif(typeof inline__$1 === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? inline)\"));\n}\n\nif(typeof terminate__$1 === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? terminate)\"));\n}\n\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"inline\",\"inline\",1399884222),inline__$1,new cljs.core.Keyword(null,\"terminate\",\"terminate\",1256003496),terminate__$1], null)], null);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"break\",\"break\",126570225),(function() { \nvar G__32582__delegate = function (_){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"break\",\"break\",126570225)], null)], null);\n};\nvar G__32582 = function (var_args){\nvar _ = null;\nif (arguments.length > 0) {\nvar G__32583__i = 0, G__32583__a = new Array(arguments.length -  0);\nwhile (G__32583__i < G__32583__a.length) {G__32583__a[G__32583__i] = arguments[G__32583__i + 0]; ++G__32583__i;}\n  _ = new cljs.core.IndexedSeq(G__32583__a,0,null);\n} \nreturn G__32582__delegate.call(this,_);};\nG__32582.cljs$lang$maxFixedArity = 0;\nG__32582.cljs$lang$applyTo = (function (arglist__32584){\nvar _ = cljs.core.seq(arglist__32584);\nreturn G__32582__delegate(_);\n});\nG__32582.cljs$core$IFn$_invoke$arity$variadic = G__32582__delegate;\nreturn G__32582;\n})()\n);\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"group\",\"group\",582596132),(function (p__32522){\nvar vec__32523 = p__32522;\nvar seq__32524 = cljs.core.seq(vec__32523);\nvar first__32525 = cljs.core.first(seq__32524);\nvar seq__32524__$1 = cljs.core.next(seq__32524);\nvar _ = first__32525;\nvar children = seq__32524__$1;\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319)], null)], null),fipp.engine.serialize(children),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"end\",\"end\",-268185958)], null)], null)], 0));\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"nest\",\"nest\",-314993663),(function (p__32527){\nvar vec__32528 = p__32527;\nvar seq__32529 = cljs.core.seq(vec__32528);\nvar first__32530 = cljs.core.first(seq__32529);\nvar seq__32529__$1 = cljs.core.next(seq__32529);\nvar _ = first__32530;\nvar args = seq__32529__$1;\nvar vec__32531 = ((typeof cljs.core.first(args) === 'number')?args:cljs.core.cons((2),args));\nvar seq__32532 = cljs.core.seq(vec__32531);\nvar first__32533 = cljs.core.first(seq__32532);\nvar seq__32532__$1 = cljs.core.next(seq__32532);\nvar offset = first__32533;\nvar children = seq__32532__$1;\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"nest\",\"nest\",-314993663),new cljs.core.Keyword(null,\"offset\",\"offset\",296498311),offset], null)], null),fipp.engine.serialize(children),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"outdent\",\"outdent\",467209411)], null)], null)], 0));\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"align\",\"align\",1964212802),(function (p__32534){\nvar vec__32535 = p__32534;\nvar seq__32536 = cljs.core.seq(vec__32535);\nvar first__32537 = cljs.core.first(seq__32536);\nvar seq__32536__$1 = cljs.core.next(seq__32536);\nvar _ = first__32537;\nvar args = seq__32536__$1;\nvar vec__32538 = ((typeof cljs.core.first(args) === 'number')?args:cljs.core.cons((0),args));\nvar seq__32539 = cljs.core.seq(vec__32538);\nvar first__32540 = cljs.core.first(seq__32539);\nvar seq__32539__$1 = cljs.core.next(seq__32539);\nvar offset = first__32540;\nvar children = seq__32539__$1;\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"align\",\"align\",1964212802),new cljs.core.Keyword(null,\"offset\",\"offset\",296498311),offset], null)], null),fipp.engine.serialize(children),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"outdent\",\"outdent\",467209411)], null)], null)], 0));\n}));\n/**\n * A transducer which annotates the right-side of nodes assuming a\n *   hypothetical single-line formatting of the document. Groups and indentation\n *   directives are temporarily assumed to be zero-width. These values are used\n *   by subsequent passes to produce the final layout.\n */\nfipp.engine.annotate_rights = (function fipp$engine$annotate_rights(rf){\nvar pos = cljs.core.volatile_BANG_((0));\nreturn (function() {\nvar G__32590 = null;\nvar G__32590__0 = (function (){\nreturn (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));\n});\nvar G__32590__1 = (function (res){\nreturn (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(res) : rf.call(null,res));\n});\nvar G__32590__2 = (function (res,node){\nvar delta = (function (){var G__32543 = new cljs.core.Keyword(null,\"op\",\"op\",-1882987955).cljs$core$IFn$_invoke$arity$1(node);\nvar G__32543__$1 = (((G__32543 instanceof cljs.core.Keyword))?G__32543.fqn:null);\nswitch (G__32543__$1) {\ncase \"text\":\nreturn cljs.core.count(new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(node));\n\nbreak;\ncase \"line\":\nreturn cljs.core.count(new cljs.core.Keyword(null,\"inline\",\"inline\",1399884222).cljs$core$IFn$_invoke$arity$1(node));\n\nbreak;\ncase \"escaped\":\nreturn (1);\n\nbreak;\ndefault:\nreturn (0);\n\n}\n})();\nvar p = pos.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(pos.cljs$core$IDeref$_deref$arity$1(null) + delta));\nvar G__32545 = res;\nvar G__32546 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(null,\"right\",\"right\",-452581833),p);\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__32545,G__32546) : rf.call(null,G__32545,G__32546));\n});\nG__32590 = function(res,node){\nswitch(arguments.length){\ncase 0:\nreturn G__32590__0.call(this);\ncase 1:\nreturn G__32590__1.call(this,res);\ncase 2:\nreturn G__32590__2.call(this,res,node);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__32590.cljs$core$IFn$_invoke$arity$0 = G__32590__0;\nG__32590.cljs$core$IFn$_invoke$arity$1 = G__32590__1;\nG__32590.cljs$core$IFn$_invoke$arity$2 = G__32590__2;\nreturn G__32590;\n})()\n});\nfipp.engine.update_right = (function fipp$engine$update_right(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___32592 = arguments.length;\nvar i__5770__auto___32593 = (0);\nwhile(true){\nif((i__5770__auto___32593 < len__5769__auto___32592)){\nargs__5775__auto__.push((arguments[i__5770__auto___32593]));\n\nvar G__32594 = (i__5770__auto___32593 + (1));\ni__5770__auto___32593 = G__32594;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((2) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((2)),(0),null)):null);\nreturn fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5776__auto__);\n});\n\n(fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic = (function (deque,f,args){\nreturn fipp.deque.conjr(cljs.core.pop(deque),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,cljs.core.peek(deque),args));\n}));\n\n(fipp.engine.update_right.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(fipp.engine.update_right.cljs$lang$applyTo = (function (seq32547){\nvar G__32548 = cljs.core.first(seq32547);\nvar seq32547__$1 = cljs.core.next(seq32547);\nvar G__32549 = cljs.core.first(seq32547__$1);\nvar seq32547__$2 = cljs.core.next(seq32547__$1);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__32548,G__32549,seq32547__$2);\n}));\n\n/**\n * Given printing options, returns a transducer which annotate the right-side\n *   of groups on their :begin nodes.  This includes the pruning algorithm which\n *   will annotate some :begin nodes as being :too-far to the right without\n *   calculating their exact sizes.\n */\nfipp.engine.annotate_begins = (function fipp$engine$annotate_begins(p__32552){\nvar map__32553 = p__32552;\nvar map__32553__$1 = cljs.core.__destructure_map(map__32553);\nvar options = map__32553__$1;\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32553__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nreturn (function (rf){\nvar pos = cljs.core.volatile_BANG_((0));\nvar bufs = cljs.core.volatile_BANG_(fipp.deque.empty);\nreturn (function() {\nvar G__32595 = null;\nvar G__32595__0 = (function (){\nreturn (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));\n});\nvar G__32595__1 = (function (res){\nreturn (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(res) : rf.call(null,res));\n});\nvar G__32595__2 = (function (res,p__32560){\nvar map__32561 = p__32560;\nvar map__32561__$1 = cljs.core.__destructure_map(map__32561);\nvar node = map__32561__$1;\nvar op = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32561__$1,new cljs.core.Keyword(null,\"op\",\"op\",-1882987955));\nvar right = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32561__$1,new cljs.core.Keyword(null,\"right\",\"right\",-452581833));\nvar buffers = cljs.core.deref(bufs);\nif(cljs.core.empty_QMARK_(buffers)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(op,new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319))){\nvar position_STAR_ = (right + width);\nvar buffer = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),position_STAR_,new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805),fipp.deque.empty], null);\ncljs.core.vreset_BANG_(pos,position_STAR_);\n\ncljs.core.vreset_BANG_(bufs,(fipp.deque.create.cljs$core$IFn$_invoke$arity$1 ? fipp.deque.create.cljs$core$IFn$_invoke$arity$1(buffer) : fipp.deque.create.call(null,buffer)));\n\nreturn res;\n} else {\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res,node) : rf.call(null,res,node));\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(op,new cljs.core.Keyword(null,\"end\",\"end\",-268185958))){\nvar buffer = cljs.core.peek(buffers);\nvar buffers_STAR_ = cljs.core.pop(buffers);\nvar begin = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319),new cljs.core.Keyword(null,\"right\",\"right\",-452581833),right], null);\nvar nodes = fipp.deque.conjlr(begin,new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805).cljs$core$IFn$_invoke$arity$1(buffer),node);\nif(cljs.core.empty_QMARK_(buffers_STAR_)){\ncljs.core.vreset_BANG_(pos,(0));\n\ncljs.core.vreset_BANG_(bufs,fipp.deque.empty);\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf,res,nodes);\n} else {\nif(cljs.core.vector_QMARK_(buffers_STAR_)){\n} else {\nthrow (new Error(\"Assert failed: (vector? buffers*)\"));\n}\n\nif(cljs.core.vector_QMARK_(nodes)){\n} else {\nthrow (new Error(\"Assert failed: (vector? nodes)\"));\n}\n\ncljs.core.vreset_BANG_(bufs,fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic(buffers_STAR_,cljs.core.update_in,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805)], null),fipp.deque.concat,nodes], 0)));\n\nreturn res;\n}\n} else {\nvar buffers_STAR_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(op,new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319)))?fipp.deque.conjr(buffers,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),(right + width),new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805),fipp.deque.empty], null)):fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic(buffers,cljs.core.update_in,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805)], null),fipp.deque.conjr,node], 0)));\nvar res__$1 = res;\nwhile(true){\nif((((right <= cljs.core.deref(pos))) && ((cljs.core.count(buffers_STAR_) <= width)))){\ncljs.core.vreset_BANG_(bufs,buffers_STAR_);\n\nreturn res__$1;\n} else {\nvar buffer = cljs.core.first(buffers_STAR_);\nvar buffers_STAR__STAR_ = fipp.deque.popl(buffers_STAR_);\nvar begin = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319),new cljs.core.Keyword(null,\"right\",\"right\",-452581833),new cljs.core.Keyword(null,\"too-far\",\"too-far\",85800617)], null);\nvar res_STAR_ = (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res__$1,begin) : rf.call(null,res__$1,begin));\nvar res_STAR___$1 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf,res_STAR_,new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805).cljs$core$IFn$_invoke$arity$1(buffer));\nif(cljs.core.empty_QMARK_(buffers_STAR__STAR_)){\ncljs.core.vreset_BANG_(pos,(0));\n\ncljs.core.vreset_BANG_(bufs,fipp.deque.empty);\n\nreturn res_STAR___$1;\n} else {\ncljs.core.vreset_BANG_(pos,new cljs.core.Keyword(null,\"position\",\"position\",-2011731912).cljs$core$IFn$_invoke$arity$1(cljs.core.first(buffers_STAR__STAR_)));\n\nvar G__32601 = buffers_STAR__STAR_;\nvar G__32602 = res_STAR___$1;\nbuffers_STAR_ = G__32601;\nres__$1 = G__32602;\ncontinue;\n}\n}\nbreak;\n}\n}\n}\n});\nG__32595 = function(res,p__32560){\nswitch(arguments.length){\ncase 0:\nreturn G__32595__0.call(this);\ncase 1:\nreturn G__32595__1.call(this,res);\ncase 2:\nreturn G__32595__2.call(this,res,p__32560);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__32595.cljs$core$IFn$_invoke$arity$0 = G__32595__0;\nG__32595.cljs$core$IFn$_invoke$arity$1 = G__32595__1;\nG__32595.cljs$core$IFn$_invoke$arity$2 = G__32595__2;\nreturn G__32595;\n})()\n});\n});\n/**\n * Given printing options, returns a transducer which produces the fully\n *   laid-out strings.\n */\nfipp.engine.format_nodes = (function fipp$engine$format_nodes(p__32562){\nvar map__32563 = p__32562;\nvar map__32563__$1 = cljs.core.__destructure_map(map__32563);\nvar options = map__32563__$1;\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32563__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nreturn (function (rf){\nvar fits = cljs.core.volatile_BANG_((0));\nvar length = cljs.core.volatile_BANG_(width);\nvar tab_stops = cljs.core.volatile_BANG_(cljs.core.list((0)));\nvar column = cljs.core.volatile_BANG_((0));\nreturn (function() {\nvar G__32603 = null;\nvar G__32603__0 = (function (){\nreturn (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));\n});\nvar G__32603__1 = (function (res){\nreturn (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(res) : rf.call(null,res));\n});\nvar G__32603__2 = (function (res,p__32564){\nvar map__32565 = p__32564;\nvar map__32565__$1 = cljs.core.__destructure_map(map__32565);\nvar node = map__32565__$1;\nvar op = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32565__$1,new cljs.core.Keyword(null,\"op\",\"op\",-1882987955));\nvar right = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32565__$1,new cljs.core.Keyword(null,\"right\",\"right\",-452581833));\nvar indent = cljs.core.peek(cljs.core.deref(tab_stops));\nvar format_text = (function (text,width__$1){\nvar res_STAR_ = (((cljs.core.deref(column) === (0)))?(function (){\ncolumn.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(column.cljs$core$IDeref$_deref$arity$1(null) + indent));\n\nvar G__32566 = res;\nvar G__32567 = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(indent,\" \"));\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__32566,G__32567) : rf.call(null,G__32566,G__32567));\n})()\n:res);\ncolumn.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(column.cljs$core$IDeref$_deref$arity$1(null) + width__$1));\n\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res_STAR_,text) : rf.call(null,res_STAR_,text));\n});\nvar G__32568 = op;\nvar G__32568__$1 = (((G__32568 instanceof cljs.core.Keyword))?G__32568.fqn:null);\nswitch (G__32568__$1) {\ncase \"text\":\nvar text = new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(node);\nreturn format_text(text,cljs.core.count(text));\n\nbreak;\ncase \"escaped\":\nreturn format_text(new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(node),(1));\n\nbreak;\ncase \"pass\":\nreturn format_text(new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(node),(0));\n\nbreak;\ncase \"line\":\nif((cljs.core.deref(fits) === (0))){\ncljs.core.vreset_BANG_(length,((right + width) - indent));\n\ncljs.core.vreset_BANG_(column,(0));\n\nvar G__32569 = res;\nvar G__32570 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"terminate\",\"terminate\",1256003496).cljs$core$IFn$_invoke$arity$1(node)),\"\\n\"].join('');\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__32569,G__32570) : rf.call(null,G__32569,G__32570));\n} else {\nvar inline = new cljs.core.Keyword(null,\"inline\",\"inline\",1399884222).cljs$core$IFn$_invoke$arity$1(node);\ncolumn.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(column.cljs$core$IDeref$_deref$arity$1(null) + cljs.core.count(inline)));\n\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res,inline) : rf.call(null,res,inline));\n}\n\nbreak;\ncase \"break\":\ncljs.core.vreset_BANG_(length,((right + width) - indent));\n\ncljs.core.vreset_BANG_(column,(0));\n\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res,\"\\n\") : rf.call(null,res,\"\\n\"));\n\nbreak;\ncase \"nest\":\ntab_stops.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(tab_stops.cljs$core$IDeref$_deref$arity$1(null),(indent + new cljs.core.Keyword(null,\"offset\",\"offset\",296498311).cljs$core$IFn$_invoke$arity$1(node))));\n\nreturn res;\n\nbreak;\ncase \"align\":\ntab_stops.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(tab_stops.cljs$core$IDeref$_deref$arity$1(null),(cljs.core.deref(column) + new cljs.core.Keyword(null,\"offset\",\"offset\",296498311).cljs$core$IFn$_invoke$arity$1(node))));\n\nreturn res;\n\nbreak;\ncase \"outdent\":\ntab_stops.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,cljs.core.pop(tab_stops.cljs$core$IDeref$_deref$arity$1(null)));\n\nreturn res;\n\nbreak;\ncase \"begin\":\ncljs.core.vreset_BANG_(fits,(((cljs.core.deref(fits) > (0)))?(cljs.core.deref(fits) + (1)):((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(right,new cljs.core.Keyword(null,\"too-far\",\"too-far\",85800617)))?(0):(((right <= cljs.core.deref(length)))?(1):(0)\n))));\n\nreturn res;\n\nbreak;\ncase \"end\":\ncljs.core.vreset_BANG_(fits,(function (){var x__5130__auto__ = (0);\nvar y__5131__auto__ = (cljs.core.deref(fits) - (1));\nreturn ((x__5130__auto__ > y__5131__auto__) ? x__5130__auto__ : y__5131__auto__);\n})());\n\nreturn res;\n\nbreak;\ndefault:\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Unexpected node op\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"node\",\"node\",581201198),node], null));\n\n}\n});\nG__32603 = function(res,p__32564){\nswitch(arguments.length){\ncase 0:\nreturn G__32603__0.call(this);\ncase 1:\nreturn G__32603__1.call(this,res);\ncase 2:\nreturn G__32603__2.call(this,res,p__32564);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__32603.cljs$core$IFn$_invoke$arity$0 = G__32603__0;\nG__32603.cljs$core$IFn$_invoke$arity$1 = G__32603__1;\nG__32603.cljs$core$IFn$_invoke$arity$2 = G__32603__2;\nreturn G__32603;\n})()\n});\n});\nfipp.engine.print_fns = (function fipp$engine$print_fns(options){\nvar map__32572 = options;\nvar map__32572__$1 = cljs.core.__destructure_map(map__32572);\nvar print_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__32572__$1,new cljs.core.Keyword(null,\"print-fn\",\"print-fn\",-1720960489),cljs.core._STAR_print_fn_STAR_);\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"print\",\"print\",1299562414),print_fn,new cljs.core.Keyword(null,\"println\",\"println\",1920840330),(function (){\nvar _STAR_print_fn_STAR__orig_val__32573 = cljs.core._STAR_print_fn_STAR_;\nvar _STAR_print_fn_STAR__temp_val__32574 = print_fn;\n(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__temp_val__32574);\n\ntry{return cljs.core.println();\n}finally {(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__orig_val__32573);\n}})], null);\n});\nfipp.engine.pprint_document = (function fipp$engine$pprint_document(var_args){\nvar G__32576 = arguments.length;\nswitch (G__32576) {\ncase 1:\nreturn fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$1 = (function (document){\nreturn fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$2(document,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$2 = (function (document,options){\nvar options__$1 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"width\",\"width\",-384071477),(70)], null),options], 0));\nvar map__32577 = fipp.engine.print_fns(options__$1);\nvar map__32577__$1 = cljs.core.__destructure_map(map__32577);\nvar print = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32577__$1,new cljs.core.Keyword(null,\"print\",\"print\",1299562414));\nvar println = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32577__$1,new cljs.core.Keyword(null,\"println\",\"println\",1920840330));\ncljs.core.run_BANG_(print,cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([fipp.engine.annotate_rights,fipp.engine.annotate_begins(options__$1),fipp.engine.format_nodes(options__$1),fipp.engine.serialize(document)], 0)));\n\nreturn (println.cljs$core$IFn$_invoke$arity$0 ? println.cljs$core$IFn$_invoke$arity$0() : println.call(null));\n}));\n\n(fipp.engine.pprint_document.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing","~:file","fipp/engine.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$fipp.engine","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$fipp.deque","^Q","~$deque","^Q","~$cljs.core","^S","~$goog","^T"],"~:seen",["^I",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^S","^S"],"~:form",["~#list",["~$ns","^K","See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing",["^Z",["^V",["^Q","~:as","^R"]]]]],"~:flags",["^ ","^V",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^T","^S","^Q"]],"^N","^K","~:resource-id",["~:shadow.build.classpath/resource","fipp/engine.cljc"],"~:compiled-at",1699910697077,"^L",["^ ","^Q","^Q","^R","^Q","^S","^S","^T","^T"],"~:resource-name","fipp/engine.cljc","~:warnings",[],"~:source","(ns fipp.engine\n  \"See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing\"\n  (:require [fipp.deque :as deque])\n  #?(:clj (:import (java.io Writer))))\n\n\n;;; Serialize document into a stream\n\n(defmulti serialize-node first)\n\n(defn serialize [doc]\n  (cond\n    (nil? doc) nil\n    (seq? doc) (mapcat serialize doc)\n    (string? doc) [{:op :text, :text doc}]\n    (keyword? doc) (serialize-node [doc])\n    (vector? doc) (serialize-node doc)\n    :else (throw (ex-info \"Unexpected class for doc node\" {:node doc}))))\n\n;; Primitives\n;; See doc/primitives.md for details.\n\n(defmethod serialize-node :text [[_ & text]]\n  [{:op :text, :text (apply str text)}])\n\n(defmethod serialize-node :pass [[_ & text]]\n  [{:op :pass, :text (apply str text)}])\n\n(defmethod serialize-node :escaped [[_ text]]\n  (assert (string? text))\n  [{:op :escaped, :text text}])\n\n(defmethod serialize-node :span [[_ & children]]\n  (serialize children))\n\n(defmethod serialize-node :line [[_ inline terminate]]\n  (let [inline (or inline \" \")\n        terminate (or terminate \"\")]\n    (assert (string? inline))\n    (assert (string? terminate))\n    [{:op :line, :inline inline, :terminate terminate}]))\n\n(defmethod serialize-node :break [& _]\n  [{:op :break}])\n\n(defmethod serialize-node :group [[_ & children]]\n  (concat [{:op :begin}] (serialize children) [{:op :end}]))\n\n(defmethod serialize-node :nest [[_ & args]]\n  (let [[offset & children] (if (number? (first args))\n                              args\n                              (cons 2 args))]\n    (concat [{:op :nest, :offset offset}]\n            (serialize children)\n            [{:op :outdent}])))\n\n(defmethod serialize-node :align [[_ & args]]\n  (let [[offset & children] (if (number? (first args))\n                             args\n                             (cons 0 args))]\n    (concat [{:op :align, :offset offset}]\n            (serialize children)\n            [{:op :outdent}])))\n\n\n\n(defn annotate-rights\n  \"A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout.\"\n  [rf]\n  (let [pos (volatile! 0)]\n    (fn\n      ([] (rf))\n      ([res] (rf res))\n      ([res node]\n       (let [delta (case (:op node)\n                     :text (count (:text node))\n                     :line (count (:inline node))\n                     :escaped 1\n                     0)\n             p (vswap! pos + delta)]\n         (rf res (assoc node :right p)))))))\n\n\n\n(defn update-right [deque f & args]\n  (deque/conjr (pop deque) (apply f (peek deque) args)))\n\n(defn annotate-begins\n  \"Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes.\"\n  [{:keys [width] :as options}]\n  (fn [rf]\n    (let [pos (volatile! 0)\n          bufs (volatile! deque/empty)]\n      (fn\n        ([] (rf))\n        ([res] (rf res))\n        ([res {:keys [op right] :as node}]\n         (let [buffers @bufs]\n           (if (empty? buffers)\n             (if (= op :begin)\n               ;; Buffer groups\n               (let [position* (+ right width)\n                     buffer {:position position* :nodes deque/empty}]\n                 (vreset! pos position*)\n                 (vreset! bufs (deque/create buffer))\n                 res)\n               ;; Emit unbuffered\n               (rf res node))\n             (if (= op :end)\n               ;; Pop buffer\n               (let [buffer (peek buffers)\n                     buffers* (pop buffers)\n                     begin {:op :begin :right right}\n                     nodes (deque/conjlr begin (:nodes buffer) node)]\n                 (if (empty? buffers*)\n                   (do\n                     (vreset! pos 0)\n                     (vreset! bufs deque/empty)\n                     (reduce rf res nodes))\n                   (do\n                     (assert (vector? buffers*))\n                     (assert (vector? nodes))\n                     (vreset! bufs (update-right buffers* update-in [:nodes]\n                                                 deque/concat nodes))\n                     res)))\n               ;; Pruning lookahead\n               (loop [buffers* (if (= op :begin)\n                                 (deque/conjr buffers\n                                              {:position (+ right width)\n                                               :nodes deque/empty})\n                                 (update-right buffers update-in [:nodes]\n                                               deque/conjr node))\n                      res res]\n                 (if (and (<= right @pos) (<= (count buffers*) width))\n                   ;; Not too far\n                   (do (vreset! bufs buffers*)\n                       res)\n                   ;; Too far\n                   (let [buffer (first buffers*)\n                         buffers** (deque/popl buffers*)\n                         begin {:op :begin, :right :too-far}\n                         res* (rf res begin)\n                         res* (reduce rf res* (:nodes buffer))]\n                     (if (empty? buffers**)\n                       ;; Root buffered group\n                       (do\n                         (vreset! pos 0)\n                         (vreset! bufs deque/empty)\n                         res*)\n                       ;; Interior group\n                       (do\n                         (vreset! pos (:position (first buffers**)))\n                         (recur buffers** res*))))))\n            ))))))))\n\n\n(defn format-nodes\n  \"Given printing options, returns a transducer which produces the fully\n  laid-out strings.\"\n  [{:keys [width] :as options}]\n  (fn [rf]\n    (let [fits (volatile! 0)\n          length (volatile! width)\n          tab-stops (volatile! '(0)) ; Technically, an unbounded stack...\n          column (volatile! 0)]\n      (fn\n        ([] (rf))\n        ([res] (rf res))\n        ([res {:keys [op right] :as node}]\n         (let [indent (peek @tab-stops)\n               format-text (fn [text width]\n                             (let [res* (if (zero? @column)\n                                          (do (vswap! column + indent)\n                                              (rf res (apply str (repeat indent \\space))))\n                                          res)]\n                               (vswap! column + width)\n                               (rf res* text)))]\n           (case op\n             :text\n               (let [text (:text node)]\n                 (format-text text (count text)))\n\n             :escaped\n               (format-text (:text node) 1)\n\n             :pass\n               (format-text (:text node) 0)\n\n             :line\n               (if (zero? @fits)\n                 (do\n                   (vreset! length (- (+ right width) indent))\n                   (vreset! column 0)\n                   (rf res (str (:terminate node) \"\\n\")))\n                 (let [inline (:inline node)]\n                   (vswap! column + (count inline))\n                   (rf res inline)))\n             :break\n               (do\n                 (vreset! length (- (+ right width) indent))\n                 (vreset! column 0)\n                 (rf res \"\\n\"))\n             :nest\n               (do (vswap! tab-stops conj (+ indent (:offset node)))\n                   res)\n             :align\n               (do (vswap! tab-stops conj (+ @column (:offset node)))\n                   res)\n             :outdent\n               (do (vswap! tab-stops pop)\n                   res)\n             :begin\n               (do (vreset! fits (cond\n                                   (pos? @fits) (inc @fits)\n                                   (= right :too-far) 0\n                                   (<= right @length) 1\n                                   :else 0))\n                   res)\n             :end\n               (do (vreset! fits (max 0 (dec @fits)))\n                   res)\n             (throw (ex-info \"Unexpected node op\" {:node node}))))\n         )))))\n\n\n(defn print-fns\n  [options]\n  #?(:clj (let [{:keys [^Writer writer] :or {writer *out*}} options]\n            {:print #(.write writer ^String %)\n             :println (fn []\n                        (binding [*out* writer]\n                          (println)))})\n     :cljs (let [{:keys [print-fn] :or {print-fn *print-fn*}} options]\n             {:print print-fn\n              :println (fn []\n                         (binding [*print-fn* print-fn]\n                           (println)))})))\n\n\n(defn pprint-document\n  ([document]\n   (pprint-document document {}))\n  ([document options]\n   (let [options (merge {:width 70} options)\n         {:keys [print println]} (print-fns options)]\n     (->> (serialize document)\n          (eduction\n            annotate-rights\n            (annotate-begins options)\n            (format-nodes options))\n          (run! print))\n     (println))))\n\n\n(comment\n\n  (defn dbg [x]\n    (println \"DBG:\")\n    (clojure.pprint/pprint x)\n    (println \"----\")\n    x)\n\n  (serialize \"apple\")\n  (serialize [:text \"apple\" \"ball\"])\n  (serialize [:span \"apple\" [:group \"ball\" :line \"cat\"]])\n  (serialize [:span \"apple\" [:line \",\"] \"ball\"])\n\n  (def doc1 [:group \"A\" :line [:group \"B\" :line \"C\"]])\n  (def doc2 [:group \"A\" :line [:nest 2 \"B\" :line \"C\"] :line \"D\"])\n  (def doc3 [:group \"A\" :line\n             [:nest 2 \"B-XYZ\" [:align -3 :line \"C\"]] :line \"D\"])\n\n  (serialize doc1)\n\n  (let [options {:width 3}]\n    (->> doc3\n         serialize\n         (into [] (comp\n                    annotate-rights\n                    (annotate-begins options)\n                    (format-nodes options)\n                    ))\n         ;(run! print)\n         clojure.pprint/pprint\n         )\n    ;nil\n    )\n\n  ;; test of :pass op\n  (do\n    (pprint-document\n      [:group \"AB\" :line \"B\" :line \"C\"]\n      {:width 6}) \n    (println \"--\")\n    (pprint-document\n      [:group \"<AB>\" :line \"B\" :line \"C\"]\n      {:width 6}) \n    (println \"--\")\n    (pprint-document\n      [:group [:pass \"<\"] \"AB\" [:pass \">\"] :line \"B\" :line \"C\"]\n      {:width 6}))\n\n  (def ex1\n    [:group \"[\"\n        [:nest 2\n            [:line \"\"] \"0,\"\n            :line \"1,\"\n            :line \"2,\"\n            :line \"3\"\n            [:line \"\"]]\n        \"]\"])\n\n  (pprint-document ex1 {:width 20})\n  (pprint-document ex1 {:width 6})\n\n  (def ex2\n    [:span \"[\"\n        [:align\n            [:group [:line \"\"]] \"0,\"\n            [:group :line] \"1,\"\n            [:group :line] \"2,\"\n            [:group :line] \"3\"]\n        \"]\"])\n\n  (pprint-document ex2 {:width 20})\n  (pprint-document ex2 {:width 6})\n\n)\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["js/fipp","js/fipp.engine","js/fipp.engine.serialize-node","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__32436","cljs.core/MultiFn","cljs.core.symbol","fipp.engine/serialize-node","cljs.core/first","fipp.engine/serialize","doc","cljs.core/seq?","cljs.core.mapcat","cljs.core/Keyword","cljs.core/vector?","cljs.core.ex_info","p__32455","vec__32458","seq__32459","cljs.core/seq","first__32460","cljs.core/next","_","text","cljs.core.apply","cljs.core/str","p__32489","vec__32490","seq__32491","first__32492","p__32496","vec__32497","cljs.core.nth","js/Error","p__32504","vec__32509","seq__32510","first__32511","children","p__32516","vec__32517","inline","terminate","or__5045__auto__","p__32522","vec__32523","seq__32524","first__32525","cljs.core.concat","p__32527","vec__32528","seq__32529","first__32530","args","vec__32531","seq__32532","first__32533","offset","cljs.core/cons","p__32534","vec__32535","seq__32536","first__32537","vec__32538","seq__32539","first__32540","fipp.engine/annotate-rights","rf","pos","cljs.core/volatile!","res","node","delta","G__32543","cljs.core/count","p","G__32545","G__32546","cljs.core.assoc","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","fipp.engine/update-right","seq32547","G__32548","G__32549","self__5754__auto__","deque","f","fipp.deque/conjr","cljs.core/pop","cljs.core/peek","p__32552","map__32553","cljs.core/--destructure-map","fipp.engine/annotate-begins","width","options","bufs","fipp.deque/empty","p__32560","map__32561","op","right","cljs.core/deref","buffers","cljs.core/empty?","cljs.core._EQ_","position*","buffer","cljs.core/vreset!","fipp.deque/create","buffers*","begin","nodes","fipp.deque/conjlr","cljs.core.reduce","fipp.engine.update_right","cljs.core/update-in","fipp.deque/concat","buffers**","fipp.deque/popl","res*","p__32562","map__32563","fipp.engine/format-nodes","fits","length","tab-stops","column","p__32564","map__32565","indent","format-text","G__32566","G__32567","cljs.core.repeat","G__32568","G__32569","G__32570","cljs.core.conj","x__5130__auto__","y__5131__auto__","fipp.engine/print-fns","map__32572","print-fn","cljs.core/*print-fn*","*print-fn*-orig-val__32573","*print-fn*-temp-val__32574","cljs.core/println","G__32576","fipp.engine/pprint-document","document","fipp.engine.pprint_document","map__32577","cljs.core.merge","print","println","cljs.core.eduction","cljs.core/run!"]],"~:used-vars",["^I",["~$cljs.core/mapcat","~$cljs.core/--destructure-map","~$cljs.core/str","~$cljs.core/MultiFn","~$cljs.core/vector?","~$cljs.core/=","~$cljs.core/IndexedSeq","~$cljs.core/-deref","~$fipp.engine/print-fns","~$fipp.deque/conjlr","~$cljs.core/count","~$cljs.core/deref","~$fipp.deque/conjr","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$cljs.core/Keyword","~$js/fipp.engine.serialize-node","~$cljs.core/vreset!","~$fipp.engine/serialize-node","~$cljs.core/atom","~$cljs.core/concat","~$cljs.core/pop","~$cljs.core/empty?","~$fipp.deque/popl","~$js/fipp.engine","~$cljs.core/conj","~$cljs.core/run!","~$cljs.core/peek","~$cljs.core/volatile!","~$fipp.engine/pprint-document","~$cljs.core/-add-method","~$cljs.core/get","~$js/fipp","~$cljs.core/-vreset!","~$cljs.core/symbol","~$fipp.engine/format-nodes","~$fipp.deque/concat","~$cljs.core/nth","~$cljs.core/ex-info","~$fipp.engine/serialize","~$cljs.core/println","~$fipp.engine/update-right","~$fipp.engine/annotate-rights","~$cljs.core/next","~$cljs.core/*print-fn*","~$cljs.core/cons","~$cljs.core/assoc","~$fipp.deque/create","~$cljs.core/repeat","~$cljs.core/first","~$cljs.core/seq?","~$cljs.core/eduction","~$cljs.core/merge","~$cljs.core/update-in","~$fipp.deque/empty","~$js/Error","~$fipp.engine/annotate-begins"]]],"~:cache-keys",["~#cmap",[["^15","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^T","~$goog.dom.HtmlElement"]]],["^15","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T"]]],["^15","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^15","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^2X","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^2Y"]]],["^15","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^2X"]]],["^15","clojure/core/rrb_vector/rrbt.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^S","~$clojure.core.rrb-vector.protocols","~$clojure.core.rrb-vector.nodes","~$clojure.core.rrb-vector.trees","~$clojure.core.rrb-vector.transients"]]],["^15","clojure/core/rrb_vector.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^S","^34","~$clojure.core.rrb-vector.rrbt","~$clojure.core.rrb-vector.interop"]]],["^15","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T"]]],["^15","clojure/core/rrb_vector/trees.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^S","^35"]]],["^15","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T"]]],["^15","clojure/core/rrb_vector/nodes.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^S"]]],["^15","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T"]]],["^15","fipp/deque.cljc"],["c3dab4003e436d9133e8194afe57d1aea8cfcb4d","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^S","~$clojure.core.rrb-vector"]]],["^15","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^2V","^2Y"]]],["^15","fipp/engine.cljc"],["c3dab4003e436d9133e8194afe57d1aea8cfcb4d","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^S","^Q"]]],["^15","clojure/core/rrb_vector/transients.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^S","^35","^36"]]],["^15","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T"]]],["^15","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T"]]],["^15","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^2X"]]],"~:SHADOW-TIMESTAMP",[1698418133000,1698418133000,1698418125000],["^15","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^2X","~$goog.reflect"]]],["^15","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^2X","~$goog.fs.blob","^30","~$goog.html.SafeScript","~$goog.html.trustedtypes","^32","^33"]]],["^15","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T"]]],["^15","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T"]]],["^15","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^32","~$goog.html.SafeUrl","^33","^2X","^2Y"]]],["^15","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^2X","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3>","~$goog.html.SafeStyle","^3@","^31","~$goog.html.uncheckedconversions","^32","^2Y"]]],["^15","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","~$goog.dom.TagName","^2X","~$goog.dom.element"]]],["^15","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^32","^3>","^3E","~$goog.html.SafeStyleSheet","^3@","^3G","^31","^33","^2X","~$goog.labs.userAgent.browser","~$goog.array","~$goog.object","^2Y","~$goog.dom.tags","^3?"]]],["^15","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^3L"]]],["^15","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T"]]],["^15","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^15","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^3K","^2X","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^15","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^2W"]]],["^15","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T"]]],["^15","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T"]]],["^15","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",[]]],["^15","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^3K","^3L"]]],["^15","clojure/core/rrb_vector/interop.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^S","^34","^38"]]],["^15","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","~$goog.dom.safe","^3F","^32","^2Y"]]],["^15","clojure/core/rrb_vector/protocols.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^S"]]],["^15","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T"]]],["^15","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^2Y","^2["]]],["^15","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T"]]],["^15","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","~$goog.flags"]]],["^15","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^3O","^3G"]]],["^15","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^2X","^3D","^3>","^3E","^3I","^3@","^31","^32","^2Y"]]],["^15","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T"]]],["^15","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","~$goog.math.Long","~$goog.math.Integer","^3Q","^3L","^3K","~$goog.Uri","~$goog.string.StringBuffer"]]],["^15","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^32","^33","^3?","^2X"]]],["^15","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^32","^3E","^33","^3L","^2X","^2Y"]]],["^15","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^3<"]]],["^15","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^2X","^3Q"]]],["^15","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2Q",["^ ","^2R",null,"^2S",["^I",[]],"^2T",["^T","^2X","^33"]]]]],"~:clj-info",["^ ","jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/core.rrb-vector/0.1.1/core.rrb-vector-0.1.1.jar!/clojure/core/rrb_vector/macros.clj",1698418129000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1698418125000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1698418124000,"jar:file:/home/laurens/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1698418125000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing","^7","fipp/engine.cljc","^8",1,"^9",5,"^:",1,"^;",16],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",[]],"^J","^K","^L",["^ "],"^O",null,"^P",["^ ","^Q","^Q","^R","^Q","^S","^S","^T","^T"],"^U",["^I",["^V"]],"~:shadow/js-access-global",["^I",["Error"]],"^W",null,"~:defs",["^ ","~$serialize-node",["^ ","^5",["^ ","^7","fipp/engine.cljc","^8",10,"^9",11,"^:",10,"^;",25],"^J","^1T","^7","fipp/engine.cljc","^;",25,"^9",1,"~:root-source-info",["^ ","~:source-type","~:fragment","~:source-form",["^Z",["~$defmulti","^4R","~$first"]]],"^8",10,"^:",10,"~:tag","^1D"],"~$serialize",["^ ","~:protocol-inline",null,"^5",["^ ","^7","fipp/engine.cljc","^8",12,"^9",7,"^:",12,"^;",16,"~:arglists",["^Z",["~$quote",["^Z",[["~$doc"]]]]]],"^J","^2=","^7","fipp/engine.cljc","^;",16,"~:method-params",["^Z",[["^52"]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^9",1,"^4S",["^ ","^4T","^4U","^4V",["^Z",["~$defn","^4Z",["^52"],["^Z",["~$cond",["^Z",["~$nil?","^52"]],null,["^Z",["~$seq?","^52"]],["^Z",["~$mapcat","^4Z","^52"]],["^Z",["~$string?","^52"]],[["^ ","^M","~:text","^5<","^52"]],["^Z",["~$keyword?","^52"]],["^Z",["^4R",["^52"]]],["^Z",["~$vector?","^52"]],["^Z",["^4R","^52"]],"~:else",["^Z",["~$throw",["^Z",["~$ex-info","Unexpected class for doc node",["^ ","~:node","^52"]]]]]]]]]],"~:variadic?",false,"^8",12,"~:ret-tag",["^I",["~$cljs.core/IVector","~$any","~$clj-nil"]],"^:",12,"~:max-fixed-arity",1,"~:fn-var",true,"^50",["^Z",["^51",["^Z",[["^52"]]]]]],"~$annotate-rights",["^ ","^4[",null,"^5",["^ ","^7","fipp/engine.cljc","^8",68,"^9",7,"^:",68,"^;",22,"^50",["^Z",["^51",["^Z",[["~$rf"]]]]],"^6","A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout."],"^J","^2@","^7","fipp/engine.cljc","^;",22,"^53",["^Z",[["^5K"]]],"^54",null,"^55",["^Z",[null,null]],"^9",1,"^4S",["^ ","^4T","^4U","^4V",["^Z",["^56","^5J","A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout.",["^5K"],["^Z",["~$let",["~$pos",["^Z",["~$volatile!",0]]],["^Z",["~$fn",["^Z",[[],["^Z",["^5K"]]]],["^Z",[["~$res"],["^Z",["^5K","^5P"]]]],["^Z",[["^5P","~$node"],["^Z",["^5L",["~$delta",["^Z",["~$case",["^Z",["^M","^5Q"]],"^5<",["^Z",["~$count",["^Z",["^5<","^5Q"]]]],"^8",["^Z",["^5T",["^Z",["~:inline","^5Q"]]]],"~:escaped",1,0]],"~$p",["^Z",["~$vswap!","^5M","~$+","^5R"]]],["^Z",["^5K","^5P",["^Z",["~$assoc","^5Q","~:right","~$p"]]]]]]]]]]]]]]],"^5C",false,"^8",68,"^5D","~$function","^:",68,"^5H",1,"^5I",true,"^50",["^Z",["^51",["^Z",[["^5K"]]]]],"^6","A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout."],"~$update-right",["^ ","^4[",null,"^5",["^ ","^7","fipp/engine.cljc","^8",89,"^9",7,"^:",89,"^;",19,"^50",["^Z",["^51",["^Z",[["^R","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","^5C",true,"~:fixed-arity",2,"^5H",2,"^53",[["^Z",["^R","~$f","^60"]]],"^50",["^Z",[["^R","~$f","~$&","^60"]]],"^55",["^Z",[null]]]],"^J","^2?","^7","fipp/engine.cljc","^;",19,"^61",["^ ","^5C",true,"^62",2,"^5H",2,"^53",[["^Z",["^R","~$f","^60"]]],"^50",["^Z",[["^R","~$f","~$&","^60"]]],"^55",["^Z",[null]]],"^53",[["^Z",["^R","~$f","^60"]]],"^54",null,"^62",2,"^55",["^Z",[null]],"^9",1,"^4S",["^ ","^4T","^4U","^4V",["^Z",["^56","^5[",["^R","~$f","~$&","^60"],["^Z",["~$deque/conjr",["^Z",["~$pop","^R"]],["^Z",["~$apply","~$f",["^Z",["~$peek","^R"]],"^60"]]]]]]],"^5C",true,"~:methods",[["^ ","^62",2,"^5C",true,"^4Y","^5F"]],"^8",89,"^5D","^5F","^:",89,"^5H",2,"^5I",true,"^50",["^Z",[["^R","~$f","~$&","^60"]]]],"~$annotate-begins",["^ ","^4[",null,"^5",["^ ","^7","fipp/engine.cljc","^8",92,"^9",7,"^:",92,"^;",22,"^50",["^Z",["^51",["^Z",[[["^ ","~:keys",["~$width"],"^10","~$options"]]]]]],"^6","Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes."],"^J","^2N","^7","fipp/engine.cljc","^;",22,"^53",["^Z",[["~$p__32552"]]],"^54",null,"^55",["^Z",[null,null]],"^9",1,"^4S",["^ ","^4T","^4U","^4V",["^Z",["^56","^68","Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes.",[["^ ","^69",["^6:"],"^10","^6;"]],["^Z",["^5O",["^5K"],["^Z",["^5L",["^5M",["^Z",["^5N",0]],"~$bufs",["^Z",["^5N","~$deque/empty"]]],["^Z",["^5O",["^Z",[[],["^Z",["^5K"]]]],["^Z",[["^5P"],["^Z",["^5K","^5P"]]]],["^Z",[["^5P",["^ ","^69",["~$op","~$right"],"^10","^5Q"]],["^Z",["^5L",["~$buffers",["^Z",["~$clojure.core/deref","^6="]]],["^Z",["~$if",["^Z",["~$empty?","^6A"]],["^Z",["^6C",["^Z",["~$=","^6?","~:begin"]],["^Z",["^5L",["~$position*",["^Z",["~$+","^6@","^6:"]],"~$buffer",["^ ","~:position","^6F","~:nodes","^6>"]],["^Z",["~$vreset!","^5M","^6F"]],["^Z",["^6J","^6=",["^Z",["~$deque/create","^6G"]]]],"^5P"]],["^Z",["^5K","^5P","^5Q"]]]],["^Z",["^6C",["^Z",["~$=","^6?","~:end"]],["^Z",["^5L",["^6G",["^Z",["^66","^6A"]],"~$buffers*",["^Z",["^64","^6A"]],"~$begin",["^ ","^M","^6E","^5Y","^6@"],"~$nodes",["^Z",["~$deque/conjlr","^6N",["^Z",["^6I","^6G"]],"^5Q"]]],["^Z",["^6C",["^Z",["^6D","^6M"]],["^Z",["~$do",["^Z",["^6J","^5M",0]],["^Z",["^6J","^6=","^6>"]],["^Z",["~$reduce","^5K","^5P","^6O"]]]],["^Z",["^6Q",["^Z",["~$assert",["^Z",["^5>","^6M"]]]],["^Z",["^6S",["^Z",["^5>","^6O"]]]],["^Z",["^6J","^6=",["^Z",["^5[","^6M","~$update-in",["^6I"],"~$deque/concat","^6O"]]]],"^5P"]]]]]],["^Z",["~$loop",["^6M",["^Z",["^6C",["^Z",["~$=","^6?","^6E"]],["^Z",["^63","^6A",["^ ","^6H",["^Z",["~$+","^6@","^6:"]],"^6I","^6>"]]],["^Z",["^5[","^6A","^6T",["^6I"],"^63","^5Q"]]]],"^5P","^5P"],["^Z",["^6C",["^Z",["~$and",["^Z",["~$<=","^6@",["^Z",["^6B","^5M"]]]],["^Z",["^6X",["^Z",["^5T","^6M"]],"^6:"]]]],["^Z",["^6Q",["^Z",["^6J","^6=","^6M"]],"^5P"]],["^Z",["^5L",["^6G",["^Z",["^4X","^6M"]],"~$buffers**",["^Z",["~$deque/popl","^6M"]],"^6N",["^ ","^M","^6E","^5Y","~:too-far"],"~$res*",["^Z",["^5K","^5P","^6N"]],"^70",["^Z",["^6R","^5K","^70",["^Z",["^6I","^6G"]]]]],["^Z",["^6C",["^Z",["^6D","^6Y"]],["^Z",["^6Q",["^Z",["^6J","^5M",0]],["^Z",["^6J","^6=","^6>"]],"^70"]],["^Z",["^6Q",["^Z",["^6J","^5M",["^Z",["^6H",["^Z",["^4X","^6Y"]]]]]],["^Z",["~$recur","^6Y","^70"]]]]]]]]]]]]]]]]]]]]]]]]]]]]],"^5C",false,"^8",92,"^5D","^5Z","^:",92,"^5H",1,"^5I",true,"^50",["^Z",["^51",["^Z",[[["^ ","^69",["^6:"],"^10","^6;"]]]]]],"^6","Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes."],"~$format-nodes",["^ ","^4[",null,"^5",["^ ","^7","fipp/engine.cljc","^8",164,"^9",7,"^:",164,"^;",19,"^50",["^Z",["^51",["^Z",[[["^ ","^69",["^6:"],"^10","^6;"]]]]]],"^6","Given printing options, returns a transducer which produces the fully\n  laid-out strings."],"^J","^29","^7","fipp/engine.cljc","^;",19,"^53",["^Z",[["~$p__32562"]]],"^54",null,"^55",["^Z",[null,null]],"^9",1,"^4S",["^ ","^4T","^4U","^4V",["^Z",["^56","^72","Given printing options, returns a transducer which produces the fully\n  laid-out strings.",[["^ ","^69",["^6:"],"^10","^6;"]],["^Z",["^5O",["^5K"],["^Z",["^5L",["~$fits",["^Z",["^5N",0]],"~$length",["^Z",["^5N","^6:"]],"~$tab-stops",["^Z",["^5N",["^Z",["^51",["^Z",[0]]]]]],"~$column",["^Z",["^5N",0]]],["^Z",["^5O",["^Z",[[],["^Z",["^5K"]]]],["^Z",[["^5P"],["^Z",["^5K","^5P"]]]],["^Z",[["^5P",["^ ","^69",["^6?","^6@"],"^10","^5Q"]],["^Z",["^5L",["~$indent",["^Z",["^66",["^Z",["^6B","^76"]]]],"~$format-text",["^Z",["^5O",["~$text","^6:"],["^Z",["^5L",["^70",["^Z",["^6C",["^Z",["~$zero?",["^Z",["^6B","^77"]]]],["^Z",["^6Q",["^Z",["^5W","^77","~$+","^78"]],["^Z",["^5K","^5P",["^Z",["^65","~$str",["^Z",["~$repeat","^78","~c "]]]]]]]],"^5P"]]],["^Z",["^5W","^77","~$+","^6:"]],["^Z",["^5K","^70","^7:"]]]]]]],["^Z",["^5S","^6?","^5<",["^Z",["^5L",["^7:",["^Z",["^5<","^5Q"]]],["^Z",["^79","^7:",["^Z",["^5T","^7:"]]]]]],"^5V",["^Z",["^79",["^Z",["^5<","^5Q"]],1]],"~:pass",["^Z",["^79",["^Z",["^5<","^5Q"]],0]],"^8",["^Z",["^6C",["^Z",["^7;",["^Z",["^6B","^74"]]]],["^Z",["^6Q",["^Z",["^6J","^75",["^Z",["~$-",["^Z",["~$+","^6@","^6:"]],"^78"]]]],["^Z",["^6J","^77",0]],["^Z",["^5K","^5P",["^Z",["^7<",["^Z",["~:terminate","^5Q"]],"\n"]]]]]],["^Z",["^5L",["~$inline",["^Z",["^5U","^5Q"]]],["^Z",["^5W","^77","~$+",["^Z",["^5T","^7@"]]]],["^Z",["^5K","^5P","^7@"]]]]]],"~:break",["^Z",["^6Q",["^Z",["^6J","^75",["^Z",["~$-",["^Z",["~$+","^6@","^6:"]],"^78"]]]],["^Z",["^6J","^77",0]],["^Z",["^5K","^5P","\n"]]]],"~:nest",["^Z",["^6Q",["^Z",["^5W","^76","~$conj",["^Z",["~$+","^78",["^Z",["~:offset","^5Q"]]]]]],"^5P"]],"~:align",["^Z",["^6Q",["^Z",["^5W","^76","^7C",["^Z",["~$+",["^Z",["^6B","^77"]],["^Z",["^7D","^5Q"]]]]]],"^5P"]],"~:outdent",["^Z",["^6Q",["^Z",["^5W","^76","^64"]],"^5P"]],"^6E",["^Z",["^6Q",["^Z",["^6J","^74",["^Z",["^57",["^Z",["~$pos?",["^Z",["^6B","^74"]]]],["^Z",["~$inc",["^Z",["^6B","^74"]]]],["^Z",["~$=","^6@","^6["]],0,["^Z",["^6X","^6@",["^Z",["^6B","^75"]]]],1,"^5?",0]]]],"^5P"]],"^6L",["^Z",["^6Q",["^Z",["^6J","^74",["^Z",["~$max",0,["^Z",["~$dec",["^Z",["^6B","^74"]]]]]]]],"^5P"]],["^Z",["^5@",["^Z",["^5A","Unexpected node op",["^ ","^5B","^5Q"]]]]]]]]]]]]]]]]]]]],"^5C",false,"^8",164,"^5D","^5Z","^:",164,"^5H",1,"^5I",true,"^50",["^Z",["^51",["^Z",[[["^ ","^69",["^6:"],"^10","^6;"]]]]]],"^6","Given printing options, returns a transducer which produces the fully\n  laid-out strings."],"~$print-fns",["^ ","^4[",null,"^5",["^ ","^7","fipp/engine.cljc","^8",233,"^9",7,"^:",233,"^;",16,"^50",["^Z",["^51",["^Z",[["^6;"]]]]]],"^J","^1I","^7","fipp/engine.cljc","^;",16,"^53",["^Z",[["^6;"]]],"^54",null,"^55",["^Z",[null,null]],"^9",1,"^4S",["^ ","^4T","^4U","^4V",["^Z",["^56","^7K",["^6;"],["^Z",["^5L",[["^ ","^69",["~$print-fn"],"~:or",["^ ","^7L","~$*print-fn*"]],"^6;"],["^ ","~:print","^7L","~:println",["^Z",["^5O",[],["^Z",["~$binding",["^7N","^7L"],["^Z",["~$println"]]]]]]]]]]]],"^5C",false,"^8",233,"^5D","~$cljs.core/IMap","^:",233,"^5H",1,"^5I",true,"^50",["^Z",["^51",["^Z",[["^6;"]]]]]],"~$pprint-document",["^ ","^4[",null,"^5",["^ ","^7","fipp/engine.cljc","^8",247,"^9",7,"^:",247,"^;",22,"^50",["^Z",["^51",["^Z",[["~$document"],["^7U","^6;"]]]]],"^61",["^ ","^5C",false,"^62",2,"^5H",2,"^53",[["^7U"],["^7U","^6;"]],"^50",["^Z",[["^7U"],["^7U","^6;"]]],"^55",["^Z",[null,null]]]],"^J","^23","^7","fipp/engine.cljc","^;",22,"^61",["^ ","^5C",false,"^62",2,"^5H",2,"^53",[["^7U"],["^7U","^6;"]],"^50",["^Z",[["^7U"],["^7U","^6;"]]],"^55",["^Z",[null,null]]],"^53",[["^7U"],["^7U","^6;"]],"^54",null,"^62",2,"^55",["^Z",[null,null]],"^9",1,"^4S",["^ ","^4T","^4U","^4V",["^Z",["^56","^7T",["^Z",[["^7U"],["^Z",["^7T","^7U",["^ "]]]]],["^Z",[["^7U","^6;"],["^Z",["^5L",["^6;",["^Z",["~$merge",["^ ","~:width",70],"^6;"]],["^ ","^69",["~$print","^7R"]],["^Z",["^7K","^6;"]]],["^Z",["~$->>",["^Z",["^4Z","^7U"]],["^Z",["~$eduction","^5J",["^Z",["^68","^6;"]],["^Z",["^72","^6;"]]]],["^Z",["~$run!","^7X"]]]],["^Z",["^7R"]]]]]]]]],"^5C",false,"^67",[["^ ","^62",1,"^5C",false,"^4Y","^5F"],["^ ","^62",2,"^5C",false,"^4Y","^5F"]],"^8",247,"^:",247,"^5H",2,"^5I",true,"^50",["^Z",[["^7U"],["^7U","^6;"]]]]],"^X",["^ ","^S","^S"],"~:cljs.analyzer/constants",["^ ","^U",["^I",["^7B","^7E","^7F","~:group","^5?","^7D","~:default","^7?","^6[","^7P","^7W","^M","^5B","^7O","^6E","^7A","^6I","^8","~:print-fn","^5Y","^5V","^6H","^7>","^6L","~:hierarchy","^5U","^5<","~:span"]],"~:order",["^84","^82","^M","^5<","^5?","^5B","^7>","^5V","^85","^8","^5U","^7?","^7A","^81","^6E","^6L","^7B","^7D","^7F","^7E","^5Y","^7W","^6H","^6I","^6[","^83","^7O","^7P"]],"^11",["^ ","^V",["^I",[]]],"^12",["^ "],"^13",["^T","^S","^Q"]],"^N","^K","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^2P",[["^89","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^89","~:shadow-tweaks"],null,["^89","~:source-map-inline"],null,["^89","~:elide-asserts"],false,["^89","~:optimize-constants"],null,["^89","^18"],null,["^89","~:external-config"],null,["^89","~:tooling-config"],null,["^89","~:emit-constants"],null,["^89","~:load-tests"],null,["^89","~:form-size-threshold"],null,["^89","~:global-goog-object&array"],null,["^89","~:data-readers"],null,["^89","~:infer-externs"],"~:auto",["^89","^1:"],null,["^8;","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^89","~:fn-invoke-direct"],null,["^89","~:source-map"],"/dev/null"]]]