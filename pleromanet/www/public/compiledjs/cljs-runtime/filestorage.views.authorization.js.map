{"version":3,"sources":["filestorage/views/authorization.cljs"],"mappings":"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","names":["filestorage.views.authorization/password-box","pw","s","reagent.core.atom","p1__27149#","cljs.core/deref","cljs.core.pr_str","cljs.core.swap_BANG_","cljs.core/assoc","filestorage.views.authorization/header","filestorage.views.authorization/check-nil-then-predicate","value","predicate","filestorage.views.authorization/valid-email?","email","arg","cljs.core/boolean","cljs.core/first","cljs.core/re-seq","filestorage.views.authorization/eight-or-more-characters?","word","cljs.core/count","filestorage.views.authorization/has-special-character?","filestorage.views.authorization/has-number?","filestorage.views.authorization/valid-password?","password","and__5043__auto__","filestorage.views.authorization/prompt-message","message","filestorage.views.authorization/input-and-prompt","label-value","input-name","input-type","input-element-arg","prompt-element","required?","input-focus","filestorage.views.common/input-element","filestorage.views.authorization/email-form","email-address-atom","filestorage.views.authorization/name-form","name-atom","filestorage.views.authorization/password-requirements","requirements","cljs.core.filter","req","cljs.core/not","G__27161","fexpr__27160","cljs.core.doall","cljs.core.map","filestorage.views.authorization/password-form","password-type-atom","filestorage.views.authorization/password-form-noval","filestorage.views.authorization/wrap-as-element-in-form","element","filestorage.views.authorization/submit-registration","email-address","name","errors","e","js/console.log","cljs.core/reset!","data","ajax.core.POST","r","fexpr__27172","filestorage.db/app-state","reitit.frontend.easy.push_state","fexpr__27173","cljs.core/contains?","cljs.core.get","filestorage.views.authorization/registration-form","filestorage.views.authorization/submit-login","fexpr__27178","filestorage.views.authorization/login-form"],"sourcesContent":["(ns filestorage.views.authorization\n  (:require [reagent.core :as r]\n            ;;[re-frame.core :as rfc]\n            [reitit.frontend.easy :as rfe]\n            ;;[accountant.core :as accountant]\n            [ajax.core :refer [GET POST]]\n            [filestorage.db :as db]\n            [filestorage.views.common :refer [input-element]]\n            ;;[filestorage.subscriptions :as subs]\n            ;;[filestorage.events :as events]\n            ))\n\n(defn password-box [pw]\n  (let [s (r/atom {:value pw})]\n    (fn []\n      [:form\n       (pr-str @s) [:br]\n\n       [:input {:type :password\n                :value (:value @s)\n                :on-change #(swap! s assoc :value (-> % .-target .-value))}] [:br]])))\n\n(defn header []\n  [:div\n   [:h1 {:style {:margin \"0 0 0 0\"}} \"pleroma|net\"]\n   ;;[password-box \"\"]\n   ])\n(defn check-nil-then-predicate\n  \"Check if the value is nil, then apply the predicate\"\n  [value predicate]\n  (if (nil? value)\n    false\n    (predicate value)))\n\n(defn valid-email?\n  [email]\n  (check-nil-then-predicate email (fn [arg] (boolean (first (re-seq #\"\\w+@\\w+.\\w+\" arg))))))\n\n(defn eight-or-more-characters?\n  [word]\n  (check-nil-then-predicate word (fn [arg] (> (count arg) 7))))\n\n(defn has-special-character?\n  [word]\n  (check-nil-then-predicate word (fn [arg] (boolean (first (re-seq #\"\\W+\" arg))))))\n\n(defn has-number?\n  [word]\n  (check-nil-then-predicate word (fn [arg] (boolean (re-seq #\"\\d+\" arg)))))\n\n(defn valid-password?\n  [password]\n  (and (eight-or-more-characters? password) (has-special-character? password) (has-number? password)))\n\n(defn prompt-message\n  \"A prompt that will animate to help the user with a given input\"\n  [message]\n  [:div {:class \"my-messages\"}\n   ;;[:div {:class \"prompt message-animation\"} [:p message]]\n   ])\n\n(defn input-and-prompt\n  \"Creates an input box and a prompt box that appears above the input when the input comes into focus. Also throws in a little required message\"\n  [label-value input-name input-type input-element-arg prompt-element required?]\n  (let [input-focus (r/atom false)]\n    (fn []\n      [:div\n       [:label label-value]\n       (if @input-focus prompt-element [:div])\n       [input-element input-name input-name input-type input-element-arg input-focus]\n       ;;(if (and required? (= \"\" @input-element-arg))\n       ;;  [:div \"Field is required!\"]\n       ;;  [:div])\n       ])))\n\n(defn email-form [email-address-atom]\n  (input-and-prompt \"email\"\n                    \"email\"\n                    \"email\"\n                    email-address-atom\n                    (prompt-message \"What's your email address?\")\n                    true))\n\n(defn name-form [name-atom]\n  (input-and-prompt \"name\"\n                    \"name\"\n                    \"text\"\n                    name-atom\n                    (prompt-message \"What's your name?\")\n                    true))\n\n(defn password-requirements\n  \"A list to describe which password requirements have been met so far\"\n  [password requirements]\n  [:div\n   [:ul (->> requirements\n             (filter (fn [req] (not ((:check-fn req) @password))))\n             (doall)\n             (map (fn [req] ^{:key req} [:li {:style {:color \"red\"}} (:message req)])))]])\n\n(defn password-form\n  [password]\n  (let [password-type-atom (r/atom \"password\")]\n    (fn []\n      [:div\n       [(input-and-prompt \"password\"\n                          \"password\"\n                          @password-type-atom\n                          password\n                          (prompt-message \"What's your password\")\n                          true)]\n       [password-requirements password [{:message \"8 or more characters\" :check-fn eight-or-more-characters?}\n                                        {:message \"At least one special character\" :check-fn has-special-character?}\n                                        {:message \"At least one number\" :check-fn has-number?}]]])))\n\n(defn password-form-noval\n  [password]\n  (let [password-type-atom (r/atom \"password\")]\n    (fn []\n      [:div\n       [(input-and-prompt \"password\"\n                          \"password\"\n                          @password-type-atom\n                          password\n                          (prompt-message \"What's your password\")\n                          true)]])))\n\n(defn wrap-as-element-in-form\n  [element]\n  [:div {:class \"row form-group\"}\n   element])\n\n(defn submit-registration\n  [email-address name password errors e]\n\n  (js/console.log \"submitting registration\")\n  ;;(js/console.log email-address)\n  ;;(js/console.log name)\n  ;;(js/console.log password)\n\n  (if (valid-email? email-address)\n    (if (valid-password? password)\n      (do\n        (reset! errors \"\")\n        (let [data {:name name\n                    :email email-address\n                    :password password}\n              ;;submit-params {:uri \"http://localhost:5050/api/register\"\n              ;;               :body data\n              ;;               :method :post\n              ;;               :on-success-kvec [::events/success-http-result]\n              ;;               :on-failure-kvec [::events/registration-error]}\n              ]\n          (POST \"http://localhost:5050/api/register\"\n            {:format :json\n             :params data\n             :handler (fn [r] ((do (js/console.log r)\n                                   (swap! db/app-state assoc :user r)\n                                   (swap! db/app-state assoc :state \"authorized\")\n                                   (rfe/push-state :filestorage.core/home-page)))\n                        (()))\n\n             :error-handler (fn [r] (js/console.log r\n                                                    (if (contains? r :response)\n                                                      (reset! errors (get (get r :response) \"detail\"))\n                                                      (if (contains? r :status-text)\n                                                        (reset! errors (get r :status-text))))))})\n          ;;(rfc/dispatch-sync [::events/submit-post-request submit-params])\n          ))\n\n      (reset! errors \"password is invalid\"))\n    (reset! errors \"email is invalid\"))\n  (.preventDefault e))\n\n(defn registration-form []\n  (let [email-address (r/atom nil)\n        name (r/atom nil)\n        password (r/atom nil)\n        errors (r/atom \"\")]\n    (fn []\n      [:div {:class \"signup-wrapper\"}\n\n       [:h2 \"register\"]\n       [:div {:id \"errors\" :style {:color \"red\" :display \"\"}}\n        @errors]\n       ;;[:div {:id \"errors\" :style {:color \"red\" :display \"\"}}\n       ;; @(rfc/subscribe [:registration-errors])]\n       [:br]\n       [:form {:on-submit (fn [e] (submit-registration @email-address @name @password errors e))}\n        (wrap-as-element-in-form [email-form email-address])\n        ;;[:br]\n        ;;(wrap-as-element-in-form [name-form name])\n        [:br]\n        (wrap-as-element-in-form [password-form password])\n        [:button {:id \"submit-registration\"\n                  :type \"submit\"\n                  ;;:on-click #(submit-registration @email-address @name @password errors)\n                  }\"Submit\"]]])))\n\n(defn submit-login\n  [email-address password errors e]\n\n  (js/console.log \"submitting login\")\n  ;;(js/console.log email-address)\n  ;;(js/console.log name)\n  ;;(js/console.log password)\n\n  (if (valid-email? email-address)\n    (if (valid-password? password)\n      (let [data {:email email-address\n                  :password password}]\n        (POST \"http://localhost:5050/api/login\"\n          {:format :json\n           :params data\n           :handler (fn [r] ((do (js/console.log r)\n                                 (swap! db/app-state assoc :user r)\n                                 (swap! db/app-state assoc :state \"authorized\")\n                                 (rfe/push-state :filestorage.core/home-page))))\n           :error-handler (fn [r] (js/console.log r\n                                                  (if (contains? r :response)\n                                                    (reset! errors (get (get r :response) \"detail\"))\n                                                    (if (contains? r :status-text)\n                                                      (reset! errors (get r :status-text))))))}))\n      (reset! errors \"password is invalid\"))\n    (reset! errors \"email is invalid\"))\n  (.preventDefault e))\n\n(defn login-form []\n  (let [email-address (r/atom nil)\n        password (r/atom nil)\n        errors (r/atom nil)]\n    (fn []\n      [:div {:class \"login-wrapper\"}\n       [:h2 \"login\"]\n       [:div {:id \"errors\" :style {:color \"red\"}}\n        @errors]\n       [:br]\n       [:form {:on-submit (fn [e] (submit-login @email-address @password errors e))}\n        (wrap-as-element-in-form [email-form email-address])\n        [:br]\n        (wrap-as-element-in-form [password-form-noval password])\n        [:br] [:br]\n        [:button {:id \"submit-login\"\n                  :type \"submit\"\n                  ;;:on-click #(submit-registration @email-address @name @password errors)\n                  }\"Submit\"]]])))\n\n"]}