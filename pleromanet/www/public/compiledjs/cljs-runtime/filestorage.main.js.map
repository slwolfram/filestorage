{"version":3,"sources":["filestorage/main.cljs"],"mappings":"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","names":["filestorage.main/password-box","pw","s","reagent.core.atom","p1__19657#","cljs.core/deref","cljs.core.pr_str","cljs.core.swap_BANG_","cljs.core/assoc","filestorage.main/header","filestorage.main/check-nil-then-predicate","value","predicate","filestorage.main/valid-email?","email","arg","cljs.core/boolean","cljs.core/first","cljs.core/re-seq","filestorage.main/eight-or-more-characters?","word","cljs.core/count","filestorage.main/has-special-character?","filestorage.main/has-number?","filestorage.main/valid-password?","password","and__5043__auto__","filestorage.main/prompt-message","message","p1__19658#","filestorage.main/input-element","id","name","type","in-focus","cljs.core/reset!","cljs.core/not","filestorage.main/input-and-prompt","label-value","input-name","input-type","input-element-arg","prompt-element","required?","input-focus","filestorage.main/email-form","email-address-atom","filestorage.main/name-form","name-atom","filestorage.main/password-requirements","requirements","cljs.core.filter","req","G__19660","fexpr__19659","cljs.core.doall","cljs.core.map","filestorage.main/password-form","password-type-atom","filestorage.main/password-form-noval","filestorage.main/wrap-as-element-in-form","element","filestorage.main/submit-registration","email-address","errors","e","js/console.log","data","ajax.core.POST","r","filestorage.db/app-state","reitit.frontend.easy.push_state","fexpr__19661","cljs.core/contains?","cljs.core.get","filestorage.main/registration-form","re_frame.core.subscribe","filestorage.main/submit-login","filestorage.main/login-form","filestorage.main/submit-file","input-id","el","js/document","file","form","form-data","js/FormData","_","cljs.core._EQ_","cljs.core.get_in","cljs.core/update-in","cljs.core/conj","cljs.core/update","filestorage.main/file-selector","UPLOADED-FILE","bg-image-style","temp__5802__auto__","i","filestorage.main/file-viewer","files","iter__5523__auto__","s__19663","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__19665","cljs.core/chunk-buffer","i__19664","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__19662","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","file-row","filestorage.main/home","cljs.core/chunk-first"],"sourcesContent":["(ns filestorage.main\n  (:require [reagent.core :as r]\n            [re-frame.core :as rfc]\n            [reitit.frontend.easy :as rfe]\n            [accountant.core :as accountant]\n            [ajax.core :refer [GET POST]]\n            [filestorage.db :as db]\n            [filestorage.subscriptions :as subs]\n            [filestorage.events :as events]))\n\n(defn password-box [pw]\n  (let [s (r/atom {:value pw})]\n    (fn []\n      [:form\n       (pr-str @s) [:br]\n\n       [:input {:type :password\n                :value (:value @s)\n                :on-change #(swap! s assoc :value (-> % .-target .-value))}] [:br]])))\n\n(defn header []\n  [:div\n   [:h1 {:style {:margin \"0 0 0 0\"}} \"pleroma|net\"]\n   ;;[password-box \"\"]\n   ])\n(defn check-nil-then-predicate\n  \"Check if the value is nil, then apply the predicate\"\n  [value predicate]\n  (if (nil? value)\n    false\n    (predicate value)))\n\n(defn valid-email?\n  [email]\n  (check-nil-then-predicate email (fn [arg] (boolean (first (re-seq #\"\\w+@\\w+.\\w+\" arg))))))\n\n(defn eight-or-more-characters?\n  [word]\n  (check-nil-then-predicate word (fn [arg] (> (count arg) 7))))\n\n(defn has-special-character?\n  [word]\n  (check-nil-then-predicate word (fn [arg] (boolean (first (re-seq #\"\\W+\" arg))))))\n\n(defn has-number?\n  [word]\n  (check-nil-then-predicate word (fn [arg] (boolean (re-seq #\"\\d+\" arg)))))\n\n(defn valid-password?\n  [password]\n  (and (eight-or-more-characters? password) (has-special-character? password) (has-number? password)))\n\n(defn prompt-message\n  \"A prompt that will animate to help the user with a given input\"\n  [message]\n  [:div {:class \"my-messages\"}\n   ;;[:div {:class \"prompt message-animation\"} [:p message]]\n   ])\n(defn input-element\n  \"An input element which updates its value and on focus parameters on change, blur, and focus\"\n  [id name type value in-focus]\n  [:input {:id id\n           :name name\n           :class \"form-control\"\n           :type type\n           :required \"\"\n           :value @value\n           :on-change #(reset! value (-> % .-target .-value))\n           :on-focus #(swap! in-focus not)\n           :on-blur (fn [arg] (if (nil? @value) (reset! value \"\")) (swap! in-focus not))}])\n\n(defn input-and-prompt\n  \"Creates an input box and a prompt box that appears above the input when the input comes into focus. Also throws in a little required message\"\n  [label-value input-name input-type input-element-arg prompt-element required?]\n  (let [input-focus (r/atom false)]\n    (fn []\n      [:div\n       [:label label-value]\n       (if @input-focus prompt-element [:div])\n       [input-element input-name input-name input-type input-element-arg input-focus]\n       ;;(if (and required? (= \"\" @input-element-arg))\n       ;;  [:div \"Field is required!\"]\n       ;;  [:div])\n       ])))\n\n(defn email-form [email-address-atom]\n  (input-and-prompt \"email\"\n                    \"email\"\n                    \"email\"\n                    email-address-atom\n                    (prompt-message \"What's your email address?\")\n                    true))\n\n(defn name-form [name-atom]\n  (input-and-prompt \"name\"\n                    \"name\"\n                    \"text\"\n                    name-atom\n                    (prompt-message \"What's your name?\")\n                    true))\n\n(defn password-requirements\n  \"A list to describe which password requirements have been met so far\"\n  [password requirements]\n  [:div\n   [:ul (->> requirements\n             (filter (fn [req] (not ((:check-fn req) @password))))\n             (doall)\n             (map (fn [req] ^{:key req} [:li {:style {:color \"red\"}} (:message req)])))]])\n\n(defn password-form\n  [password]\n  (let [password-type-atom (r/atom \"password\")]\n    (fn []\n      [:div\n       [(input-and-prompt \"password\"\n                          \"password\"\n                          @password-type-atom\n                          password\n                          (prompt-message \"What's your password\")\n                          true)]\n       [password-requirements password [{:message \"8 or more characters\" :check-fn eight-or-more-characters?}\n                                        {:message \"At least one special character\" :check-fn has-special-character?}\n                                        {:message \"At least one number\" :check-fn has-number?}]]])))\n\n(defn password-form-noval\n  [password]\n  (let [password-type-atom (r/atom \"password\")]\n    (fn []\n      [:div\n       [(input-and-prompt \"password\"\n                          \"password\"\n                          @password-type-atom\n                          password\n                          (prompt-message \"What's your password\")\n                          true)]])))\n\n(defn wrap-as-element-in-form\n  [element]\n  [:div {:class \"row form-group\"}\n   element])\n\n(defn submit-registration\n  [email-address name password errors e]\n\n  (js/console.log \"submitting registration\")\n  ;;(js/console.log email-address)\n  ;;(js/console.log name)\n  ;;(js/console.log password)\n\n  (if (valid-email? email-address)\n    (if (valid-password? password)\n      (do\n        (reset! errors \"\")\n        (let [data {:name name\n                    :email email-address\n                    :password password}\n              ;;submit-params {:uri \"http://localhost:5050/api/register\"\n              ;;               :body data\n              ;;               :method :post\n              ;;               :on-success-kvec [::events/success-http-result]\n              ;;               :on-failure-kvec [::events/registration-error]}\n              ]\n          (POST \"http://localhost:5050/api/register\"\n            {:format :json\n             :params data\n             :handler (fn [r] (js/console.log r\n                                              (swap! db/app-state assoc :user r)\n                                              (rfe/push-state :filestorage.core/home-page))\n                                              (()))\n\n             :error-handler (fn [r] (js/console.log r\n                                                    (if (contains? r :response)\n                                                      (reset! errors (get (get r :response) \"detail\"))\n                                                      (if (contains? r :status-text)\n                                                        (reset! errors (get r :status-text))))))})\n          ;;(rfc/dispatch-sync [::events/submit-post-request submit-params])\n          ))\n\n      (reset! errors \"password is invalid\"))\n    (reset! errors \"email is invalid\"))\n  (.preventDefault e))\n\n(defn registration-form []\n  (let [email-address (r/atom nil)\n        name (r/atom nil)\n        password (r/atom nil)\n        errors (r/atom \"\")]\n    (fn []\n      [:div {:class \"signup-wrapper\"}\n\n       [:h2 \"register\"]\n       [:div {:id \"errors\" :style {:color \"red\" :display \"\"}}\n        @errors]\n       [:div {:id \"errors\" :style {:color \"red\" :display \"\"}}\n        @(rfc/subscribe [:registration-errors])]\n       [:br]\n       [:form {:on-submit (fn [e] (submit-registration @email-address @name @password errors e))}\n        (wrap-as-element-in-form [email-form email-address])\n        ;;[:br]\n        ;;(wrap-as-element-in-form [name-form name])\n        [:br]\n        (wrap-as-element-in-form [password-form password])\n        [:button {:id \"submit-registration\"\n                  :type \"submit\"\n                  ;;:on-click #(submit-registration @email-address @name @password errors)\n                  }\"Submit\"]]])))\n\n(defn submit-login\n  [email-address password errors e]\n\n  (js/console.log \"submitting login\")\n  ;;(js/console.log email-address)\n  ;;(js/console.log name)\n  ;;(js/console.log password)\n\n  (if (valid-email? email-address)\n    (if (valid-password? password)\n      (let [data {:email email-address\n                  :password password}]\n        (POST \"http://localhost:5050/api/login\"\n          {:format :json\n           :params data\n           :handler (fn [r] (js/console.log r\n                                            (swap! db/app-state assoc :user r)\n                                            (rfe/push-state :filestorage.core/home-page)))\n           :error-handler (fn [r] (js/console.log r\n                                                  (if (contains? r :response)\n                                                    (reset! errors (get (get r :response) \"detail\"))\n                                                    (if (contains? r :status-text)\n                                                      (reset! errors (get r :status-text))))))}))\n      (reset! errors \"password is invalid\"))\n    (reset! errors \"email is invalid\"))\n  (.preventDefault e))\n\n(defn login-form []\n  (let [email-address (r/atom nil)\n        password (r/atom nil)\n        errors (r/atom nil)]\n    (fn []\n      [:div {:class \"login-wrapper\"}\n       [:h2 \"login\"]\n       [:div {:id \"errors\" :style {:color \"red\"}}\n        @errors]\n       [:br]\n       [:form {:on-submit (fn [e] (submit-login @email-address @password errors e))}\n        (wrap-as-element-in-form [email-form email-address])\n        [:br]\n        (wrap-as-element-in-form [password-form-noval password])\n        [:br] [:br]\n        [:button {:id \"submit-login\"\n                  :type \"submit\"\n                  ;;:on-click #(submit-registration @email-address @name @password errors)\n                  }\"Submit\"]]])))\n\n(defn submit-file\n  \"submit the file that is on input `#input-id`\"\n  [input-id errors e]\n  (let [el (.getElementById js/document input-id)\n        name (.-name el)\n        file (aget (.-files el) 0)\n        form (.getElementById js/document \"upload-form\")\n        form-data (js/FormData.)\n        _ (.append form-data \"file\" file)\n        ;;submit-params {:uri \"http://localhost:5050/api/upload\"\n        ;;               :body form-data\n        ;;               :method :post\n        ;;               :on-success-kvec [::events/success-http-result]}\n        ]\n    (if (not (= \"\" (-> el .-value)))\n     (POST \"http://localhost:5050/api/files/upload\"\n      {;;:format :json\n       :headers {\"Authorization\" (str \"Bearer \" (get-in @db/app-state [:user \"token\" \"access_token\"]))}\n       :body form-data\n       :handler (fn [r] (js/console.log r\n                                        (swap! db/app-state update-in [:user \"files\"] conj r)\n                                        (swap! db/app-state update :files conj r)\n                                        (reset! errors \"\")\n                                        (.reset form)))\n       :error-handler (fn [r] (js/console.log r\n                                              (if (contains? r :response)\n                                                (reset! errors (get (get r :response) \"detail\"))\n                                                (if (contains? r :status-text)\n                                                  (reset! errors (get r :status-text))))))})\n     (reset! errors \"No file selected\")\n    ;;(rfc/dispatch [::events/upload-file submit-params])\n    ))\n  (.preventDefault e))\n\n(defn file-selector\n  \"an image-selection element that shows the image you've chosen.\n  This is a form-2 reagent component so we can avoid global state.\n  https://github.com/reagent-project/reagent/blob/master/doc/CreatingReagentComponents.md#form-2--a-function-returning-a-function\"\n  []\n  (let [UPLOADED-FILE (r/atom nil)\n        errors (r/atom nil)\n        bg-image-style (fn []\n                         (if-let [i @UPLOADED-FILE]\n                           {:background-image\n                            (str \"url(\" i \")\")}\n                           {:background-color \"red\"}))\n        input-id \"image-in\"]\n    (fn []\n      [:div.cntnr\n       [:div {:id \"errors\" :style {:color \"red\"}}\n        @errors]\n       [:br]\n       [:form {:id \"upload-form\" :on-submit (fn [e] (submit-file input-id errors e))}\n        [:input {:type \"file\"\n                 :name \"file\"\n                 :id input-id\n                ;; :on-change #(change-read % UPLOADED-FILE)\n                 :enc-type \"multipart/form-data\"}]\n        [:br][:br]\n        [:label \"file type: \"][:input]\n        [:br][:br]\n        [:label \"access level: \"][:input]\n        [:div.display-image {:height \"300px\" :width \"300px\" :style (bg-image-style)}]\n        [:br] [:br]\n        [:button\n        ;;{:on-click #(submit-file input-id errors)}\n         \"Submit\"]]])))\n\n(defn file-viewer\n  \"an image-selection element that shows the image you've chosen.\n  This is a form-2 reagent component so we can avoid global state.\n  https://github.com/reagent-project/reagent/blob/master/doc/CreatingReagentComponents.md#form-2--a-function-returning-a-function\"\n  []\n  (let [files (r/atom nil)\n        errors (r/atom nil)\n        input-id \"file-viewer\"]\n    (fn []\n      [:div.cntnr\n       ;;@errors\n       ;;@files\n       ;;(js/console.log (get-in @db/app-state [:user]))\n       ;;(str(get-in @db/app-state [:user \"files\"]))\n       [:table {:id \"file-grid\"}\n       (for [file-row (get-in @db/app-state [:user \"files\"])]\n            [:tr\n             [:td [:a {:href (str \"http://localhost:5050/api/files/download/\" (get file-row \"filepath\") \"/\" (get-in @db/app-state [:user \"token\" \"access_token\"]))} (get file-row \"filename\")]]]\n            )]\n      ])))\n\n(defn home []\n  (if (not (contains? @db/app-state :user))\n    (rfe/push-state :filestorage.core/login-page)\n    (js/console.log \"logged in\"))\n  [:div\n   [:h2 \"upload file\"]\n   [file-selector \"file-selector\"]\n\n   [:br] [:hr] [:br]\n\n   [ :h2 \"files\"]\n\n   [file-viewer \"file-viewer\"]\n\n   ;;[:form {:action \"http://localhost:5050/api/upload\"\n   ;;        :enc-type \"multipart/form-data\"\n   ;;        :method \"post\"}\n   ;; [:input {:type \"file\"\n   ;;          :name \"file\"\n   ;;          :enc-type \"multipart/form-data\"}]\n   ;; [:br] [:br] [:br] [:br]\n   ;; [:button {:type \"submit\"}\n   ;;  \"Submit\"]]\n   ])\n\n"]}