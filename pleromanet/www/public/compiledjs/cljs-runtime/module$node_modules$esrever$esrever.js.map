{
"version":3,
"file":"module$node_modules$esrever$esrever.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,mCAAA,CAAwD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAE9F,SAAQ,CAACC,IAAD,CAAO,CAGhB,IAAIC,YAAgC,QAAhCA,EAAc,MAAOF,QAArBE,EAA4CF,OAAhD,CAGIG,WAA8B,QAA9BA,EAAa,MAAOJ,OAApBI,EAA0CJ,MAA1CI,EACHJ,MAAOC,CAAAA,OADJG,EACeD,WADfC,EAC8BJ,MAJlC,CAQIK,WAA8B,QAA9BA,EAAa,MAAOP,OAApBO,EAA0CP,MAC9C,IAAIO,UAAWP,CAAAA,MAAf,GAA0BO,UAA1B,EAAwCA,UAAWC,CAAAA,MAAnD,GAA8DD,UAA9D,CACCH,IAAA,CAAOG,UAKR,KAAIE,8BAAgC,4QAApC;AACIC,mBAAqB,qCADzB,CAGIC,QAAUA,QAAQ,CAACC,MAAD,CAAS,CAE9BA,MAAA,CAASA,MAEPC,CAAAA,OAFO,CAECJ,6BAFD,CAEgC,QAAQ,CAACK,EAAD,CAAKC,EAAL,CAASC,EAAT,CAAa,CAG5D,MAAOL,QAAA,CAAQK,EAAR,CAAP,CAAqBD,EAHuC,CAFrD,CAQPF,CAAAA,OARO,CAQCH,kBARD,CAQqB,MARrB,CAYT,KAFA,IAAIO,OAAS,EAAb,CACIC,MAAQN,MAAOO,CAAAA,MACnB,CAAOD,KAAA,EAAP,CAAA,CACCD,MAAA,EAAUL,MAAOQ,CAAAA,MAAP,CAAcF,KAAd,CAEX,OAAOD,OAjBuB,CAH/B,CAyBII,QAAU,CACb,QAAW,OADE,CAEFV,OAFE,CAOd,IACkB,UADlB,EACC,MAAOW,OADR,EAEsB,QAFtB,EAEC,MAAOA,OAAOC,CAAAA,GAFf,EAGCD,MAAOC,CAAAA,GAHR,CAKCD,MAAA,CAAO,QAAQ,EAAG,CACjB,MAAOD,QADU,CAAlB,CALD,KAQO,IAAIhB,WAAJ,EAAmB,CAACA,WAAYmB,CAAAA,QAAhC,CACN,GAAIlB,UAAJ,CACCA,UAAWH,CAAAA,OAAX;AAAqBkB,OADtB,KAGC,KAAKI,IAAIA,GAAT,GAAgBJ,QAAhB,CACCA,OAAQK,CAAAA,cAAR,CAAuBD,GAAvB,CAAA,GAAgCpB,WAAA,CAAYoB,GAAZ,CAAhC,CAAmDJ,OAAA,CAAQI,GAAR,CAAnD,CALI,KASNrB,KAAKiB,CAAAA,OAAL,CAAeA,OAnEA,CAAf,CAAA,CAsEA,IAtEA,CAF8F;",
"sources":["node_modules/esrever/esrever.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$esrever$esrever\"] = function(global,require,module,exports) {\n/*! https://mths.be/esrever v0.2.0 by @mathias */\n;(function(root) {\n\n\t// Detect free variables `exports`\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code,\n\t// and use it as `root`\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar regexSymbolWithCombiningMarks = /([\\0-\\u02FF\\u0370-\\u1AAF\\u1B00-\\u1DBF\\u1E00-\\u20CF\\u2100-\\uD7FF\\uE000-\\uFE1F\\uFE30-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])([\\u0300-\\u036F\\u1AB0-\\u1AFF\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]+)/g;\n\tvar regexSurrogatePair = /([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])/g;\n\n\tvar reverse = function(string) {\n\t\t// Step 1: deal with combining marks and astral symbols (surrogate pairs)\n\t\tstring = string\n\t\t\t// Swap symbols with their combining marks so the combining marks go first\n\t\t\t.replace(regexSymbolWithCombiningMarks, function($0, $1, $2) {\n\t\t\t\t// Reverse the combining marks so they will end up in the same order\n\t\t\t\t// later on (after another round of reversing)\n\t\t\t\treturn reverse($2) + $1;\n\t\t\t})\n\t\t\t// Swap high and low surrogates so the low surrogates go first\n\t\t\t.replace(regexSurrogatePair, '$2$1');\n\t\t// Step 2: reverse the code units in the string\n\t\tvar result = '';\n\t\tvar index = string.length;\n\t\twhile (index--) {\n\t\t\tresult += string.charAt(index);\n\t\t}\n\t\treturn result;\n\t};\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar esrever = {\n\t\t'version': '0.2.0',\n\t\t'reverse': reverse\n\t};\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn esrever;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = esrever;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (var key in esrever) {\n\t\t\t\tesrever.hasOwnProperty(key) && (freeExports[key] = esrever[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.esrever = esrever;\n\t}\n\n}(this));\n\n};"],
"names":["shadow$provide","global","require","module","exports","root","freeExports","freeModule","freeGlobal","window","regexSymbolWithCombiningMarks","regexSurrogatePair","reverse","string","replace","$0","$1","$2","result","index","length","charAt","esrever","define","amd","nodeType","key","hasOwnProperty"]
}
