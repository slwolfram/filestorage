{"version":3,"sources":["cider/nrepl/inlined/deps/suitable/v0v5v0/suitable/js_introspection.cljs"],"mappings":";AAIA,AAAKA,AACH,AAAI,AAAA,AAAmCC,AAErC,AAAKC;AAAL,AAAU,AAACC,AAAoCD;AAE/C,AAAKA;AAAL,AAAU,AAEK,AAACG,AAAI,AAAKC,AACV,AAAA,AAACE,AACDC;AAFK,AAAA,AAAWH,AAAI,AAACC,AAAmCL,AAAII;AAF5DJ,AACAE,AACA;;AAInB,AAAA,AAAMM,AAAyBR;AAA/B,AACE,AAAOA,AAAIA;AAAX,AAAeS;;AAAf,AACE,AAAIT;AACF,AACC,AAACU,AAAyBV;AAC1B,AAAA,AAAA,AAAA,AAACW,AAAKF,AAAaT,AAAW,AAACF,AAAyBE;;;;;AACzDS;;;;;AAEN,AAAA,AAAA,AAAAG,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFE;AADJ,AACY,AAAA,AAACC,AAAyBD;;;AADtC,AAAA,AAAA,AAAMF,AAEFE,AAAOE;AAFX,AAGG,AAAMC,AAAK,AAAA,AAACC;AAAZ,AACE,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAG,AAAA,AAAAC,AAAAF;AAAA,AAAAG,AAAAF,AAAA,AAAA,AAAO4B;AAAPzB,AAAA,AAAAD,AAAAF,AAAA,AAAA;AAAAG,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAiB0B;AAAjB,AAAAtB,AAAAJ,AAAA,AAAsB2B;AAAtB,AAAA,AAAAtB,AAAA;AAAAC;AAAA,AAAA,AAAAb,AAAA,AAAA;;AAAA,AAAA,AAAAa,AAAAA;;AAAA,AAAA,AAAAZ,AAAA,AAAAC,AAAAW;AAAA,AAAA,AAAAZ;AAAA,AAAA,AAAAY,AAAAZ;AAAA,AAAA,AAAA,AAAAa,AAAAD;AAAA,AAAAE,AA06E8C,AAAAoC,AAAAtC;AA16E9CG,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AACMvC;AADN,AAAA,AAEY,AAAK,AAACyD,AAAI,AAAA,AAAAC,AAAC5B,AAAKf,AAAKf,AAChB,AAAI,AAAC2D,AAAO7C,AACR,AAAC8C,AAAa5D,AAAIc;AAJvC,AAAA,AAAA2B,AAAAJ,AAKE,AAAMwB,AAAK,AAACC,AAAKT,AAAMrD;AAAvB,AACE,AAAA,AAAA,AAAQe,AAAAA,AAAKR,AAAKP;;AADpB,AAAA,AAAA,AAAA,AAESA,AACKmD,AACL,AAAA,AACE,AAAAc,AAAe,AAAAE,AAAI,AAAA,AAACL,AAAKD;AAAV,AAAA,AAAAM;AAAAA;;AACQN,AAAK,AAAA,AAACC,AACN,AAAA,AAAClC;;;AAFxB,AAAA,AAAAqC;AAAA,AAAAA,AAASC;AAAT,AAGE,AAAI,AAACE,AAAIF;AAAT;;AAAA;;;AAHF;;AADF,AAAA,AAAAH,AAMSpD;AANT,AAAAoD,AAMkBM;AANlB,AAAA;;AAAA,AAAA,AAAAN;;;;;;AATX,AAAA,AAAAxB,AAAA;;;;AAAA,AAAA,AAAAA,AAAA;;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAb;;AAAA,AAAAU,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAb,AAAAQ,AACMhC;AADN,AAAA,AAEY,AAAK,AAACyD,AAAI,AAAA,AAAAC,AAAC5B,AAAKf,AAAKf,AAChB,AAAI,AAAC2D,AAAO7C,AACR,AAAC8C,AAAa5D,AAAIc;AAJvC,AAAAgC,AAKE,AAAMe,AAAK,AAACC,AAAKT,AAAMrD;AAAvB,AACE,AAAA,AAAA,AAAQe,AAAAA,AAAKR,AAAKP;;AADpB,AAAA,AAAA,AAAA,AAESA,AACKmD,AACL,AAAA,AACE,AAAAc,AAAe,AAAAE,AAAI,AAAA,AAACL,AAAKD;AAAV,AAAA,AAAAM;AAAAA;;AACQN,AAAK,AAAA,AAACC,AACN,AAAA,AAAClC;;;AAFxB,AAAA,AAAAqC;AAAA,AAAAA,AAASC;AAAT,AAGE,AAAI,AAACE,AAAIF;AAAT;;AAAA;;;AAHF;;AADF,AAAA,AAAAF,AAMSrD;AANT,AAAAqD,AAMkBK;AANlB,AAAA;;AAAA,AAAA,AAAAL;;;;AATX,AAAApB,AAAA,AAAAG,AAAAf;;AAAA,AAAA,AAAAe,AAAAf;;;;;;AAAA;;;;;AAAA,AAAA;;;AAAAgB,AAAA,AAAA3B,AAAA,AAAAU,AACU,AAACyB,AAAQH;AADnB,AAAA,AAAAL;AAAA,AAAAC,AAAAD,AAAA,AAAAE,AAAA,AAAAH,AAAA7B;;AAAA,AAAA,AAAA6B,AAAA7B;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAD,AAA+B,AAACqC,AAAYC,AAAO,AAACnD,AAAwBQ;;;AAJjF,AAAA,AAAA,AAAMF;;AAAN,AAqBA","names":["cider.nrepl.inlined.deps.suitable.v0v5v0.suitable.js-introspection/own-property-descriptors","js/Object","obj","js/Object.getOwnPropertyDescriptors","js/Object.getOwnPropertyNames","cljs.core.map","key","js/Object.getOwnPropertyDescriptor","cljs.core.into","cljs.core/clj->js","cider.nrepl.inlined.deps.suitable.v0v5v0.suitable.js-introspection/properties-by-prototype","protos","js/Object.getPrototypeOf","cljs.core.conj","var_args","G__48113","cider.nrepl.inlined.deps.suitable.v0v5v0.suitable.js-introspection/property-names-and-types","js/Error","js-obj","cider.nrepl.inlined.deps.suitable.v0v5v0.suitable.js_introspection.property_names_and_types","prefix","seen","cljs.core/volatile!","iter__4529__auto__","s__48115","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","vec__48120","cljs.core/first","cljs.core.nth","map__48123","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","iterys__4525__auto__","s__48117","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__48119","cljs.core/chunk-buffer","i__48118","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__48116","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","cljs.core.concat","iter__48114","i","_obj","props","cljs.core.map_indexed","cljs.core/vector","cljs.core/js-keys","cljs.core/not","cljs.core/deref","cljs.core/empty?","clojure.string/starts-with?","prop","goog.object/get","e48125","e48126","temp__5733__auto__","value","or__4126__auto__","cljs.core/fn?","_e","cljs.core/chunk-first"],"sourcesContent":["(ns ^{:mranderson/inlined true} cider.nrepl.inlined.deps.suitable.v0v5v0.suitable.js-introspection\n  (:require [clojure.string :refer [starts-with?]]\n            [goog.object :refer [get] :rename {get oget}]))\n\n(def own-property-descriptors\n  (if (js-in \"getOwnPropertyDescriptors\" js/Object)\n    ;; ES 6+ version\n    (fn [obj] (js/Object.getOwnPropertyDescriptors obj))\n    ;; ES 5.1 version\n    (fn [obj] (->> obj\n                   js/Object.getOwnPropertyNames\n                   (map (fn [key] [key (js/Object.getOwnPropertyDescriptor obj key)]))\n                   (into {})\n                   clj->js))))\n\n(defn properties-by-prototype [obj]\n  (loop [obj obj protos []]\n    (if obj\n      (recur\n       (js/Object.getPrototypeOf obj)\n       (conj protos {:obj obj :props (own-property-descriptors obj)}))\n      protos)))\n\n(defn property-names-and-types\n  ([js-obj] (property-names-and-types js-obj nil))\n  ([js-obj prefix]\n   (let [seen (volatile! #{})]\n     (for [[i {:keys [_obj props]}] (map-indexed vector (properties-by-prototype js-obj))\n           key (js-keys props)\n           :when (and (not (get @seen key))\n                      (or (empty? prefix)\n                          (starts-with? key prefix)))]\n       (let [prop (oget props key)]\n         (vswap! seen conj key)\n         {:name key\n          :hierarchy i\n          :type (try\n                  (if-let [value (or (oget prop \"value\")\n                                     (-> prop (oget \"get\")\n                                         (apply [])))]\n                    (if (fn? value) \"function\" \"var\")\n                    \"var\")\n                  (catch js/Error _e \"var\"))})))))\n\n(comment\n  (require '[cljs.pprint :refer [pprint]])\n  ;; (-> js/console property-names-and-types pprint)\n  (-> js/document.body property-names-and-types pprint)\n\n  (let [obj (new (fn [x] (this-as this (goog.object/set this \"foo\" 23))))]\n    (pprint (property-names-and-types obj)))\n\n  (oget js/console \"log\")\n  (-> js/console property-names-and-types pprint)\n  (-> js/window property-names-and-types pprint))\n"]}